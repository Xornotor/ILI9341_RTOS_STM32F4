
ILI9341_RTOS_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006880  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001894  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082b4  080082b4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082bc  080082bc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080082c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b94  20000078  0800833c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c0c  0800833c  00024c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018de0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003666  00000000  00000000  00038e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0003c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0003da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001806b  00000000  00000000  0003edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a02  00000000  00000000  00056e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098af3  00000000  00000000  0006d83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106330  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b9c  00000000  00000000  00106380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a08 	.word	0x08006a08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006a08 	.word	0x08006a08

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ILI9341_DrawHollowRectangleCoord>:
		}
	}
}

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4604      	mov	r4, r0
 80004ec:	4608      	mov	r0, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	461a      	mov	r2, r3
 80004f2:	4623      	mov	r3, r4
 80004f4:	80fb      	strh	r3, [r7, #6]
 80004f6:	4603      	mov	r3, r0
 80004f8:	80bb      	strh	r3, [r7, #4]
 80004fa:	460b      	mov	r3, r1
 80004fc:	807b      	strh	r3, [r7, #2]
 80004fe:	4613      	mov	r3, r2
 8000500:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 8000512:	f04f 0300 	mov.w	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8000518:	887a      	ldrh	r2, [r7, #2]
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	ee07 3a90 	vmov	s15, r3
 8000522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000526:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 800052a:	edd7 7a03 	vldr	s15, [r7, #12]
 800052e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000536:	d501      	bpl.n	800053c <ILI9341_DrawHollowRectangleCoord+0x58>
 8000538:	2301      	movs	r3, #1
 800053a:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 800053c:	f04f 0300 	mov.w	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 8000542:	883a      	ldrh	r2, [r7, #0]
 8000544:	88bb      	ldrh	r3, [r7, #4]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	ee07 3a90 	vmov	s15, r3
 800054c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000550:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 8000554:	edd7 7a03 	vldr	s15, [r7, #12]
 8000558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800055c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000560:	d501      	bpl.n	8000566 <ILI9341_DrawHollowRectangleCoord+0x82>
 8000562:	2301      	movs	r3, #1
 8000564:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 8000566:	7cfb      	ldrb	r3, [r7, #19]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d104      	bne.n	8000576 <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 800056c:	887a      	ldrh	r2, [r7, #2]
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	82fb      	strh	r3, [r7, #22]
 8000574:	e003      	b.n	800057e <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 8000576:	88fa      	ldrh	r2, [r7, #6]
 8000578:	887b      	ldrh	r3, [r7, #2]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 800057e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000580:	8afa      	ldrh	r2, [r7, #22]
 8000582:	88b9      	ldrh	r1, [r7, #4]
 8000584:	88f8      	ldrh	r0, [r7, #6]
 8000586:	f000 fd35 	bl	8000ff4 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 800058a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800058c:	8afa      	ldrh	r2, [r7, #22]
 800058e:	8839      	ldrh	r1, [r7, #0]
 8000590:	88f8      	ldrh	r0, [r7, #6]
 8000592:	f000 fd2f 	bl	8000ff4 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 8000596:	7cbb      	ldrb	r3, [r7, #18]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d104      	bne.n	80005a6 <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 800059c:	883a      	ldrh	r2, [r7, #0]
 800059e:	88bb      	ldrh	r3, [r7, #4]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	82bb      	strh	r3, [r7, #20]
 80005a4:	e003      	b.n	80005ae <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 80005a6:	88ba      	ldrh	r2, [r7, #4]
 80005a8:	883b      	ldrh	r3, [r7, #0]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 80005ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005b0:	8aba      	ldrh	r2, [r7, #20]
 80005b2:	88b9      	ldrh	r1, [r7, #4]
 80005b4:	88f8      	ldrh	r0, [r7, #6]
 80005b6:	f000 fd61 	bl	800107c <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80005ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005bc:	8aba      	ldrh	r2, [r7, #20]
 80005be:	88b9      	ldrh	r1, [r7, #4]
 80005c0:	8878      	ldrh	r0, [r7, #2]
 80005c2:	f000 fd5b 	bl	800107c <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 80005c6:	8afb      	ldrh	r3, [r7, #22]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <ILI9341_DrawHollowRectangleCoord+0xee>
 80005cc:	8abb      	ldrh	r3, [r7, #20]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d005      	beq.n	80005de <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 80005d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80005d4:	8839      	ldrh	r1, [r7, #0]
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fc49 	bl	8000e70 <ILI9341_DrawPixel>
	}
}
 80005de:	bf00      	nop
 80005e0:	371c      	adds	r7, #28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd90      	pop	{r4, r7, pc}

080005e6 <ILI9341_DrawFilledRectangleCoord>:

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80005e6:	b590      	push	{r4, r7, lr}
 80005e8:	b089      	sub	sp, #36	; 0x24
 80005ea:	af02      	add	r7, sp, #8
 80005ec:	4604      	mov	r4, r0
 80005ee:	4608      	mov	r0, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	461a      	mov	r2, r3
 80005f4:	4623      	mov	r3, r4
 80005f6:	80fb      	strh	r3, [r7, #6]
 80005f8:	4603      	mov	r3, r0
 80005fa:	80bb      	strh	r3, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
 8000600:	4613      	mov	r3, r2
 8000602:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8000620:	887a      	ldrh	r2, [r7, #2]
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b00      	cmp	r3, #0
 800062c:	da01      	bge.n	8000632 <ILI9341_DrawFilledRectangleCoord+0x4c>
 800062e:	2301      	movs	r3, #1
 8000630:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8000636:	883a      	ldrh	r2, [r7, #0]
 8000638:	88bb      	ldrh	r3, [r7, #4]
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	da01      	bge.n	8000648 <ILI9341_DrawFilledRectangleCoord+0x62>
 8000644:	2301      	movs	r3, #1
 8000646:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 8000648:	7cfb      	ldrb	r3, [r7, #19]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d106      	bne.n	800065c <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 800064e:	887a      	ldrh	r2, [r7, #2]
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	823b      	strh	r3, [r7, #16]
 800065a:	e005      	b.n	8000668 <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 800065c:	88fa      	ldrh	r2, [r7, #6]
 800065e:	887b      	ldrh	r3, [r7, #2]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 8000668:	7cbb      	ldrb	r3, [r7, #18]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d106      	bne.n	800067c <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 800066e:	883a      	ldrh	r2, [r7, #0]
 8000670:	88bb      	ldrh	r3, [r7, #4]
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 8000676:	88bb      	ldrh	r3, [r7, #4]
 8000678:	81fb      	strh	r3, [r7, #14]
 800067a:	e005      	b.n	8000688 <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 800067c:	88ba      	ldrh	r2, [r7, #4]
 800067e:	883b      	ldrh	r3, [r7, #0]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 8000684:	883b      	ldrh	r3, [r7, #0]
 8000686:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 8000688:	8abc      	ldrh	r4, [r7, #20]
 800068a:	8afa      	ldrh	r2, [r7, #22]
 800068c:	89f9      	ldrh	r1, [r7, #14]
 800068e:	8a38      	ldrh	r0, [r7, #16]
 8000690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	4623      	mov	r3, r4
 8000696:	f000 fc51 	bl	8000f3c <ILI9341_DrawRectangle>
}
 800069a:	bf00      	nop
 800069c:	371c      	adds	r7, #28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd90      	pop	{r4, r7, pc}

080006a2 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80006a2:	b590      	push	{r4, r7, lr}
 80006a4:	b08d      	sub	sp, #52	; 0x34
 80006a6:	af02      	add	r7, sp, #8
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	460b      	mov	r3, r1
 80006b4:	81bb      	strh	r3, [r7, #12]
 80006b6:	4613      	mov	r3, r2
 80006b8:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2b1e      	cmp	r3, #30
 80006be:	d961      	bls.n	8000784 <ILI9341_DrawChar+0xe2>
 80006c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db5d      	blt.n	8000784 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	785b      	ldrb	r3, [r3, #1]
 80006d2:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	789b      	ldrb	r3, [r3, #2]
 80006d8:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	78db      	ldrb	r3, [r3, #3]
 80006de:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	3b20      	subs	r3, #32
 80006e4:	7ffa      	ldrb	r2, [r7, #31]
 80006e6:	fb02 f303 	mul.w	r3, r2, r3
 80006ea:	3304      	adds	r3, #4
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	4413      	add	r3, r2
 80006f0:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80006f2:	7fbb      	ldrb	r3, [r7, #30]
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	7f7b      	ldrb	r3, [r7, #29]
 80006f8:	b29c      	uxth	r4, r3
 80006fa:	88f9      	ldrh	r1, [r7, #6]
 80006fc:	89b8      	ldrh	r0, [r7, #12]
 80006fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	4623      	mov	r3, r4
 8000704:	f000 fc1a 	bl	8000f3c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
 800070c:	e035      	b.n	800077a <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
 8000712:	e02b      	b.n	800076c <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000714:	7f3b      	ldrb	r3, [r7, #28]
 8000716:	6a3a      	ldr	r2, [r7, #32]
 8000718:	fb03 f202 	mul.w	r2, r3, r2
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	10db      	asrs	r3, r3, #3
 8000720:	f003 031f 	and.w	r3, r3, #31
 8000724:	4413      	add	r3, r2
 8000726:	3301      	adds	r3, #1
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	2201      	movs	r2, #1
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800073e:	7dfa      	ldrb	r2, [r7, #23]
 8000740:	7dbb      	ldrb	r3, [r7, #22]
 8000742:	4013      	ands	r3, r2
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00d      	beq.n	8000766 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800074a:	6a3b      	ldr	r3, [r7, #32]
 800074c:	b29a      	uxth	r2, r3
 800074e:	89bb      	ldrh	r3, [r7, #12]
 8000750:	4413      	add	r3, r2
 8000752:	b298      	uxth	r0, r3
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	b29a      	uxth	r2, r3
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	4413      	add	r3, r2
 800075c:	b29b      	uxth	r3, r3
 800075e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fb85 	bl	8000e70 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	3301      	adds	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
 800076c:	7fbb      	ldrb	r3, [r7, #30]
 800076e:	6a3a      	ldr	r2, [r7, #32]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbcf      	blt.n	8000714 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	3301      	adds	r3, #1
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
 800077a:	7f7b      	ldrb	r3, [r7, #29]
 800077c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800077e:	429a      	cmp	r2, r3
 8000780:	dbc5      	blt.n	800070e <ILI9341_DrawChar+0x6c>
 8000782:	e000      	b.n	8000786 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 8000784:	bf00      	nop
			}
		}
	}
}
 8000786:	372c      	adds	r7, #44	; 0x2c
 8000788:	46bd      	mov	sp, r7
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af02      	add	r7, sp, #8
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	4611      	mov	r1, r2
 8000798:	461a      	mov	r2, r3
 800079a:	460b      	mov	r3, r1
 800079c:	80fb      	strh	r3, [r7, #6]
 800079e:	4613      	mov	r3, r2
 80007a0:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	785b      	ldrb	r3, [r3, #1]
 80007ac:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80007ae:	e02d      	b.n	800080c <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	7818      	ldrb	r0, [r3, #0]
 80007b4:	88b9      	ldrh	r1, [r7, #4]
 80007b6:	88fa      	ldrh	r2, [r7, #6]
 80007b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	460b      	mov	r3, r1
 80007c2:	68b9      	ldr	r1, [r7, #8]
 80007c4:	f7ff ff6d 	bl	80006a2 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	3b20      	subs	r3, #32
 80007ce:	7ffa      	ldrb	r2, [r7, #31]
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	3304      	adds	r3, #4
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	4413      	add	r3, r2
 80007da:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	1c9a      	adds	r2, r3, #2
 80007e6:	7fbb      	ldrb	r3, [r7, #30]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	da07      	bge.n	80007fc <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80007ec:	7dfb      	ldrb	r3, [r7, #23]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	4413      	add	r3, r2
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	3302      	adds	r3, #2
 80007f8:	80fb      	strh	r3, [r7, #6]
 80007fa:	e004      	b.n	8000806 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 80007fc:	7fbb      	ldrb	r3, [r7, #30]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	4413      	add	r3, r2
 8000804:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3301      	adds	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
	while (*str)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1cd      	bne.n	80007b0 <ILI9341_DrawText+0x24>
	}
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a06      	ldr	r2, [pc, #24]	; (8000844 <HAL_SPI_TxCpltCallback+0x24>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d104      	bne.n	800083a <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2108      	movs	r1, #8
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <HAL_SPI_TxCpltCallback+0x28>)
 8000836:	f001 ff19 	bl	800266c <HAL_GPIO_WritePin>
  }
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000094 	.word	0x20000094
 8000848:	40020000 	.word	0x40020000

0800084c <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000856:	bf00      	nop
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <ILI9341_SPI_Tx+0x30>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	2b02      	cmp	r3, #2
 8000864:	d1f8      	bne.n	8000858 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	2201      	movs	r2, #1
 800086a:	4619      	mov	r1, r3
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <ILI9341_SPI_Tx+0x30>)
 800086e:	f002 fd77 	bl	8003360 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000094 	.word	0x20000094

08000880 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800088c:	bf00      	nop
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <ILI9341_SPI_TxBuffer+0x30>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	2b02      	cmp	r3, #2
 800089a:	d1f8      	bne.n	800088e <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 800089c:	887b      	ldrh	r3, [r7, #2]
 800089e:	461a      	mov	r2, r3
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <ILI9341_SPI_TxBuffer+0x30>)
 80008a4:	f002 fd5c 	bl	8003360 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000094 	.word	0x20000094

080008b4 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80008be:	2200      	movs	r2, #0
 80008c0:	2104      	movs	r1, #4
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <ILI9341_WriteCommand+0x30>)
 80008c4:	f001 fed2 	bl	800266c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80008c8:	2200      	movs	r2, #0
 80008ca:	2108      	movs	r1, #8
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <ILI9341_WriteCommand+0x30>)
 80008ce:	f001 fecd 	bl	800266c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ffb9 	bl	800084c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40020000 	.word	0x40020000

080008e8 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80008f2:	2201      	movs	r2, #1
 80008f4:	2104      	movs	r1, #4
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <ILI9341_WriteData+0x30>)
 80008f8:	f001 feb8 	bl	800266c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80008fc:	2200      	movs	r2, #0
 80008fe:	2108      	movs	r1, #8
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <ILI9341_WriteData+0x30>)
 8000902:	f001 feb3 	bl	800266c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff9f 	bl	800084c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020000 	.word	0x40020000

0800091c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000928:	2201      	movs	r2, #1
 800092a:	2104      	movs	r1, #4
 800092c:	4808      	ldr	r0, [pc, #32]	; (8000950 <ILI9341_WriteBuffer+0x34>)
 800092e:	f001 fe9d 	bl	800266c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000932:	2200      	movs	r2, #0
 8000934:	2108      	movs	r1, #8
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <ILI9341_WriteBuffer+0x34>)
 8000938:	f001 fe98 	bl	800266c <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 800093c:	887b      	ldrh	r3, [r7, #2]
 800093e:	4619      	mov	r1, r3
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff9d 	bl	8000880 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40020000 	.word	0x40020000

08000954 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4604      	mov	r4, r0
 800095c:	4608      	mov	r0, r1
 800095e:	4611      	mov	r1, r2
 8000960:	461a      	mov	r2, r3
 8000962:	4623      	mov	r3, r4
 8000964:	80fb      	strh	r3, [r7, #6]
 8000966:	4603      	mov	r3, r0
 8000968:	80bb      	strh	r3, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	807b      	strh	r3, [r7, #2]
 800096e:	4613      	mov	r3, r2
 8000970:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b29b      	uxth	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 800098c:	887b      	ldrh	r3, [r7, #2]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000992:	202a      	movs	r0, #42	; 0x2a
 8000994:	f7ff ff8e 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2104      	movs	r1, #4
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ffbc 	bl	800091c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80009a4:	88bb      	ldrh	r3, [r7, #4]
 80009a6:	0a1b      	lsrs	r3, r3, #8
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80009b4:	883b      	ldrh	r3, [r7, #0]
 80009b6:	0a1b      	lsrs	r3, r3, #8
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80009be:	883b      	ldrh	r3, [r7, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80009c4:	202b      	movs	r0, #43	; 0x2b
 80009c6:	f7ff ff75 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2104      	movs	r1, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffa3 	bl	800091c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80009d6:	202c      	movs	r0, #44	; 0x2c
 80009d8:	f7ff ff6c 	bl	80008b4 <ILI9341_WriteCommand>
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd90      	pop	{r4, r7, pc}

080009e4 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80009e8:	2200      	movs	r2, #0
 80009ea:	2110      	movs	r1, #16
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <ILI9341_Reset+0x3c>)
 80009ee:	f001 fe3d 	bl	800266c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80009f2:	200a      	movs	r0, #10
 80009f4:	f001 f840 	bl	8001a78 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80009f8:	2200      	movs	r2, #0
 80009fa:	2108      	movs	r1, #8
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <ILI9341_Reset+0x3c>)
 80009fe:	f001 fe35 	bl	800266c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f001 f838 	bl	8001a78 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <ILI9341_Reset+0x3c>)
 8000a0e:	f001 fe2d 	bl	800266c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000a12:	2201      	movs	r2, #1
 8000a14:	2108      	movs	r1, #8
 8000a16:	4802      	ldr	r0, [pc, #8]	; (8000a20 <ILI9341_Reset+0x3c>)
 8000a18:	f001 fe28 	bl	800266c <HAL_GPIO_WritePin>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40020000 	.word	0x40020000

08000a24 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <ILI9341_Enable+0x14>)
 8000a2e:	f001 fe1d 	bl	800266c <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40020000 	.word	0x40020000

08000a3c <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000a40:	f7ff fff0 	bl	8000a24 <ILI9341_Enable>
	ILI9341_Reset();
 8000a44:	f7ff ffce 	bl	80009e4 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ff33 	bl	80008b4 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f001 f812 	bl	8001a78 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000a54:	20cb      	movs	r0, #203	; 0xcb
 8000a56:	f7ff ff2d 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000a5a:	2039      	movs	r0, #57	; 0x39
 8000a5c:	f7ff ff44 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000a60:	202c      	movs	r0, #44	; 0x2c
 8000a62:	f7ff ff41 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff ff3e 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000a6c:	2034      	movs	r0, #52	; 0x34
 8000a6e:	f7ff ff3b 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000a72:	2002      	movs	r0, #2
 8000a74:	f7ff ff38 	bl	80008e8 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000a78:	20cf      	movs	r0, #207	; 0xcf
 8000a7a:	f7ff ff1b 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff ff32 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000a84:	20c1      	movs	r0, #193	; 0xc1
 8000a86:	f7ff ff2f 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000a8a:	2030      	movs	r0, #48	; 0x30
 8000a8c:	f7ff ff2c 	bl	80008e8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000a90:	20e8      	movs	r0, #232	; 0xe8
 8000a92:	f7ff ff0f 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000a96:	2085      	movs	r0, #133	; 0x85
 8000a98:	f7ff ff26 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff ff23 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000aa2:	2078      	movs	r0, #120	; 0x78
 8000aa4:	f7ff ff20 	bl	80008e8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000aa8:	20ea      	movs	r0, #234	; 0xea
 8000aaa:	f7ff ff03 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ff1a 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff ff17 	bl	80008e8 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000aba:	20ed      	movs	r0, #237	; 0xed
 8000abc:	f7ff fefa 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000ac0:	2064      	movs	r0, #100	; 0x64
 8000ac2:	f7ff ff11 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f7ff ff0e 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000acc:	2012      	movs	r0, #18
 8000ace:	f7ff ff0b 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000ad2:	2081      	movs	r0, #129	; 0x81
 8000ad4:	f7ff ff08 	bl	80008e8 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000ad8:	20f7      	movs	r0, #247	; 0xf7
 8000ada:	f7ff feeb 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000ade:	2020      	movs	r0, #32
 8000ae0:	f7ff ff02 	bl	80008e8 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000ae4:	20c0      	movs	r0, #192	; 0xc0
 8000ae6:	f7ff fee5 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000aea:	2023      	movs	r0, #35	; 0x23
 8000aec:	f7ff fefc 	bl	80008e8 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000af0:	20c1      	movs	r0, #193	; 0xc1
 8000af2:	f7ff fedf 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000af6:	2010      	movs	r0, #16
 8000af8:	f7ff fef6 	bl	80008e8 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000afc:	20c5      	movs	r0, #197	; 0xc5
 8000afe:	f7ff fed9 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000b02:	203e      	movs	r0, #62	; 0x3e
 8000b04:	f7ff fef0 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000b08:	2028      	movs	r0, #40	; 0x28
 8000b0a:	f7ff feed 	bl	80008e8 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000b0e:	20c7      	movs	r0, #199	; 0xc7
 8000b10:	f7ff fed0 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000b14:	2086      	movs	r0, #134	; 0x86
 8000b16:	f7ff fee7 	bl	80008e8 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000b1a:	2036      	movs	r0, #54	; 0x36
 8000b1c:	f7ff feca 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000b20:	2048      	movs	r0, #72	; 0x48
 8000b22:	f7ff fee1 	bl	80008e8 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000b26:	203a      	movs	r0, #58	; 0x3a
 8000b28:	f7ff fec4 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000b2c:	2055      	movs	r0, #85	; 0x55
 8000b2e:	f7ff fedb 	bl	80008e8 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000b32:	20b1      	movs	r0, #177	; 0xb1
 8000b34:	f7ff febe 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fed5 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000b3e:	2018      	movs	r0, #24
 8000b40:	f7ff fed2 	bl	80008e8 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000b44:	20b6      	movs	r0, #182	; 0xb6
 8000b46:	f7ff feb5 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000b4a:	2008      	movs	r0, #8
 8000b4c:	f7ff fecc 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000b50:	2082      	movs	r0, #130	; 0x82
 8000b52:	f7ff fec9 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000b56:	2027      	movs	r0, #39	; 0x27
 8000b58:	f7ff fec6 	bl	80008e8 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000b5c:	20f2      	movs	r0, #242	; 0xf2
 8000b5e:	f7ff fea9 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff fec0 	bl	80008e8 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000b68:	2026      	movs	r0, #38	; 0x26
 8000b6a:	f7ff fea3 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff feba 	bl	80008e8 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000b74:	20e0      	movs	r0, #224	; 0xe0
 8000b76:	f7ff fe9d 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f7ff feb4 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b80:	2031      	movs	r0, #49	; 0x31
 8000b82:	f7ff feb1 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000b86:	202b      	movs	r0, #43	; 0x2b
 8000b88:	f7ff feae 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000b8c:	200c      	movs	r0, #12
 8000b8e:	f7ff feab 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b92:	200e      	movs	r0, #14
 8000b94:	f7ff fea8 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000b98:	2008      	movs	r0, #8
 8000b9a:	f7ff fea5 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000b9e:	204e      	movs	r0, #78	; 0x4e
 8000ba0:	f7ff fea2 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000ba4:	20f1      	movs	r0, #241	; 0xf1
 8000ba6:	f7ff fe9f 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000baa:	2037      	movs	r0, #55	; 0x37
 8000bac:	f7ff fe9c 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000bb0:	2007      	movs	r0, #7
 8000bb2:	f7ff fe99 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000bb6:	2010      	movs	r0, #16
 8000bb8:	f7ff fe96 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f7ff fe93 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000bc2:	200e      	movs	r0, #14
 8000bc4:	f7ff fe90 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000bc8:	2009      	movs	r0, #9
 8000bca:	f7ff fe8d 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fe8a 	bl	80008e8 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000bd4:	20e1      	movs	r0, #225	; 0xe1
 8000bd6:	f7ff fe6d 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fe84 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000be0:	200e      	movs	r0, #14
 8000be2:	f7ff fe81 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000be6:	2014      	movs	r0, #20
 8000be8:	f7ff fe7e 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f7ff fe7b 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000bf2:	2011      	movs	r0, #17
 8000bf4:	f7ff fe78 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000bf8:	2007      	movs	r0, #7
 8000bfa:	f7ff fe75 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000bfe:	2031      	movs	r0, #49	; 0x31
 8000c00:	f7ff fe72 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000c04:	20c1      	movs	r0, #193	; 0xc1
 8000c06:	f7ff fe6f 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000c0a:	2048      	movs	r0, #72	; 0x48
 8000c0c:	f7ff fe6c 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000c10:	2008      	movs	r0, #8
 8000c12:	f7ff fe69 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f7ff fe66 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000c1c:	200c      	movs	r0, #12
 8000c1e:	f7ff fe63 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000c22:	2031      	movs	r0, #49	; 0x31
 8000c24:	f7ff fe60 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000c28:	2036      	movs	r0, #54	; 0x36
 8000c2a:	f7ff fe5d 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f7ff fe5a 	bl	80008e8 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000c34:	2011      	movs	r0, #17
 8000c36:	f7ff fe3d 	bl	80008b4 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f000 ff1c 	bl	8001a78 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000c40:	2029      	movs	r0, #41	; 0x29
 8000c42:	f7ff fe37 	bl	80008b4 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f802 	bl	8000c50 <ILI9341_SetRotation>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000c5a:	2036      	movs	r0, #54	; 0x36
 8000c5c:	f7ff fe2a 	bl	80008b4 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f000 ff09 	bl	8001a78 <HAL_Delay>

	switch(rotation)
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d837      	bhi.n	8000cdc <ILI9341_SetRotation+0x8c>
 8000c6c:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <ILI9341_SetRotation+0x24>)
 8000c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c72:	bf00      	nop
 8000c74:	08000c85 	.word	0x08000c85
 8000c78:	08000c9b 	.word	0x08000c9b
 8000c7c:	08000cb1 	.word	0x08000cb1
 8000c80:	08000cc7 	.word	0x08000cc7
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000c84:	2048      	movs	r0, #72	; 0x48
 8000c86:	f7ff fe2f 	bl	80008e8 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <ILI9341_SetRotation+0x98>)
 8000c8c:	22f0      	movs	r2, #240	; 0xf0
 8000c8e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <ILI9341_SetRotation+0x9c>)
 8000c92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c96:	801a      	strh	r2, [r3, #0]
		break;
 8000c98:	e021      	b.n	8000cde <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000c9a:	2028      	movs	r0, #40	; 0x28
 8000c9c:	f7ff fe24 	bl	80008e8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <ILI9341_SetRotation+0x98>)
 8000ca2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ca6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <ILI9341_SetRotation+0x9c>)
 8000caa:	22f0      	movs	r2, #240	; 0xf0
 8000cac:	801a      	strh	r2, [r3, #0]
		break;
 8000cae:	e016      	b.n	8000cde <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000cb0:	2088      	movs	r0, #136	; 0x88
 8000cb2:	f7ff fe19 	bl	80008e8 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <ILI9341_SetRotation+0x98>)
 8000cb8:	22f0      	movs	r2, #240	; 0xf0
 8000cba:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <ILI9341_SetRotation+0x9c>)
 8000cbe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000cc2:	801a      	strh	r2, [r3, #0]
		break;
 8000cc4:	e00b      	b.n	8000cde <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000cc6:	20e8      	movs	r0, #232	; 0xe8
 8000cc8:	f7ff fe0e 	bl	80008e8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <ILI9341_SetRotation+0x98>)
 8000cce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000cd2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <ILI9341_SetRotation+0x9c>)
 8000cd6:	22f0      	movs	r2, #240	; 0xf0
 8000cd8:	801a      	strh	r2, [r3, #0]
		break;
 8000cda:	e000      	b.n	8000cde <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000cdc:	bf00      	nop
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000002 	.word	0x20000002
 8000cec:	20000000 	.word	0x20000000

08000cf0 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cf4:	b08d      	sub	sp, #52	; 0x34
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	6039      	str	r1, [r7, #0]
 8000cfc:	80fb      	strh	r3, [r7, #6]
 8000cfe:	466b      	mov	r3, sp
 8000d00:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d0e:	d202      	bcs.n	8000d16 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
 8000d14:	e002      	b.n	8000d1c <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000d16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2104      	movs	r1, #4
 8000d20:	483e      	ldr	r0, [pc, #248]	; (8000e1c <ILI9341_DrawColorBurst+0x12c>)
 8000d22:	f001 fca3 	bl	800266c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2108      	movs	r1, #8
 8000d2a:	483c      	ldr	r0, [pc, #240]	; (8000e1c <ILI9341_DrawColorBurst+0x12c>)
 8000d2c:	f001 fc9e 	bl	800266c <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	0a1b      	lsrs	r3, r3, #8
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	2300      	movs	r3, #0
 8000d44:	4688      	mov	r8, r1
 8000d46:	4699      	mov	r9, r3
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	460c      	mov	r4, r1
 8000d60:	461d      	mov	r5, r3
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	00eb      	lsls	r3, r5, #3
 8000d6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d70:	00e2      	lsls	r2, r4, #3
 8000d72:	1dcb      	adds	r3, r1, #7
 8000d74:	08db      	lsrs	r3, r3, #3
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	ebad 0d03 	sub.w	sp, sp, r3
 8000d7c:	466b      	mov	r3, sp
 8000d7e:	3300      	adds	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d86:	e00e      	b.n	8000da6 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8c:	4413      	add	r3, r2
 8000d8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d92:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d96:	3301      	adds	r3, #1
 8000d98:	88fa      	ldrh	r2, [r7, #6]
 8000d9a:	b2d1      	uxtb	r1, r2
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	3302      	adds	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d3ec      	bcc.n	8000d88 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbc:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000dc8:	fb01 f202 	mul.w	r2, r1, r2
 8000dcc:	1a9b      	subs	r3, r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d010      	beq.n	8000df8 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dda:	e009      	b.n	8000df0 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	230a      	movs	r3, #10
 8000de2:	69b9      	ldr	r1, [r7, #24]
 8000de4:	480e      	ldr	r0, [pc, #56]	; (8000e20 <ILI9341_DrawColorBurst+0x130>)
 8000de6:	f002 f97e 	bl	80030e6 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dec:	3301      	adds	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d3f1      	bcc.n	8000ddc <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <ILI9341_DrawColorBurst+0x130>)
 8000e02:	f002 f970 	bl	80030e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4804      	ldr	r0, [pc, #16]	; (8000e1c <ILI9341_DrawColorBurst+0x12c>)
 8000e0c:	f001 fc2e 	bl	800266c <HAL_GPIO_WritePin>
 8000e10:	46b5      	mov	sp, r6
}
 8000e12:	bf00      	nop
 8000e14:	3734      	adds	r7, #52	; 0x34
 8000e16:	46bd      	mov	sp, r7
 8000e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	20000094 	.word	0x20000094

08000e24 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <ILI9341_FillScreen+0x44>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <ILI9341_FillScreen+0x48>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fd89 	bl	8000954 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <ILI9341_FillScreen+0x44>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <ILI9341_FillScreen+0x48>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff48 	bl	8000cf0 <ILI9341_DrawColorBurst>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000002 	.word	0x20000002
 8000e6c:	20000000 	.word	0x20000000

08000e70 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	80bb      	strh	r3, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <ILI9341_DrawPixel+0xc4>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	88fa      	ldrh	r2, [r7, #6]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d24d      	bcs.n	8000f2a <ILI9341_DrawPixel+0xba>
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <ILI9341_DrawPixel+0xc8>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	88ba      	ldrh	r2, [r7, #4]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d247      	bcs.n	8000f2a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	753b      	strb	r3, [r7, #20]
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	757b      	strb	r3, [r7, #21]
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	3301      	adds	r3, #1
 8000eae:	121b      	asrs	r3, r3, #8
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	75bb      	strb	r3, [r7, #22]
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	743b      	strb	r3, [r7, #16]
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	747b      	strb	r3, [r7, #17]
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	121b      	asrs	r3, r3, #8
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	74bb      	strb	r3, [r7, #18]
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	733b      	strb	r3, [r7, #12]
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000ef2:	202a      	movs	r0, #42	; 0x2a
 8000ef4:	f7ff fcde 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2104      	movs	r1, #4
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fd0c 	bl	800091c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000f04:	202b      	movs	r0, #43	; 0x2b
 8000f06:	f7ff fcd5 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	2104      	movs	r1, #4
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fd03 	bl	800091c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000f16:	202c      	movs	r0, #44	; 0x2c
 8000f18:	f7ff fccc 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2102      	movs	r1, #2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fcfa 	bl	800091c <ILI9341_WriteBuffer>
 8000f28:	e000      	b.n	8000f2c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f2a:	bf00      	nop
}
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000002 	.word	0x20000002
 8000f38:	20000000 	.word	0x20000000

08000f3c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4604      	mov	r4, r0
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80bb      	strh	r3, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	807b      	strh	r3, [r7, #2]
 8000f56:	4613      	mov	r3, r2
 8000f58:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <ILI9341_DrawRectangle+0xb0>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	88fa      	ldrh	r2, [r7, #6]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d23d      	bcs.n	8000fe2 <ILI9341_DrawRectangle+0xa6>
 8000f66:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <ILI9341_DrawRectangle+0xb4>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	88ba      	ldrh	r2, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d237      	bcs.n	8000fe2 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <ILI9341_DrawRectangle+0xb0>)
 8000f7a:	8812      	ldrh	r2, [r2, #0]
 8000f7c:	b292      	uxth	r2, r2
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	dd05      	ble.n	8000f8e <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <ILI9341_DrawRectangle+0xb0>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000f8e:	88ba      	ldrh	r2, [r7, #4]
 8000f90:	883b      	ldrh	r3, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <ILI9341_DrawRectangle+0xb4>)
 8000f96:	8812      	ldrh	r2, [r2, #0]
 8000f98:	b292      	uxth	r2, r2
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	dd05      	ble.n	8000faa <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <ILI9341_DrawRectangle+0xb4>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000faa:	88fa      	ldrh	r2, [r7, #6]
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	b29c      	uxth	r4, r3
 8000fb6:	88ba      	ldrh	r2, [r7, #4]
 8000fb8:	883b      	ldrh	r3, [r7, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	88b9      	ldrh	r1, [r7, #4]
 8000fc4:	88f8      	ldrh	r0, [r7, #6]
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	f7ff fcc4 	bl	8000954 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000fcc:	883b      	ldrh	r3, [r7, #0]
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	8b3b      	ldrh	r3, [r7, #24]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe88 	bl	8000cf0 <ILI9341_DrawColorBurst>
 8000fe0:	e000      	b.n	8000fe4 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000fe2:	bf00      	nop
}
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000002 	.word	0x20000002
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4623      	mov	r3, r4
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	4603      	mov	r3, r0
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]
 800100e:	4613      	mov	r3, r2
 8001010:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <ILI9341_DrawHLine+0x80>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	429a      	cmp	r2, r3
 800101c:	d225      	bcs.n	800106a <ILI9341_DrawHLine+0x76>
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <ILI9341_DrawHLine+0x84>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	88ba      	ldrh	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d21f      	bcs.n	800106a <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800102a:	88fa      	ldrh	r2, [r7, #6]
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	4413      	add	r3, r2
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <ILI9341_DrawHLine+0x80>)
 8001032:	8812      	ldrh	r2, [r2, #0]
 8001034:	b292      	uxth	r2, r2
 8001036:	4293      	cmp	r3, r2
 8001038:	dd05      	ble.n	8001046 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <ILI9341_DrawHLine+0x80>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	3b01      	subs	r3, #1
 8001050:	b29a      	uxth	r2, r3
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	88b9      	ldrh	r1, [r7, #4]
 8001056:	88f8      	ldrh	r0, [r7, #6]
 8001058:	f7ff fc7c 	bl	8000954 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 800105c:	887a      	ldrh	r2, [r7, #2]
 800105e:	883b      	ldrh	r3, [r7, #0]
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fe44 	bl	8000cf0 <ILI9341_DrawColorBurst>
 8001068:	e000      	b.n	800106c <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800106a:	bf00      	nop
}
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}
 8001072:	bf00      	nop
 8001074:	20000002 	.word	0x20000002
 8001078:	20000000 	.word	0x20000000

0800107c <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4623      	mov	r3, r4
 800108c:	80fb      	strh	r3, [r7, #6]
 800108e:	4603      	mov	r3, r0
 8001090:	80bb      	strh	r3, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <ILI9341_DrawVLine+0x80>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	88fa      	ldrh	r2, [r7, #6]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d225      	bcs.n	80010f2 <ILI9341_DrawVLine+0x76>
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <ILI9341_DrawVLine+0x84>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	88ba      	ldrh	r2, [r7, #4]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d21f      	bcs.n	80010f2 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 80010b2:	88ba      	ldrh	r2, [r7, #4]
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <ILI9341_DrawVLine+0x84>)
 80010ba:	8812      	ldrh	r2, [r2, #0]
 80010bc:	b292      	uxth	r2, r2
 80010be:	4293      	cmp	r3, r2
 80010c0:	dd05      	ble.n	80010ce <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <ILI9341_DrawVLine+0x84>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 80010ce:	88ba      	ldrh	r2, [r7, #4]
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	4413      	add	r3, r2
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b29b      	uxth	r3, r3
 80010da:	88fa      	ldrh	r2, [r7, #6]
 80010dc:	88b9      	ldrh	r1, [r7, #4]
 80010de:	88f8      	ldrh	r0, [r7, #6]
 80010e0:	f7ff fc38 	bl	8000954 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	883b      	ldrh	r3, [r7, #0]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fe00 	bl	8000cf0 <ILI9341_DrawColorBurst>
 80010f0:	e000      	b.n	80010f4 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80010f2:	bf00      	nop
}
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000002 	.word	0x20000002
 8001100:	20000000 	.word	0x20000000

08001104 <testa>:
#include <stdbool.h>
#include "main.h"
#include "ILI9341_GFX.h"
#include "ILI9341_STM32_Driver.h"

void testa(uint32_t letra, uint32_t fundo){
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	ILI9341_DrawFilledRectangleCoord(20, 20, 300, 170, fundo);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	23aa      	movs	r3, #170	; 0xaa
 8001116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800111a:	2114      	movs	r1, #20
 800111c:	2014      	movs	r0, #20
 800111e:	f7ff fa62 	bl	80005e6 <ILI9341_DrawFilledRectangleCoord>
	ILI9341_DrawText("XORNOTESTE", FONT4, 100, 89, letra, fundo);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	b29b      	uxth	r3, r3
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	b292      	uxth	r2, r2
 800112a:	9201      	str	r2, [sp, #4]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2359      	movs	r3, #89	; 0x59
 8001130:	2264      	movs	r2, #100	; 0x64
 8001132:	4906      	ldr	r1, [pc, #24]	; (800114c <testa+0x48>)
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <testa+0x4c>)
 8001136:	f7ff fb29 	bl	800078c <ILI9341_DrawText>
	HAL_Delay(1000);
 800113a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800113e:	f000 fc9b 	bl	8001a78 <HAL_Delay>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	080070cc 	.word	0x080070cc
 8001150:	08006a20 	.word	0x08006a20

08001154 <userCode>:


void userCode(void){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af02      	add	r7, sp, #8

	ILI9341_Init();
 800115a:	f7ff fc6f 	bl	8000a3c <ILI9341_Init>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800115e:	2003      	movs	r0, #3
 8001160:	f7ff fd76 	bl	8000c50 <ILI9341_SetRotation>
	ILI9341_FillScreen(BLACK);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fe5d 	bl	8000e24 <ILI9341_FillScreen>
	bool escreveu = false;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]

	while(1){
		if(!escreveu){
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f083 0301 	eor.w	r3, r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d05a      	beq.n	8001230 <userCode+0xdc>
			ILI9341_DrawFilledRectangleCoord(22, 192, 99, 219, LIGHTGREY);
 800117a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	23db      	movs	r3, #219	; 0xdb
 8001182:	2263      	movs	r2, #99	; 0x63
 8001184:	21c0      	movs	r1, #192	; 0xc0
 8001186:	2016      	movs	r0, #22
 8001188:	f7ff fa2d 	bl	80005e6 <ILI9341_DrawFilledRectangleCoord>
			ILI9341_DrawHollowRectangleCoord(20, 190, 100, 220, DARKGREY);
 800118c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	23dc      	movs	r3, #220	; 0xdc
 8001194:	2264      	movs	r2, #100	; 0x64
 8001196:	21be      	movs	r1, #190	; 0xbe
 8001198:	2014      	movs	r0, #20
 800119a:	f7ff f9a3 	bl	80004e4 <ILI9341_DrawHollowRectangleCoord>
			ILI9341_DrawText("Tela 1", FONT1, 43, 201, BLACK, LIGHTGREY);
 800119e:	f24c 6318 	movw	r3, #50712	; 0xc618
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	2300      	movs	r3, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	23c9      	movs	r3, #201	; 0xc9
 80011aa:	222b      	movs	r2, #43	; 0x2b
 80011ac:	4951      	ldr	r1, [pc, #324]	; (80012f4 <userCode+0x1a0>)
 80011ae:	4852      	ldr	r0, [pc, #328]	; (80012f8 <userCode+0x1a4>)
 80011b0:	f7ff faec 	bl	800078c <ILI9341_DrawText>

			ILI9341_DrawFilledRectangleCoord(122, 192, 199, 219, LIGHTGREY);
 80011b4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	23db      	movs	r3, #219	; 0xdb
 80011bc:	22c7      	movs	r2, #199	; 0xc7
 80011be:	21c0      	movs	r1, #192	; 0xc0
 80011c0:	207a      	movs	r0, #122	; 0x7a
 80011c2:	f7ff fa10 	bl	80005e6 <ILI9341_DrawFilledRectangleCoord>
			ILI9341_DrawHollowRectangleCoord(120, 190, 200, 220, DARKGREY);
 80011c6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	23dc      	movs	r3, #220	; 0xdc
 80011ce:	22c8      	movs	r2, #200	; 0xc8
 80011d0:	21be      	movs	r1, #190	; 0xbe
 80011d2:	2078      	movs	r0, #120	; 0x78
 80011d4:	f7ff f986 	bl	80004e4 <ILI9341_DrawHollowRectangleCoord>
			ILI9341_DrawText("Tela 2", FONT1, 143, 201, BLACK, LIGHTGREY);
 80011d8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	2300      	movs	r3, #0
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	23c9      	movs	r3, #201	; 0xc9
 80011e4:	228f      	movs	r2, #143	; 0x8f
 80011e6:	4943      	ldr	r1, [pc, #268]	; (80012f4 <userCode+0x1a0>)
 80011e8:	4844      	ldr	r0, [pc, #272]	; (80012fc <userCode+0x1a8>)
 80011ea:	f7ff facf 	bl	800078c <ILI9341_DrawText>

			ILI9341_DrawFilledRectangleCoord(222, 192, 299, 219, LIGHTGREY);
 80011ee:	f24c 6318 	movw	r3, #50712	; 0xc618
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	23db      	movs	r3, #219	; 0xdb
 80011f6:	f240 122b 	movw	r2, #299	; 0x12b
 80011fa:	21c0      	movs	r1, #192	; 0xc0
 80011fc:	20de      	movs	r0, #222	; 0xde
 80011fe:	f7ff f9f2 	bl	80005e6 <ILI9341_DrawFilledRectangleCoord>
			ILI9341_DrawHollowRectangleCoord(220, 190, 300, 220, DARKGREY);
 8001202:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	23dc      	movs	r3, #220	; 0xdc
 800120a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800120e:	21be      	movs	r1, #190	; 0xbe
 8001210:	20dc      	movs	r0, #220	; 0xdc
 8001212:	f7ff f967 	bl	80004e4 <ILI9341_DrawHollowRectangleCoord>
			ILI9341_DrawText("Tela 3", FONT1, 243, 201, BLACK, LIGHTGREY);
 8001216:	f24c 6318 	movw	r3, #50712	; 0xc618
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	2300      	movs	r3, #0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	23c9      	movs	r3, #201	; 0xc9
 8001222:	22f3      	movs	r2, #243	; 0xf3
 8001224:	4933      	ldr	r1, [pc, #204]	; (80012f4 <userCode+0x1a0>)
 8001226:	4836      	ldr	r0, [pc, #216]	; (8001300 <userCode+0x1ac>)
 8001228:	f7ff fab0 	bl	800078c <ILI9341_DrawText>

			escreveu = true;
 800122c:	2301      	movs	r3, #1
 800122e:	71fb      	strb	r3, [r7, #7]
		}

		testa(BLACK, WHITE);
 8001230:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ff65 	bl	8001104 <testa>
		testa(BLACK, LIGHTGREY);
 800123a:	f24c 6118 	movw	r1, #50712	; 0xc618
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff ff60 	bl	8001104 <testa>
		testa(WHITE, DARKGREY);
 8001244:	f647 31ef 	movw	r1, #31727	; 0x7bef
 8001248:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800124c:	f7ff ff5a 	bl	8001104 <testa>
		testa(WHITE, NAVY);
 8001250:	210f      	movs	r1, #15
 8001252:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001256:	f7ff ff55 	bl	8001104 <testa>
		testa(WHITE, DARKGREEN);
 800125a:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800125e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001262:	f7ff ff4f 	bl	8001104 <testa>
		testa(WHITE, DARKCYAN);
 8001266:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800126a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800126e:	f7ff ff49 	bl	8001104 <testa>
		testa(WHITE, MAROON);
 8001272:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8001276:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800127a:	f7ff ff43 	bl	8001104 <testa>
		testa(WHITE, PURPLE);
 800127e:	f647 010f 	movw	r1, #30735	; 0x780f
 8001282:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001286:	f7ff ff3d 	bl	8001104 <testa>
		testa(WHITE, OLIVE);
 800128a:	f647 31e0 	movw	r1, #31712	; 0x7be0
 800128e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001292:	f7ff ff37 	bl	8001104 <testa>

		testa(WHITE, BLUE);
 8001296:	211f      	movs	r1, #31
 8001298:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800129c:	f7ff ff32 	bl	8001104 <testa>
		testa(BLACK, GREEN);
 80012a0:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff ff2d 	bl	8001104 <testa>
		testa(BLACK, CYAN);
 80012aa:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ff28 	bl	8001104 <testa>
		testa(WHITE, RED);
 80012b4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80012b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012bc:	f7ff ff22 	bl	8001104 <testa>
		testa(BLACK, MAGENTA);
 80012c0:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff ff1d 	bl	8001104 <testa>
		testa(BLACK, YELLOW);
 80012ca:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ff18 	bl	8001104 <testa>
		testa(BLACK, ORANGE);
 80012d4:	f64f 5120 	movw	r1, #64800	; 0xfd20
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff ff13 	bl	8001104 <testa>
		testa(BLACK, GREENYELLOW);
 80012de:	f64a 71e5 	movw	r1, #45029	; 0xafe5
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff ff0e 	bl	8001104 <testa>
		testa(BLACK, PINK);
 80012e8:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff ff09 	bl	8001104 <testa>
		if(!escreveu){
 80012f2:	e73c      	b.n	800116e <userCode+0x1a>
 80012f4:	08006a68 	.word	0x08006a68
 80012f8:	08006a2c 	.word	0x08006a2c
 80012fc:	08006a34 	.word	0x08006a34
 8001300:	08006a3c 	.word	0x08006a3c

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001308:	f000 fb74 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130c:	f000 f81e 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001310:	f000 f910 	bl	8001534 <MX_GPIO_Init>
  MX_DMA_Init();
 8001314:	f000 f8ee 	bl	80014f4 <MX_DMA_Init>
  MX_SPI1_Init();
 8001318:	f000 f880 	bl	800141c <MX_SPI1_Init>
  MX_SPI2_Init();
 800131c:	f000 f8b4 	bl	8001488 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  userCode();
 8001320:	f7ff ff18 	bl	8001154 <userCode>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001324:	f002 fcf6 	bl	8003d14 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001328:	4a05      	ldr	r2, [pc, #20]	; (8001340 <main+0x3c>)
 800132a:	2100      	movs	r1, #0
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <main+0x40>)
 800132e:	f002 fd3b 	bl	8003da8 <osThreadNew>
 8001332:	4603      	mov	r3, r0
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <main+0x44>)
 8001336:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001338:	f002 fd10 	bl	8003d5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800133c:	e7fe      	b.n	800133c <main+0x38>
 800133e:	bf00      	nop
 8001340:	08008210 	.word	0x08008210
 8001344:	0800166d 	.word	0x0800166d
 8001348:	200001a4 	.word	0x200001a4

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b094      	sub	sp, #80	; 0x50
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	2230      	movs	r2, #48	; 0x30
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f005 fa8a 	bl	8006874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <SystemClock_Config+0xc8>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <SystemClock_Config+0xc8>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <SystemClock_Config+0xc8>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <SystemClock_Config+0xcc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <SystemClock_Config+0xcc>)
 8001396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <SystemClock_Config+0xcc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b2:	2302      	movs	r3, #2
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013bc:	2319      	movs	r3, #25
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80013c0:	23c8      	movs	r3, #200	; 0xc8
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 f989 	bl	80026e8 <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013dc:	f000 f960 	bl	80016a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e0:	230f      	movs	r3, #15
 80013e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e4:	2302      	movs	r3, #2
 80013e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2103      	movs	r1, #3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 fbeb 	bl	8002bd8 <HAL_RCC_ClockConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001408:	f000 f94a 	bl	80016a0 <Error_Handler>
  }
}
 800140c:	bf00      	nop
 800140e:	3750      	adds	r7, #80	; 0x50
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	40007000 	.word	0x40007000

0800141c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_SPI1_Init+0x64>)
 8001422:	4a18      	ldr	r2, [pc, #96]	; (8001484 <MX_SPI1_Init+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_SPI1_Init+0x64>)
 8001428:	f44f 7282 	mov.w	r2, #260	; 0x104
 800142c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_SPI1_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_SPI1_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_SPI1_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_SPI1_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_SPI1_Init+0x64>)
 8001448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_SPI1_Init+0x64>)
 8001468:	220a      	movs	r2, #10
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_SPI1_Init+0x64>)
 800146e:	f001 fdb1 	bl	8002fd4 <HAL_SPI_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001478:	f000 f912 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000094 	.word	0x20000094
 8001484:	40013000 	.word	0x40013000

08001488 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_SPI2_Init+0x64>)
 800148e:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <MX_SPI2_Init+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_SPI2_Init+0x64>)
 8001494:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001498:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_SPI2_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_SPI2_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_SPI2_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_SPI2_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_SPI2_Init+0x64>)
 80014b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_SPI2_Init+0x64>)
 80014bc:	2220      	movs	r2, #32
 80014be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MX_SPI2_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_SPI2_Init+0x64>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_SPI2_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_SPI2_Init+0x64>)
 80014d4:	220a      	movs	r2, #10
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_SPI2_Init+0x64>)
 80014da:	f001 fd7b 	bl	8002fd4 <HAL_SPI_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014e4:	f000 f8dc 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200000ec 	.word	0x200000ec
 80014f0:	40003800 	.word	0x40003800

080014f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_DMA_Init+0x3c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <MX_DMA_Init+0x3c>)
 8001504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_DMA_Init+0x3c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	203a      	movs	r0, #58	; 0x3a
 800151c:	f000 fb88 	bl	8001c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001520:	203a      	movs	r0, #58	; 0x3a
 8001522:	f000 fba1 	bl	8001c68 <HAL_NVIC_EnableIRQ>

}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <MX_GPIO_Init+0x12c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a43      	ldr	r2, [pc, #268]	; (8001660 <MX_GPIO_Init+0x12c>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <MX_GPIO_Init+0x12c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b3d      	ldr	r3, [pc, #244]	; (8001660 <MX_GPIO_Init+0x12c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a3c      	ldr	r2, [pc, #240]	; (8001660 <MX_GPIO_Init+0x12c>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <MX_GPIO_Init+0x12c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b36      	ldr	r3, [pc, #216]	; (8001660 <MX_GPIO_Init+0x12c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a35      	ldr	r2, [pc, #212]	; (8001660 <MX_GPIO_Init+0x12c>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <MX_GPIO_Init+0x12c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <MX_GPIO_Init+0x12c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a2e      	ldr	r2, [pc, #184]	; (8001660 <MX_GPIO_Init+0x12c>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <MX_GPIO_Init+0x12c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c0:	4828      	ldr	r0, [pc, #160]	; (8001664 <MX_GPIO_Init+0x130>)
 80015c2:	f001 f853 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_DC_Pin|TFT_CS_Pin|TFT_RST_Pin|TOUCH_CS_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80015cc:	4826      	ldr	r0, [pc, #152]	; (8001668 <MX_GPIO_Init+0x134>)
 80015ce:	f001 f84d 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	481e      	ldr	r0, [pc, #120]	; (8001664 <MX_GPIO_Init+0x130>)
 80015ec:	f000 feba 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_DC_Pin TFT_CS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin|TFT_RST_Pin;
 80015f0:	231c      	movs	r3, #28
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <MX_GPIO_Init+0x134>)
 8001608:	f000 feac 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 800160c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001616:	2301      	movs	r3, #1
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4810      	ldr	r0, [pc, #64]	; (8001668 <MX_GPIO_Init+0x134>)
 8001626:	f000 fe9d 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800162a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001630:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4809      	ldr	r0, [pc, #36]	; (8001668 <MX_GPIO_Init+0x134>)
 8001642:	f000 fe8f 	bl	8002364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2105      	movs	r1, #5
 800164a:	2017      	movs	r0, #23
 800164c:	f000 faf0 	bl	8001c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001650:	2017      	movs	r0, #23
 8001652:	f000 fb09 	bl	8001c68 <HAL_NVIC_EnableIRQ>

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40020800 	.word	0x40020800
 8001668:	40020000 	.word	0x40020000

0800166c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f002 fc29 	bl	8003ecc <osDelay>
 800167a:	e7fb      	b.n	8001674 <StartDefaultTask+0x8>

0800167c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800168e:	f000 f9d3 	bl	8001a38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40010000 	.word	0x40010000

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>
	...

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_MspInit+0x54>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_MspInit+0x54>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x54>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_MspInit+0x54>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_MspInit+0x54>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_MspInit+0x54>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	210f      	movs	r1, #15
 80016ee:	f06f 0001 	mvn.w	r0, #1
 80016f2:	f000 fa9d 	bl	8001c30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a4a      	ldr	r2, [pc, #296]	; (800184c <HAL_SPI_MspInit+0x148>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d15b      	bne.n	80017de <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a48      	ldr	r2, [pc, #288]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 8001730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a41      	ldr	r2, [pc, #260]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_CLK_Pin|TFT_MISO_Pin|TFT_MOSI_Pin;
 800175e:	23e0      	movs	r3, #224	; 0xe0
 8001760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176e:	2305      	movs	r3, #5
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4619      	mov	r1, r3
 8001778:	4836      	ldr	r0, [pc, #216]	; (8001854 <HAL_SPI_MspInit+0x150>)
 800177a:	f000 fdf3 	bl	8002364 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <HAL_SPI_MspInit+0x154>)
 8001780:	4a36      	ldr	r2, [pc, #216]	; (800185c <HAL_SPI_MspInit+0x158>)
 8001782:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001784:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_SPI_MspInit+0x154>)
 8001786:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800178a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800178c:	4b32      	ldr	r3, [pc, #200]	; (8001858 <HAL_SPI_MspInit+0x154>)
 800178e:	2240      	movs	r2, #64	; 0x40
 8001790:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <HAL_SPI_MspInit+0x154>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001798:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <HAL_SPI_MspInit+0x154>)
 800179a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <HAL_SPI_MspInit+0x154>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a6:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <HAL_SPI_MspInit+0x154>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_SPI_MspInit+0x154>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <HAL_SPI_MspInit+0x154>)
 80017b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017b8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_SPI_MspInit+0x154>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017c0:	4825      	ldr	r0, [pc, #148]	; (8001858 <HAL_SPI_MspInit+0x154>)
 80017c2:	f000 fa5f 	bl	8001c84 <HAL_DMA_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80017cc:	f7ff ff68 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a21      	ldr	r2, [pc, #132]	; (8001858 <HAL_SPI_MspInit+0x154>)
 80017d4:	649a      	str	r2, [r3, #72]	; 0x48
 80017d6:	4a20      	ldr	r2, [pc, #128]	; (8001858 <HAL_SPI_MspInit+0x154>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017dc:	e031      	b.n	8001842 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <HAL_SPI_MspInit+0x15c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d12c      	bne.n	8001842 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f6:	6413      	str	r3, [r2, #64]	; 0x40
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	4a10      	ldr	r2, [pc, #64]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	6313      	str	r3, [r2, #48]	; 0x30
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_SPI_MspInit+0x14c>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_MISO_Pin|TOUCH_MOSI_Pin;
 8001820:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001832:	2305      	movs	r3, #5
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <HAL_SPI_MspInit+0x160>)
 800183e:	f000 fd91 	bl	8002364 <HAL_GPIO_Init>
}
 8001842:	bf00      	nop
 8001844:	3730      	adds	r7, #48	; 0x30
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40013000 	.word	0x40013000
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	20000144 	.word	0x20000144
 800185c:	40026440 	.word	0x40026440
 8001860:	40003800 	.word	0x40003800
 8001864:	40020400 	.word	0x40020400

08001868 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	2019      	movs	r0, #25
 800187e:	f000 f9d7 	bl	8001c30 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001882:	2019      	movs	r0, #25
 8001884:	f000 f9f0 	bl	8001c68 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_InitTick+0xa0>)
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_InitTick+0xa0>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6453      	str	r3, [r2, #68]	; 0x44
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_InitTick+0xa0>)
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018a4:	f107 0210 	add.w	r2, r7, #16
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fb5e 	bl	8002f70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018b4:	f001 fb48 	bl	8002f48 <HAL_RCC_GetPCLK2Freq>
 80018b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018bc:	4a13      	ldr	r2, [pc, #76]	; (800190c <HAL_InitTick+0xa4>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0c9b      	lsrs	r3, r3, #18
 80018c4:	3b01      	subs	r3, #1
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_InitTick+0xa8>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_InitTick+0xac>)
 80018cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_InitTick+0xa8>)
 80018d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018d6:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <HAL_InitTick+0xa8>)
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_InitTick+0xa8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_InitTick+0xa8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018e8:	4809      	ldr	r0, [pc, #36]	; (8001910 <HAL_InitTick+0xa8>)
 80018ea:	f001 ff4f 	bl	800378c <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d104      	bne.n	80018fe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <HAL_InitTick+0xa8>)
 80018f6:	f001 ffa3 	bl	8003840 <HAL_TIM_Base_Start_IT>
 80018fa:	4603      	mov	r3, r0
 80018fc:	e000      	b.n	8001900 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	431bde83 	.word	0x431bde83
 8001910:	200001a8 	.word	0x200001a8
 8001914:	40010000 	.word	0x40010000

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8001948:	f44f 7000 	mov.w	r0, #512	; 0x200
 800194c:	f000 fea8 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800195a:	f001 ffd3 	bl	8003904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200001a8 	.word	0x200001a8

08001968 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <DMA2_Stream2_IRQHandler+0x10>)
 800196e:	f000 fa8f 	bl	8001e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000144 	.word	0x20000144

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019a6:	490e      	ldr	r1, [pc, #56]	; (80019e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a8:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019bc:	4c0b      	ldr	r4, [pc, #44]	; (80019ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ca:	f7ff ffd7 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f004 ff1d 	bl	800680c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7ff fc97 	bl	8001304 <main>
  bx  lr    
 80019d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019e4:	080082c4 	.word	0x080082c4
  ldr r2, =_sbss
 80019e8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019ec:	20004c0c 	.word	0x20004c0c

080019f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_Init+0x40>)
 80019fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_Init+0x40>)
 8001a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_Init+0x40>)
 8001a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f8fc 	bl	8001c1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f7ff ff20 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff fe40 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	2000000c 	.word	0x2000000c
 8001a5c:	200001f0 	.word	0x200001f0

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200001f0 	.word	0x200001f0

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffde 	bl	8001a60 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000000c 	.word	0x2000000c

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	; (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ff4c 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c42:	f7ff ff61 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	6978      	ldr	r0, [r7, #20]
 8001c4e:	f7ff ffb1 	bl	8001bb4 <NVIC_EncodePriority>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff80 	bl	8001b60 <__NVIC_SetPriority>
}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff54 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff fee6 	bl	8001a60 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e099      	b.n	8001dd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc0:	e00f      	b.n	8001ce2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc2:	f7ff fecd 	bl	8001a60 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d908      	bls.n	8001ce2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e078      	b.n	8001dd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e8      	bne.n	8001cc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <HAL_DMA_Init+0x158>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d107      	bne.n	8001d4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	4313      	orrs	r3, r2
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f023 0307 	bic.w	r3, r3, #7
 8001d62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d117      	bne.n	8001da6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fa6f 	bl	800226c <DMA_CheckFifoParam>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2240      	movs	r2, #64	; 0x40
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001da2:	2301      	movs	r3, #1
 8001da4:	e016      	b.n	8001dd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fa26 	bl	8002200 <DMA_CalcBaseAndBitshift>
 8001db4:	4603      	mov	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	223f      	movs	r2, #63	; 0x3f
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	f010803f 	.word	0xf010803f

08001de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_DMA_Start_IT+0x26>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e040      	b.n	8001e88 <HAL_DMA_Start_IT+0xa8>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d12f      	bne.n	8001e7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f9b8 	bl	80021a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	223f      	movs	r2, #63	; 0x3f
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0216 	orr.w	r2, r2, #22
 8001e4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0208 	orr.w	r2, r2, #8
 8001e66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e005      	b.n	8001e86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
 8001e84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e9c:	4b8e      	ldr	r3, [pc, #568]	; (80020d8 <HAL_DMA_IRQHandler+0x248>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a8e      	ldr	r2, [pc, #568]	; (80020dc <HAL_DMA_IRQHandler+0x24c>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0a9b      	lsrs	r3, r3, #10
 8001ea8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	2208      	movs	r2, #8
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d01a      	beq.n	8001efc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	2208      	movs	r2, #8
 8001eea:	409a      	lsls	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	2201      	movs	r2, #1
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d012      	beq.n	8001f32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	2201      	movs	r2, #1
 8001f20:	409a      	lsls	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	f043 0202 	orr.w	r2, r3, #2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f36:	2204      	movs	r2, #4
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d012      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00b      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	2204      	movs	r2, #4
 8001f56:	409a      	lsls	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d043      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d03c      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d018      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d108      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d024      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	4798      	blx	r3
 8001fbe:	e01f      	b.n	8002000 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
 8001fd0:	e016      	b.n	8002000 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0208 	bic.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2220      	movs	r2, #32
 8002006:	409a      	lsls	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 808f 	beq.w	8002130 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8087 	beq.w	8002130 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	2220      	movs	r2, #32
 8002028:	409a      	lsls	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b05      	cmp	r3, #5
 8002038:	d136      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0216 	bic.w	r2, r2, #22
 8002048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002058:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <HAL_DMA_IRQHandler+0x1da>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0208 	bic.w	r2, r2, #8
 8002078:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	223f      	movs	r2, #63	; 0x3f
 8002080:	409a      	lsls	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209a:	2b00      	cmp	r3, #0
 800209c:	d07e      	beq.n	800219c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
        }
        return;
 80020a6:	e079      	b.n	800219c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01d      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d031      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
 80020d4:	e02c      	b.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
 80020d6:	bf00      	nop
 80020d8:	20000004 	.word	0x20000004
 80020dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d023      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	e01e      	b.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10f      	bne.n	8002120 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0210 	bic.w	r2, r2, #16
 800210e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	2b00      	cmp	r3, #0
 8002136:	d032      	beq.n	800219e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d022      	beq.n	800218a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2205      	movs	r2, #5
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3301      	adds	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	d307      	bcc.n	8002178 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f2      	bne.n	800215c <HAL_DMA_IRQHandler+0x2cc>
 8002176:	e000      	b.n	800217a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002178:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
 800219a:	e000      	b.n	800219e <HAL_DMA_IRQHandler+0x30e>
        return;
 800219c:	bf00      	nop
    }
  }
}
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d108      	bne.n	80021e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021e2:	e007      	b.n	80021f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	60da      	str	r2, [r3, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	3b10      	subs	r3, #16
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <DMA_CalcBaseAndBitshift+0x64>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800221a:	4a13      	ldr	r2, [pc, #76]	; (8002268 <DMA_CalcBaseAndBitshift+0x68>)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d909      	bls.n	8002242 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	1d1a      	adds	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	659a      	str	r2, [r3, #88]	; 0x58
 8002240:	e007      	b.n	8002252 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	aaaaaaab 	.word	0xaaaaaaab
 8002268:	0800824c 	.word	0x0800824c

0800226c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11f      	bne.n	80022c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d856      	bhi.n	800233a <DMA_CheckFifoParam+0xce>
 800228c:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <DMA_CheckFifoParam+0x28>)
 800228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002292:	bf00      	nop
 8002294:	080022a5 	.word	0x080022a5
 8002298:	080022b7 	.word	0x080022b7
 800229c:	080022a5 	.word	0x080022a5
 80022a0:	0800233b 	.word	0x0800233b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d046      	beq.n	800233e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e043      	b.n	800233e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022be:	d140      	bne.n	8002342 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c4:	e03d      	b.n	8002342 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ce:	d121      	bne.n	8002314 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d837      	bhi.n	8002346 <DMA_CheckFifoParam+0xda>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <DMA_CheckFifoParam+0x70>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022f3 	.word	0x080022f3
 80022e4:	080022ed 	.word	0x080022ed
 80022e8:	08002305 	.word	0x08002305
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e030      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d025      	beq.n	800234a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002302:	e022      	b.n	800234a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800230c:	d11f      	bne.n	800234e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002312:	e01c      	b.n	800234e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d903      	bls.n	8002322 <DMA_CheckFifoParam+0xb6>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d003      	beq.n	8002328 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002320:	e018      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      break;
 8002326:	e015      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00e      	beq.n	8002352 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e00b      	b.n	8002352 <DMA_CheckFifoParam+0xe6>
      break;
 800233a:	bf00      	nop
 800233c:	e00a      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 800233e:	bf00      	nop
 8002340:	e008      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002342:	bf00      	nop
 8002344:	e006      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
 8002348:	e004      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e002      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;   
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002352:	bf00      	nop
    }
  } 
  
  return status; 
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e159      	b.n	8002634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8148 	bne.w	800262e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d005      	beq.n	80023b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d017      	beq.n	8002454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a2 	beq.w	800262e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b57      	ldr	r3, [pc, #348]	; (800264c <HAL_GPIO_Init+0x2e8>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a56      	ldr	r2, [pc, #344]	; (800264c <HAL_GPIO_Init+0x2e8>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b54      	ldr	r3, [pc, #336]	; (800264c <HAL_GPIO_Init+0x2e8>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_GPIO_Init+0x2ec>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a49      	ldr	r2, [pc, #292]	; (8002654 <HAL_GPIO_Init+0x2f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x202>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a48      	ldr	r2, [pc, #288]	; (8002658 <HAL_GPIO_Init+0x2f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x1fe>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_GPIO_Init+0x2f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x1fa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a46      	ldr	r2, [pc, #280]	; (8002660 <HAL_GPIO_Init+0x2fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x1f6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a45      	ldr	r2, [pc, #276]	; (8002664 <HAL_GPIO_Init+0x300>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x1f2>
 8002552:	2304      	movs	r3, #4
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002556:	2307      	movs	r3, #7
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	; (8002650 <HAL_GPIO_Init+0x2ec>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a2f      	ldr	r2, [pc, #188]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a24      	ldr	r2, [pc, #144]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025da:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fe:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002604:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002628:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f aea2 	bls.w	8002380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002688:	e003      	b.n	8002692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f806 	bl	80026d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40013c00 	.word	0x40013c00

080026d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e267      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d075      	beq.n	80027f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002706:	4b88      	ldr	r3, [pc, #544]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b04      	cmp	r3, #4
 8002710:	d00c      	beq.n	800272c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b85      	ldr	r3, [pc, #532]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800271a:	2b08      	cmp	r3, #8
 800271c:	d112      	bne.n	8002744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271e:	4b82      	ldr	r3, [pc, #520]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800272a:	d10b      	bne.n	8002744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4b7e      	ldr	r3, [pc, #504]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05b      	beq.n	80027f0 <HAL_RCC_OscConfig+0x108>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d157      	bne.n	80027f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e242      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d106      	bne.n	800275c <HAL_RCC_OscConfig+0x74>
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a75      	ldr	r2, [pc, #468]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e01d      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x98>
 8002766:	4b70      	ldr	r3, [pc, #448]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6f      	ldr	r2, [pc, #444]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800276c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b6d      	ldr	r3, [pc, #436]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a6c      	ldr	r2, [pc, #432]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
 8002780:	4b69      	ldr	r3, [pc, #420]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a68      	ldr	r2, [pc, #416]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7ff f95e 	bl	8001a60 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a8:	f7ff f95a 	bl	8001a60 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e207      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0xc0>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7ff f94a 	bl	8001a60 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d0:	f7ff f946 	bl	8001a60 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e1f3      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	4b51      	ldr	r3, [pc, #324]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0xe8>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d063      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fe:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002812:	2b08      	cmp	r3, #8
 8002814:	d11c      	bne.n	8002850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002816:	4b44      	ldr	r3, [pc, #272]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d116      	bne.n	8002850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002822:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_RCC_OscConfig+0x152>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d001      	beq.n	800283a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e1c7      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283a:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4937      	ldr	r1, [pc, #220]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	e03a      	b.n	80028c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002858:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_RCC_OscConfig+0x244>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7ff f8ff 	bl	8001a60 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002866:	f7ff f8fb 	bl	8001a60 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1a8      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4925      	ldr	r1, [pc, #148]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
 8002898:	e015      	b.n	80028c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_RCC_OscConfig+0x244>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff f8de 	bl	8001a60 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a8:	f7ff f8da 	bl	8001a60 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e187      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d036      	beq.n	8002940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_RCC_OscConfig+0x248>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7ff f8be 	bl	8001a60 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e8:	f7ff f8ba 	bl	8001a60 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e167      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_OscConfig+0x240>)
 80028fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x200>
 8002906:	e01b      	b.n	8002940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_RCC_OscConfig+0x248>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290e:	f7ff f8a7 	bl	8001a60 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	e00e      	b.n	8002934 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002916:	f7ff f8a3 	bl	8001a60 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d907      	bls.n	8002934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e150      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
 8002928:	40023800 	.word	0x40023800
 800292c:	42470000 	.word	0x42470000
 8002930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002934:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1ea      	bne.n	8002916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 8097 	beq.w	8002a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002952:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10f      	bne.n	800297e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b7d      	ldr	r3, [pc, #500]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a7c      	ldr	r2, [pc, #496]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b7a      	ldr	r3, [pc, #488]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297e:	4b77      	ldr	r3, [pc, #476]	; (8002b5c <HAL_RCC_OscConfig+0x474>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d118      	bne.n	80029bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298a:	4b74      	ldr	r3, [pc, #464]	; (8002b5c <HAL_RCC_OscConfig+0x474>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a73      	ldr	r2, [pc, #460]	; (8002b5c <HAL_RCC_OscConfig+0x474>)
 8002990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002996:	f7ff f863 	bl	8001a60 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299e:	f7ff f85f 	bl	8001a60 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e10c      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	4b6a      	ldr	r3, [pc, #424]	; (8002b5c <HAL_RCC_OscConfig+0x474>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2ea>
 80029c4:	4b64      	ldr	r3, [pc, #400]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a63      	ldr	r2, [pc, #396]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
 80029d0:	e01c      	b.n	8002a0c <HAL_RCC_OscConfig+0x324>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x30c>
 80029da:	4b5f      	ldr	r3, [pc, #380]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a5e      	ldr	r2, [pc, #376]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	4b5c      	ldr	r3, [pc, #368]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	4a5b      	ldr	r2, [pc, #364]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0x324>
 80029f4:	4b58      	ldr	r3, [pc, #352]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a57      	ldr	r2, [pc, #348]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	4a54      	ldr	r2, [pc, #336]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a06:	f023 0304 	bic.w	r3, r3, #4
 8002a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d015      	beq.n	8002a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7ff f824 	bl	8001a60 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7ff f820 	bl	8001a60 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0cb      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ee      	beq.n	8002a1c <HAL_RCC_OscConfig+0x334>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a40:	f7ff f80e 	bl	8001a60 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7ff f80a 	bl	8001a60 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0b5      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1ee      	bne.n	8002a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a70:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	4a38      	ldr	r2, [pc, #224]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a1 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a86:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d05c      	beq.n	8002b4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d141      	bne.n	8002b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_RCC_OscConfig+0x478>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe ffde 	bl	8001a60 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe ffda 	bl	8001a60 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e087      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	019b      	lsls	r3, r3, #6
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	491b      	ldr	r1, [pc, #108]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCC_OscConfig+0x478>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe ffb3 	bl	8001a60 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afe:	f7fe ffaf 	bl	8001a60 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e05c      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x416>
 8002b1c:	e054      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <HAL_RCC_OscConfig+0x478>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe ff9c 	bl	8001a60 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe ff98 	bl	8001a60 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e045      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x444>
 8002b4a:	e03d      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e038      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x4ec>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d028      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d121      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d11a      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b94:	4013      	ands	r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d111      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	3b01      	subs	r3, #1
 8002bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0cc      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b68      	ldr	r3, [pc, #416]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d90c      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b63      	ldr	r3, [pc, #396]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0b8      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c2c:	4b59      	ldr	r3, [pc, #356]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a58      	ldr	r2, [pc, #352]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c44:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4a52      	ldr	r2, [pc, #328]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c50:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	494d      	ldr	r1, [pc, #308]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d044      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d119      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e07f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d003      	beq.n	8002c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c96:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e06f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e067      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4934      	ldr	r1, [pc, #208]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc8:	f7fe feca 	bl	8001a60 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7fe fec6 	bl	8001a60 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e04f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 020c 	and.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1eb      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d20c      	bcs.n	8002d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e032      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4916      	ldr	r1, [pc, #88]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	490e      	ldr	r1, [pc, #56]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d5e:	f000 f821 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	490a      	ldr	r1, [pc, #40]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d70:	5ccb      	ldrb	r3, [r1, r3]
 8002d72:	fa22 f303 	lsr.w	r3, r2, r3
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fd72 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023c00 	.word	0x40023c00
 8002d94:	40023800 	.word	0x40023800
 8002d98:	08008234 	.word	0x08008234
 8002d9c:	20000004 	.word	0x20000004
 8002da0:	20000008 	.word	0x20000008

08002da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da8:	b090      	sub	sp, #64	; 0x40
 8002daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
 8002db0:	2300      	movs	r3, #0
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db4:	2300      	movs	r3, #0
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d00d      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0x40>
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	f200 80a1 	bhi.w	8002f10 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x3a>
 8002dd6:	e09b      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ddc:	e09b      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dde:	4b53      	ldr	r3, [pc, #332]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002de0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002de2:	e098      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de4:	4b4f      	ldr	r3, [pc, #316]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dee:	4b4d      	ldr	r3, [pc, #308]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d028      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfa:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	2200      	movs	r2, #0
 8002e02:	623b      	str	r3, [r7, #32]
 8002e04:	627a      	str	r2, [r7, #36]	; 0x24
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e10:	fb03 f201 	mul.w	r2, r3, r1
 8002e14:	2300      	movs	r3, #0
 8002e16:	fb00 f303 	mul.w	r3, r0, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a43      	ldr	r2, [pc, #268]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e24:	460a      	mov	r2, r1
 8002e26:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e2a:	4413      	add	r3, r2
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e30:	2200      	movs	r2, #0
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	61fa      	str	r2, [r7, #28]
 8002e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e3e:	f7fd f9cf 	bl	80001e0 <__aeabi_uldivmod>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4613      	mov	r3, r2
 8002e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e4a:	e053      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e4c:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	099b      	lsrs	r3, r3, #6
 8002e52:	2200      	movs	r2, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	617a      	str	r2, [r7, #20]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e5e:	f04f 0b00 	mov.w	fp, #0
 8002e62:	4652      	mov	r2, sl
 8002e64:	465b      	mov	r3, fp
 8002e66:	f04f 0000 	mov.w	r0, #0
 8002e6a:	f04f 0100 	mov.w	r1, #0
 8002e6e:	0159      	lsls	r1, r3, #5
 8002e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e74:	0150      	lsls	r0, r2, #5
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e7e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e96:	ebb2 0408 	subs.w	r4, r2, r8
 8002e9a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	00eb      	lsls	r3, r5, #3
 8002ea8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eac:	00e2      	lsls	r2, r4, #3
 8002eae:	4614      	mov	r4, r2
 8002eb0:	461d      	mov	r5, r3
 8002eb2:	eb14 030a 	adds.w	r3, r4, sl
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	eb45 030b 	adc.w	r3, r5, fp
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eca:	4629      	mov	r1, r5
 8002ecc:	028b      	lsls	r3, r1, #10
 8002ece:	4621      	mov	r1, r4
 8002ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	028a      	lsls	r2, r1, #10
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	60fa      	str	r2, [r7, #12]
 8002ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ee8:	f7fd f97a 	bl	80001e0 <__aeabi_uldivmod>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	3301      	adds	r3, #1
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f0e:	e002      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3740      	adds	r7, #64	; 0x40
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	00f42400 	.word	0x00f42400
 8002f2c:	017d7840 	.word	0x017d7840

08002f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000004 	.word	0x20000004

08002f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f4c:	f7ff fff0 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	0b5b      	lsrs	r3, r3, #13
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	4903      	ldr	r1, [pc, #12]	; (8002f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	08008244 	.word	0x08008244

08002f70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <HAL_RCC_GetClockConfig+0x5c>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0203 	and.w	r2, r3, #3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <HAL_RCC_GetClockConfig+0x5c>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_RCC_GetClockConfig+0x5c>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_GetClockConfig+0x5c>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	08db      	lsrs	r3, r3, #3
 8002faa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_RCC_GetClockConfig+0x60>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0207 	and.w	r2, r3, #7
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	601a      	str	r2, [r3, #0]
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e07b      	b.n	80030de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d108      	bne.n	8003000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff6:	d009      	beq.n	800300c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
 8002ffe:	e005      	b.n	800300c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fb6c 	bl	8001704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	f003 0104 	and.w	r1, r3, #4
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f003 0210 	and.w	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b088      	sub	sp, #32
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_SPI_Transmit+0x22>
 8003104:	2302      	movs	r3, #2
 8003106:	e126      	b.n	8003356 <HAL_SPI_Transmit+0x270>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003110:	f7fe fca6 	bl	8001a60 <HAL_GetTick>
 8003114:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d002      	beq.n	800312c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003126:	2302      	movs	r3, #2
 8003128:	77fb      	strb	r3, [r7, #31]
    goto error;
 800312a:	e10b      	b.n	8003344 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_SPI_Transmit+0x52>
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800313c:	e102      	b.n	8003344 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2203      	movs	r2, #3
 8003142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	88fa      	ldrh	r2, [r7, #6]
 8003156:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003184:	d10f      	bne.n	80031a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003194:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d007      	beq.n	80031c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031cc:	d14b      	bne.n	8003266 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_SPI_Transmit+0xf6>
 80031d6:	8afb      	ldrh	r3, [r7, #22]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d13e      	bne.n	800325a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003200:	e02b      	b.n	800325a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b02      	cmp	r3, #2
 800320e:	d112      	bne.n	8003236 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	86da      	strh	r2, [r3, #54]	; 0x36
 8003234:	e011      	b.n	800325a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003236:	f7fe fc13 	bl	8001a60 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d803      	bhi.n	800324e <HAL_SPI_Transmit+0x168>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d102      	bne.n	8003254 <HAL_SPI_Transmit+0x16e>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003258:	e074      	b.n	8003344 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ce      	bne.n	8003202 <HAL_SPI_Transmit+0x11c>
 8003264:	e04c      	b.n	8003300 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_SPI_Transmit+0x18e>
 800326e:	8afb      	ldrh	r3, [r7, #22]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d140      	bne.n	80032f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	7812      	ldrb	r2, [r2, #0]
 8003280:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800329a:	e02c      	b.n	80032f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d113      	bne.n	80032d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	330c      	adds	r3, #12
 80032b4:	7812      	ldrb	r2, [r2, #0]
 80032b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80032d0:	e011      	b.n	80032f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d2:	f7fe fbc5 	bl	8001a60 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d803      	bhi.n	80032ea <HAL_SPI_Transmit+0x204>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d102      	bne.n	80032f0 <HAL_SPI_Transmit+0x20a>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032f4:	e026      	b.n	8003344 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1cd      	bne.n	800329c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	6839      	ldr	r1, [r7, #0]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f9ff 	bl	8003708 <SPI_EndRxTxTransaction>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e000      	b.n	8003344 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003342:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003354:	7ffb      	ldrb	r3, [r7, #31]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_SPI_Transmit_DMA+0x20>
 800337c:	2302      	movs	r3, #2
 800337e:	e09b      	b.n	80034b8 <HAL_SPI_Transmit_DMA+0x158>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d002      	beq.n	800339a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003394:	2302      	movs	r3, #2
 8003396:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003398:	e089      	b.n	80034ae <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_SPI_Transmit_DMA+0x46>
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033aa:	e080      	b.n	80034ae <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2203      	movs	r2, #3
 80033b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	88fa      	ldrh	r2, [r7, #6]
 80033ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f2:	d10f      	bne.n	8003414 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003402:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003412:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003418:	4a29      	ldr	r2, [pc, #164]	; (80034c0 <HAL_SPI_Transmit_DMA+0x160>)
 800341a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003420:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <HAL_SPI_Transmit_DMA+0x164>)
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	4a27      	ldr	r2, [pc, #156]	; (80034c8 <HAL_SPI_Transmit_DMA+0x168>)
 800342a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003430:	2200      	movs	r2, #0
 8003432:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	4619      	mov	r1, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800344a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800344c:	f7fe fcc8 	bl	8001de0 <HAL_DMA_Start_IT>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	f043 0210 	orr.w	r2, r3, #16
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800346e:	e01e      	b.n	80034ae <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d007      	beq.n	800348e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0220 	orr.w	r2, r2, #32
 800349c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0202 	orr.w	r2, r2, #2
 80034ac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	0800359d 	.word	0x0800359d
 80034c4:	080034f5 	.word	0x080034f5
 80034c8:	080035b9 	.word	0x080035b9

080034cc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003502:	f7fe faad 	bl	8001a60 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003516:	d03b      	beq.n	8003590 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0220 	bic.w	r2, r2, #32
 8003526:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0202 	bic.w	r2, r2, #2
 8003536:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	6978      	ldr	r0, [r7, #20]
 800353e:	f000 f8e3 	bl	8003708 <SPI_EndRxTxTransaction>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	f043 0220 	orr.w	r2, r3, #32
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003588:	6978      	ldr	r0, [r7, #20]
 800358a:	f7ff ffa9 	bl	80034e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800358e:	e002      	b.n	8003596 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003590:	6978      	ldr	r0, [r7, #20]
 8003592:	f7fd f945 	bl	8000820 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f7ff ff8e 	bl	80034cc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0203 	bic.w	r2, r2, #3
 80035d4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f043 0210 	orr.w	r2, r3, #16
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f7ff ff78 	bl	80034e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	4613      	mov	r3, r2
 8003606:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003608:	f7fe fa2a 	bl	8001a60 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	4413      	add	r3, r2
 8003616:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003618:	f7fe fa22 	bl	8001a60 <HAL_GetTick>
 800361c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800361e:	4b39      	ldr	r3, [pc, #228]	; (8003704 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	015b      	lsls	r3, r3, #5
 8003624:	0d1b      	lsrs	r3, r3, #20
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800362e:	e054      	b.n	80036da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d050      	beq.n	80036da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003638:	f7fe fa12 	bl	8001a60 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	429a      	cmp	r2, r3
 8003646:	d902      	bls.n	800364e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d13d      	bne.n	80036ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800365c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003666:	d111      	bne.n	800368c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003670:	d004      	beq.n	800367c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367a:	d107      	bne.n	800368c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003694:	d10f      	bne.n	80036b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e017      	b.n	80036fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d19b      	bne.n	8003630 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000004 	.word	0x20000004

08003708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <SPI_EndRxTxTransaction+0x7c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1b      	ldr	r2, [pc, #108]	; (8003788 <SPI_EndRxTxTransaction+0x80>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0d5b      	lsrs	r3, r3, #21
 8003720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003724:	fb02 f303 	mul.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003732:	d112      	bne.n	800375a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2200      	movs	r2, #0
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f7ff ff5a 	bl	80035f8 <SPI_WaitFlagStateUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e00f      	b.n	800377a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	3b01      	subs	r3, #1
 8003764:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d0f2      	beq.n	800375a <SPI_EndRxTxTransaction+0x52>
 8003774:	e000      	b.n	8003778 <SPI_EndRxTxTransaction+0x70>
        break;
 8003776:	bf00      	nop
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000004 	.word	0x20000004
 8003788:	165e9f81 	.word	0x165e9f81

0800378c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e041      	b.n	8003822 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f839 	bl	800382a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f000 f9ca 	bl	8003b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d001      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e044      	b.n	80038e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0x6c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003882:	d013      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0x6c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00e      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0x6c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0x6c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a17      	ldr	r2, [pc, #92]	; (80038fc <HAL_TIM_Base_Start_IT+0xbc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0x6c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_TIM_Base_Start_IT+0xc0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d111      	bne.n	80038d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	d010      	beq.n	80038e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ce:	e007      	b.n	80038e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800
 80038fc:	40000c00 	.word	0x40000c00
 8003900:	40014000 	.word	0x40014000

08003904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d122      	bne.n	8003960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d11b      	bne.n	8003960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0202 	mvn.w	r2, #2
 8003930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8ee 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8e0 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f8f1 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b04      	cmp	r3, #4
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0204 	mvn.w	r2, #4
 8003984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8c4 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8b6 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8c7 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0208 	mvn.w	r2, #8
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2204      	movs	r2, #4
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f89a 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f88c 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f89d 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0210 	mvn.w	r2, #16
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2208      	movs	r2, #8
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f870 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f862 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f873 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d107      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0201 	mvn.w	r2, #1
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd fdfa 	bl	800167c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d10e      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b80      	cmp	r3, #128	; 0x80
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8e2 	bl	8003c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d107      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f838 	bl	8003b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d10e      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d107      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0220 	mvn.w	r2, #32
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8ac 	bl	8003c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a34      	ldr	r2, [pc, #208]	; (8003c48 <TIM_Base_SetConfig+0xe4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00f      	beq.n	8003b9c <TIM_Base_SetConfig+0x38>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b82:	d00b      	beq.n	8003b9c <TIM_Base_SetConfig+0x38>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a31      	ldr	r2, [pc, #196]	; (8003c4c <TIM_Base_SetConfig+0xe8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_Base_SetConfig+0x38>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a30      	ldr	r2, [pc, #192]	; (8003c50 <TIM_Base_SetConfig+0xec>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_Base_SetConfig+0x38>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a2f      	ldr	r2, [pc, #188]	; (8003c54 <TIM_Base_SetConfig+0xf0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d108      	bne.n	8003bae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a25      	ldr	r2, [pc, #148]	; (8003c48 <TIM_Base_SetConfig+0xe4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01b      	beq.n	8003bee <TIM_Base_SetConfig+0x8a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d017      	beq.n	8003bee <TIM_Base_SetConfig+0x8a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <TIM_Base_SetConfig+0xe8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <TIM_Base_SetConfig+0x8a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <TIM_Base_SetConfig+0xec>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00f      	beq.n	8003bee <TIM_Base_SetConfig+0x8a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <TIM_Base_SetConfig+0xf0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00b      	beq.n	8003bee <TIM_Base_SetConfig+0x8a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <TIM_Base_SetConfig+0xf4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d007      	beq.n	8003bee <TIM_Base_SetConfig+0x8a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1e      	ldr	r2, [pc, #120]	; (8003c5c <TIM_Base_SetConfig+0xf8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d003      	beq.n	8003bee <TIM_Base_SetConfig+0x8a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <TIM_Base_SetConfig+0xfc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d108      	bne.n	8003c00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <TIM_Base_SetConfig+0xe4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d103      	bne.n	8003c34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	615a      	str	r2, [r3, #20]
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40014000 	.word	0x40014000
 8003c5c:	40014400 	.word	0x40014400
 8003c60:	40014800 	.word	0x40014800

08003c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <__NVIC_SetPriority>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	db0a      	blt.n	8003cb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	490c      	ldr	r1, [pc, #48]	; (8003cd8 <__NVIC_SetPriority+0x4c>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	440b      	add	r3, r1
 8003cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cb4:	e00a      	b.n	8003ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4908      	ldr	r1, [pc, #32]	; (8003cdc <__NVIC_SetPriority+0x50>)
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	3b04      	subs	r3, #4
 8003cc4:	0112      	lsls	r2, r2, #4
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	440b      	add	r3, r1
 8003cca:	761a      	strb	r2, [r3, #24]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000e100 	.word	0xe000e100
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <SysTick_Handler+0x1c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ce8:	f001 fd28 	bl	800573c <xTaskGetSchedulerState>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d001      	beq.n	8003cf6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003cf2:	f002 fb11 	bl	8006318 <xPortSysTickHandler>
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	e000e010 	.word	0xe000e010

08003d00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d04:	2100      	movs	r1, #0
 8003d06:	f06f 0004 	mvn.w	r0, #4
 8003d0a:	f7ff ffbf 	bl	8003c8c <__NVIC_SetPriority>
#endif
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d1a:	f3ef 8305 	mrs	r3, IPSR
 8003d1e:	603b      	str	r3, [r7, #0]
  return(result);
 8003d20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003d26:	f06f 0305 	mvn.w	r3, #5
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	e00c      	b.n	8003d48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <osKernelInitialize+0x44>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <osKernelInitialize+0x44>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	e002      	b.n	8003d48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
 8003d46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d48:	687b      	ldr	r3, [r7, #4]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	200001f4 	.word	0x200001f4

08003d5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d62:	f3ef 8305 	mrs	r3, IPSR
 8003d66:	603b      	str	r3, [r7, #0]
  return(result);
 8003d68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003d6e:	f06f 0305 	mvn.w	r3, #5
 8003d72:	607b      	str	r3, [r7, #4]
 8003d74:	e010      	b.n	8003d98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d76:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <osKernelStart+0x48>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d109      	bne.n	8003d92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d7e:	f7ff ffbf 	bl	8003d00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <osKernelStart+0x48>)
 8003d84:	2202      	movs	r2, #2
 8003d86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d88:	f001 f87c 	bl	8004e84 <vTaskStartScheduler>
      stat = osOK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	e002      	b.n	8003d98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d98:	687b      	ldr	r3, [r7, #4]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	200001f4 	.word	0x200001f4

08003da8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08e      	sub	sp, #56	; 0x38
 8003dac:	af04      	add	r7, sp, #16
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003db8:	f3ef 8305 	mrs	r3, IPSR
 8003dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8003dbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d17e      	bne.n	8003ec2 <osThreadNew+0x11a>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d07b      	beq.n	8003ec2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003dce:	2318      	movs	r3, #24
 8003dd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d045      	beq.n	8003e6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <osThreadNew+0x48>
        name = attr->name;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <osThreadNew+0x6e>
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b38      	cmp	r3, #56	; 0x38
 8003e08:	d805      	bhi.n	8003e16 <osThreadNew+0x6e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <osThreadNew+0x72>
        return (NULL);
 8003e16:	2300      	movs	r3, #0
 8003e18:	e054      	b.n	8003ec4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	089b      	lsrs	r3, r3, #2
 8003e28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00e      	beq.n	8003e50 <osThreadNew+0xa8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2bbb      	cmp	r3, #187	; 0xbb
 8003e38:	d90a      	bls.n	8003e50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d006      	beq.n	8003e50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <osThreadNew+0xa8>
        mem = 1;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	e010      	b.n	8003e72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10c      	bne.n	8003e72 <osThreadNew+0xca>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d108      	bne.n	8003e72 <osThreadNew+0xca>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d104      	bne.n	8003e72 <osThreadNew+0xca>
          mem = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e001      	b.n	8003e72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d110      	bne.n	8003e9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e80:	9202      	str	r2, [sp, #8]
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	6a3a      	ldr	r2, [r7, #32]
 8003e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fe0c 	bl	8004aac <xTaskCreateStatic>
 8003e94:	4603      	mov	r3, r0
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	e013      	b.n	8003ec2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d110      	bne.n	8003ec2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	f107 0310 	add.w	r3, r7, #16
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fe57 	bl	8004b66 <xTaskCreate>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <osThreadNew+0x11a>
            hTask = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ec2:	693b      	ldr	r3, [r7, #16]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed4:	f3ef 8305 	mrs	r3, IPSR
 8003ed8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eda:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <osDelay+0x1c>
    stat = osErrorISR;
 8003ee0:	f06f 0305 	mvn.w	r3, #5
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e007      	b.n	8003ef8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 ff92 	bl	8004e1c <vTaskDelay>
    }
  }

  return (stat);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4a06      	ldr	r2, [pc, #24]	; (8003f34 <vApplicationGetIdleTaskMemory+0x30>)
 8003f1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	200001f8 	.word	0x200001f8
 8003f34:	200002b4 	.word	0x200002b4

08003f38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4a06      	ldr	r2, [pc, #24]	; (8003f68 <vApplicationGetTimerTaskMemory+0x30>)
 8003f4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f56:	601a      	str	r2, [r3, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	200004b4 	.word	0x200004b4
 8003f68:	20000570 	.word	0x20000570

08003f6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f103 0208 	add.w	r2, r3, #8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295
 8003f84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f103 0208 	add.w	r2, r3, #8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f103 0208 	add.w	r2, r3, #8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d103      	bne.n	800402e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e00c      	b.n	8004048 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3308      	adds	r3, #8
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e002      	b.n	800403c <vListInsert+0x2e>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	d2f6      	bcs.n	8004036 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	601a      	str	r2, [r3, #0]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6892      	ldr	r2, [r2, #8]
 8004096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6852      	ldr	r2, [r2, #4]
 80040a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d103      	bne.n	80040b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	1e5a      	subs	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040fe:	f002 f879 	bl	80061f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	68f9      	ldr	r1, [r7, #12]
 800410c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800410e:	fb01 f303 	mul.w	r3, r1, r3
 8004112:	441a      	add	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	3b01      	subs	r3, #1
 8004130:	68f9      	ldr	r1, [r7, #12]
 8004132:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	441a      	add	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	22ff      	movs	r2, #255	; 0xff
 8004142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	22ff      	movs	r2, #255	; 0xff
 800414a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d114      	bne.n	800417e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01a      	beq.n	8004192 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3310      	adds	r3, #16
 8004160:	4618      	mov	r0, r3
 8004162:	f001 f929 	bl	80053b8 <xTaskRemoveFromEventList>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d012      	beq.n	8004192 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <xQueueGenericReset+0xcc>)
 800416e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	e009      	b.n	8004192 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3310      	adds	r3, #16
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fef2 	bl	8003f6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3324      	adds	r3, #36	; 0x24
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff feed 	bl	8003f6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004192:	f002 f85f 	bl	8006254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004196:	2301      	movs	r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08e      	sub	sp, #56	; 0x38
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <xQueueGenericCreateStatic+0x52>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <xQueueGenericCreateStatic+0x56>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <xQueueGenericCreateStatic+0x58>
 80041fa:	2300      	movs	r3, #0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	623b      	str	r3, [r7, #32]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <xQueueGenericCreateStatic+0x7e>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <xQueueGenericCreateStatic+0x82>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <xQueueGenericCreateStatic+0x84>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	61fb      	str	r3, [r7, #28]
}
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004242:	2350      	movs	r3, #80	; 0x50
 8004244:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b50      	cmp	r3, #80	; 0x50
 800424a:	d00a      	beq.n	8004262 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	61bb      	str	r3, [r7, #24]
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004262:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004276:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f805 	bl	8004294 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800428c:	4618      	mov	r0, r3
 800428e:	3730      	adds	r7, #48	; 0x30
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d103      	bne.n	80042b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e002      	b.n	80042b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042c2:	2101      	movs	r1, #1
 80042c4:	69b8      	ldr	r0, [r7, #24]
 80042c6:	f7ff ff05 	bl	80040d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08e      	sub	sp, #56	; 0x38
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042ea:	2300      	movs	r3, #0
 80042ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xQueueGenericSend+0x32>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <xQueueGenericSend+0x40>
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <xQueueGenericSend+0x44>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <xQueueGenericSend+0x46>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <xQueueGenericSend+0x60>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d103      	bne.n	800434a <xQueueGenericSend+0x6e>
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <xQueueGenericSend+0x72>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <xQueueGenericSend+0x74>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <xQueueGenericSend+0x8e>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	623b      	str	r3, [r7, #32]
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800436a:	f001 f9e7 	bl	800573c <xTaskGetSchedulerState>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <xQueueGenericSend+0x9e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <xQueueGenericSend+0xa2>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <xQueueGenericSend+0xa4>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xQueueGenericSend+0xbe>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	61fb      	str	r3, [r7, #28]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800439a:	f001 ff2b 	bl	80061f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <xQueueGenericSend+0xd4>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d129      	bne.n	8004404 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043b6:	f000 fa0b 	bl	80047d0 <prvCopyDataToQueue>
 80043ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d010      	beq.n	80043e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	3324      	adds	r3, #36	; 0x24
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fff5 	bl	80053b8 <xTaskRemoveFromEventList>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d013      	beq.n	80043fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043d4:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <xQueueGenericSend+0x1f8>)
 80043d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	e00a      	b.n	80043fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043ec:	4b39      	ldr	r3, [pc, #228]	; (80044d4 <xQueueGenericSend+0x1f8>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043fc:	f001 ff2a 	bl	8006254 <vPortExitCritical>
				return pdPASS;
 8004400:	2301      	movs	r3, #1
 8004402:	e063      	b.n	80044cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800440a:	f001 ff23 	bl	8006254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800440e:	2300      	movs	r3, #0
 8004410:	e05c      	b.n	80044cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004418:	f107 0314 	add.w	r3, r7, #20
 800441c:	4618      	mov	r0, r3
 800441e:	f001 f82f 	bl	8005480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004422:	2301      	movs	r3, #1
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004426:	f001 ff15 	bl	8006254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800442a:	f000 fd9b 	bl	8004f64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800442e:	f001 fee1 	bl	80061f4 <vPortEnterCritical>
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004438:	b25b      	sxtb	r3, r3
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d103      	bne.n	8004448 <xQueueGenericSend+0x16c>
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800444e:	b25b      	sxtb	r3, r3
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d103      	bne.n	800445e <xQueueGenericSend+0x182>
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800445e:	f001 fef9 	bl	8006254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004462:	1d3a      	adds	r2, r7, #4
 8004464:	f107 0314 	add.w	r3, r7, #20
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f001 f81e 	bl	80054ac <xTaskCheckForTimeOut>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d124      	bne.n	80044c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004478:	f000 faa2 	bl	80049c0 <prvIsQueueFull>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d018      	beq.n	80044b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	3310      	adds	r3, #16
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f000 ff44 	bl	8005318 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004492:	f000 fa2d 	bl	80048f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004496:	f000 fd73 	bl	8004f80 <xTaskResumeAll>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	f47f af7c 	bne.w	800439a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80044a2:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <xQueueGenericSend+0x1f8>)
 80044a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	e772      	b.n	800439a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044b6:	f000 fa1b 	bl	80048f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044ba:	f000 fd61 	bl	8004f80 <xTaskResumeAll>
 80044be:	e76c      	b.n	800439a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044c2:	f000 fa15 	bl	80048f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044c6:	f000 fd5b 	bl	8004f80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3738      	adds	r7, #56	; 0x38
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	e000ed04 	.word	0xe000ed04

080044d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b090      	sub	sp, #64	; 0x40
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d103      	bne.n	8004514 <xQueueGenericSendFromISR+0x3c>
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <xQueueGenericSendFromISR+0x40>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <xQueueGenericSendFromISR+0x42>
 8004518:	2300      	movs	r3, #0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d103      	bne.n	8004542 <xQueueGenericSendFromISR+0x6a>
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <xQueueGenericSendFromISR+0x6e>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <xQueueGenericSendFromISR+0x70>
 8004546:	2300      	movs	r3, #0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	623b      	str	r3, [r7, #32]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004562:	f001 ff29 	bl	80063b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004566:	f3ef 8211 	mrs	r2, BASEPRI
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	61fa      	str	r2, [r7, #28]
 800457c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800457e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <xQueueGenericSendFromISR+0xbc>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d12f      	bne.n	80045f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800459a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045aa:	f000 f911 	bl	80047d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d112      	bne.n	80045de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d016      	beq.n	80045ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	3324      	adds	r3, #36	; 0x24
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fef7 	bl	80053b8 <xTaskRemoveFromEventList>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00e      	beq.n	80045ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e007      	b.n	80045ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045e2:	3301      	adds	r3, #1
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	b25a      	sxtb	r2, r3
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045ee:	2301      	movs	r3, #1
 80045f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80045f2:	e001      	b.n	80045f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004602:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004606:	4618      	mov	r0, r3
 8004608:	3740      	adds	r7, #64	; 0x40
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08c      	sub	sp, #48	; 0x30
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800461c:	2300      	movs	r3, #0
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <xQueueReceive+0x30>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	623b      	str	r3, [r7, #32]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <xQueueReceive+0x3e>
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <xQueueReceive+0x42>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <xQueueReceive+0x44>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <xQueueReceive+0x5e>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	61fb      	str	r3, [r7, #28]
}
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800466e:	f001 f865 	bl	800573c <xTaskGetSchedulerState>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d102      	bne.n	800467e <xQueueReceive+0x6e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <xQueueReceive+0x72>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <xQueueReceive+0x74>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <xQueueReceive+0x8e>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	61bb      	str	r3, [r7, #24]
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800469e:	f001 fda9 	bl	80061f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d01f      	beq.n	80046ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b2:	f000 f8f7 	bl	80048a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00f      	beq.n	80046e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	3310      	adds	r3, #16
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fe74 	bl	80053b8 <xTaskRemoveFromEventList>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046d6:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <xQueueReceive+0x1bc>)
 80046d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046e6:	f001 fdb5 	bl	8006254 <vPortExitCritical>
				return pdPASS;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e069      	b.n	80047c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046f4:	f001 fdae 	bl	8006254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e062      	b.n	80047c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004702:	f107 0310 	add.w	r3, r7, #16
 8004706:	4618      	mov	r0, r3
 8004708:	f000 feba 	bl	8005480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800470c:	2301      	movs	r3, #1
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004710:	f001 fda0 	bl	8006254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004714:	f000 fc26 	bl	8004f64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004718:	f001 fd6c 	bl	80061f4 <vPortEnterCritical>
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004722:	b25b      	sxtb	r3, r3
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d103      	bne.n	8004732 <xQueueReceive+0x122>
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004738:	b25b      	sxtb	r3, r3
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d103      	bne.n	8004748 <xQueueReceive+0x138>
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004748:	f001 fd84 	bl	8006254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800474c:	1d3a      	adds	r2, r7, #4
 800474e:	f107 0310 	add.w	r3, r7, #16
 8004752:	4611      	mov	r1, r2
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fea9 	bl	80054ac <xTaskCheckForTimeOut>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d123      	bne.n	80047a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004762:	f000 f917 	bl	8004994 <prvIsQueueEmpty>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d017      	beq.n	800479c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	3324      	adds	r3, #36	; 0x24
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fdcf 	bl	8005318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800477a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800477c:	f000 f8b8 	bl	80048f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004780:	f000 fbfe 	bl	8004f80 <xTaskResumeAll>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d189      	bne.n	800469e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <xQueueReceive+0x1bc>)
 800478c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	e780      	b.n	800469e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800479c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800479e:	f000 f8a7 	bl	80048f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047a2:	f000 fbed 	bl	8004f80 <xTaskResumeAll>
 80047a6:	e77a      	b.n	800469e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047aa:	f000 f8a1 	bl	80048f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047ae:	f000 fbe7 	bl	8004f80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b4:	f000 f8ee 	bl	8004994 <prvIsQueueEmpty>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f43f af6f 	beq.w	800469e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3730      	adds	r7, #48	; 0x30
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	e000ed04 	.word	0xe000ed04

080047d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10d      	bne.n	800480a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d14d      	bne.n	8004892 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 ffbc 	bl	8005778 <xTaskPriorityDisinherit>
 8004800:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	e043      	b.n	8004892 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d119      	bne.n	8004844 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6858      	ldr	r0, [r3, #4]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	461a      	mov	r2, r3
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	f002 f81c 	bl	8006858 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	441a      	add	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	d32b      	bcc.n	8004892 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	e026      	b.n	8004892 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68d8      	ldr	r0, [r3, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	461a      	mov	r2, r3
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	f002 f802 	bl	8006858 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	425b      	negs	r3, r3
 800485e:	441a      	add	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d207      	bcs.n	8004880 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	425b      	negs	r3, r3
 800487a:	441a      	add	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d105      	bne.n	8004892 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	3b01      	subs	r3, #1
 8004890:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800489a:	697b      	ldr	r3, [r7, #20]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d018      	beq.n	80048e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	441a      	add	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d303      	bcc.n	80048d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68d9      	ldr	r1, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	461a      	mov	r2, r3
 80048e2:	6838      	ldr	r0, [r7, #0]
 80048e4:	f001 ffb8 	bl	8006858 <memcpy>
	}
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048f8:	f001 fc7c 	bl	80061f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004902:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004904:	e011      	b.n	800492a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	d012      	beq.n	8004934 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3324      	adds	r3, #36	; 0x24
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fd50 	bl	80053b8 <xTaskRemoveFromEventList>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800491e:	f000 fe27 	bl	8005570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	3b01      	subs	r3, #1
 8004926:	b2db      	uxtb	r3, r3
 8004928:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800492a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	dce9      	bgt.n	8004906 <prvUnlockQueue+0x16>
 8004932:	e000      	b.n	8004936 <prvUnlockQueue+0x46>
					break;
 8004934:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	22ff      	movs	r2, #255	; 0xff
 800493a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800493e:	f001 fc89 	bl	8006254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004942:	f001 fc57 	bl	80061f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800494c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800494e:	e011      	b.n	8004974 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d012      	beq.n	800497e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3310      	adds	r3, #16
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fd2b 	bl	80053b8 <xTaskRemoveFromEventList>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004968:	f000 fe02 	bl	8005570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800496c:	7bbb      	ldrb	r3, [r7, #14]
 800496e:	3b01      	subs	r3, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004978:	2b00      	cmp	r3, #0
 800497a:	dce9      	bgt.n	8004950 <prvUnlockQueue+0x60>
 800497c:	e000      	b.n	8004980 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800497e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	22ff      	movs	r2, #255	; 0xff
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004988:	f001 fc64 	bl	8006254 <vPortExitCritical>
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800499c:	f001 fc2a 	bl	80061f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049a8:	2301      	movs	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e001      	b.n	80049b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049b2:	f001 fc4f 	bl	8006254 <vPortExitCritical>

	return xReturn;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049c8:	f001 fc14 	bl	80061f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d102      	bne.n	80049de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e001      	b.n	80049e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049e2:	f001 fc37 	bl	8006254 <vPortExitCritical>

	return xReturn;
 80049e6:	68fb      	ldr	r3, [r7, #12]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	e014      	b.n	8004a2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a00:	4a0f      	ldr	r2, [pc, #60]	; (8004a40 <vQueueAddToRegistry+0x50>)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a0c:	490c      	ldr	r1, [pc, #48]	; (8004a40 <vQueueAddToRegistry+0x50>)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a16:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <vQueueAddToRegistry+0x50>)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a22:	e006      	b.n	8004a32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3301      	adds	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b07      	cmp	r3, #7
 8004a2e:	d9e7      	bls.n	8004a00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000970 	.word	0x20000970

08004a44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a54:	f001 fbce 	bl	80061f4 <vPortEnterCritical>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d103      	bne.n	8004a6e <vQueueWaitForMessageRestricted+0x2a>
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a74:	b25b      	sxtb	r3, r3
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d103      	bne.n	8004a84 <vQueueWaitForMessageRestricted+0x40>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a84:	f001 fbe6 	bl	8006254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d106      	bne.n	8004a9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	3324      	adds	r3, #36	; 0x24
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fc61 	bl	8005360 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a9e:	6978      	ldr	r0, [r7, #20]
 8004aa0:	f7ff ff26 	bl	80048f0 <prvUnlockQueue>
	}
 8004aa4:	bf00      	nop
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08e      	sub	sp, #56	; 0x38
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	623b      	str	r3, [r7, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	61fb      	str	r3, [r7, #28]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004af2:	23bc      	movs	r3, #188	; 0xbc
 8004af4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2bbc      	cmp	r3, #188	; 0xbc
 8004afa:	d00a      	beq.n	8004b12 <xTaskCreateStatic+0x66>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	61bb      	str	r3, [r7, #24]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01e      	beq.n	8004b58 <xTaskCreateStatic+0xac>
 8004b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b32:	2300      	movs	r3, #0
 8004b34:	9303      	str	r3, [sp, #12]
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	9302      	str	r3, [sp, #8]
 8004b3a:	f107 0314 	add.w	r3, r7, #20
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f850 	bl	8004bf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b52:	f000 f8f3 	bl	8004d3c <prvAddNewTaskToReadyList>
 8004b56:	e001      	b.n	8004b5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b5c:	697b      	ldr	r3, [r7, #20]
	}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3728      	adds	r7, #40	; 0x28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b08c      	sub	sp, #48	; 0x30
 8004b6a:	af04      	add	r7, sp, #16
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 fc5c 	bl	8006438 <pvPortMalloc>
 8004b80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00e      	beq.n	8004ba6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b88:	20bc      	movs	r0, #188	; 0xbc
 8004b8a:	f001 fc55 	bl	8006438 <pvPortMalloc>
 8004b8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b9c:	e005      	b.n	8004baa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b9e:	6978      	ldr	r0, [r7, #20]
 8004ba0:	f001 fd16 	bl	80065d0 <vPortFree>
 8004ba4:	e001      	b.n	8004baa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d017      	beq.n	8004be0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bb8:	88fa      	ldrh	r2, [r7, #6]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9303      	str	r3, [sp, #12]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	9302      	str	r3, [sp, #8]
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f80e 	bl	8004bf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bd4:	69f8      	ldr	r0, [r7, #28]
 8004bd6:	f000 f8b1 	bl	8004d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	e002      	b.n	8004be6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295
 8004be4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004be6:	69bb      	ldr	r3, [r7, #24]
	}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3720      	adds	r7, #32
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	461a      	mov	r2, r3
 8004c08:	21a5      	movs	r1, #165	; 0xa5
 8004c0a:	f001 fe33 	bl	8006874 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f023 0307 	bic.w	r3, r3, #7
 8004c26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	617b      	str	r3, [r7, #20]
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01f      	beq.n	8004c8e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e012      	b.n	8004c7a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	7819      	ldrb	r1, [r3, #0]
 8004c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	3334      	adds	r3, #52	; 0x34
 8004c64:	460a      	mov	r2, r1
 8004c66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d006      	beq.n	8004c82 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	3301      	adds	r3, #1
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d9e9      	bls.n	8004c54 <prvInitialiseNewTask+0x64>
 8004c80:	e000      	b.n	8004c84 <prvInitialiseNewTask+0x94>
			{
				break;
 8004c82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c8c:	e003      	b.n	8004c96 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	2b37      	cmp	r3, #55	; 0x37
 8004c9a:	d901      	bls.n	8004ca0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c9c:	2337      	movs	r3, #55	; 0x37
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ca4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004caa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	2200      	movs	r2, #0
 8004cb0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff f978 	bl	8003fac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	3318      	adds	r3, #24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff f973 	bl	8003fac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	3354      	adds	r3, #84	; 0x54
 8004cf0:	2260      	movs	r2, #96	; 0x60
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f001 fdbd 	bl	8006874 <memset>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <prvInitialiseNewTask+0x140>)
 8004cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <prvInitialiseNewTask+0x144>)
 8004d04:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	4a0b      	ldr	r2, [pc, #44]	; (8004d38 <prvInitialiseNewTask+0x148>)
 8004d0a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	69b8      	ldr	r0, [r7, #24]
 8004d12:	f001 f941 	bl	8005f98 <pxPortInitialiseStack>
 8004d16:	4602      	mov	r2, r0
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d28:	bf00      	nop
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	08008274 	.word	0x08008274
 8004d34:	08008294 	.word	0x08008294
 8004d38:	08008254 	.word	0x08008254

08004d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d44:	f001 fa56 	bl	80061f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d48:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <prvAddNewTaskToReadyList+0xc4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <prvAddNewTaskToReadyList+0xc4>)
 8004d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d52:	4b2c      	ldr	r3, [pc, #176]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d5a:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <prvAddNewTaskToReadyList+0xc4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d110      	bne.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d68:	f000 fc26 	bl	80055b8 <prvInitialiseTaskLists>
 8004d6c:	e00d      	b.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d6e:	4b26      	ldr	r3, [pc, #152]	; (8004e08 <prvAddNewTaskToReadyList+0xcc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d109      	bne.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d76:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d802      	bhi.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d8a:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <prvAddNewTaskToReadyList+0xd0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <prvAddNewTaskToReadyList+0xd0>)
 8004d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <prvAddNewTaskToReadyList+0xd0>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da0:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <prvAddNewTaskToReadyList+0xd4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d903      	bls.n	8004db0 <prvAddNewTaskToReadyList+0x74>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <prvAddNewTaskToReadyList+0xd4>)
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <prvAddNewTaskToReadyList+0xd8>)
 8004dbe:	441a      	add	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f7ff f8fd 	bl	8003fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dcc:	f001 fa42 	bl	8006254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <prvAddNewTaskToReadyList+0xcc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00e      	beq.n	8004df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d207      	bcs.n	8004df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <prvAddNewTaskToReadyList+0xdc>)
 8004de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000e84 	.word	0x20000e84
 8004e04:	200009b0 	.word	0x200009b0
 8004e08:	20000e90 	.word	0x20000e90
 8004e0c:	20000ea0 	.word	0x20000ea0
 8004e10:	20000e8c 	.word	0x20000e8c
 8004e14:	200009b4 	.word	0x200009b4
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d017      	beq.n	8004e5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <vTaskDelay+0x60>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <vTaskDelay+0x30>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	60bb      	str	r3, [r7, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	e7fe      	b.n	8004e4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e4c:	f000 f88a 	bl	8004f64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e50:	2100      	movs	r1, #0
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fcfe 	bl	8005854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e58:	f000 f892 	bl	8004f80 <xTaskResumeAll>
 8004e5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <vTaskDelay+0x64>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000eac 	.word	0x20000eac
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e92:	463a      	mov	r2, r7
 8004e94:	1d39      	adds	r1, r7, #4
 8004e96:	f107 0308 	add.w	r3, r7, #8
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff f832 	bl	8003f04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	9202      	str	r2, [sp, #8]
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	460a      	mov	r2, r1
 8004eb2:	4924      	ldr	r1, [pc, #144]	; (8004f44 <vTaskStartScheduler+0xc0>)
 8004eb4:	4824      	ldr	r0, [pc, #144]	; (8004f48 <vTaskStartScheduler+0xc4>)
 8004eb6:	f7ff fdf9 	bl	8004aac <xTaskCreateStatic>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4a23      	ldr	r2, [pc, #140]	; (8004f4c <vTaskStartScheduler+0xc8>)
 8004ebe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ec0:	4b22      	ldr	r3, [pc, #136]	; (8004f4c <vTaskStartScheduler+0xc8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e001      	b.n	8004ed2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d102      	bne.n	8004ede <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ed8:	f000 fd10 	bl	80058fc <xTimerCreateTimerTask>
 8004edc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d11b      	bne.n	8004f1c <vTaskStartScheduler+0x98>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	613b      	str	r3, [r7, #16]
}
 8004ef6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ef8:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <vTaskStartScheduler+0xcc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3354      	adds	r3, #84	; 0x54
 8004efe:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <vTaskStartScheduler+0xd0>)
 8004f00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <vTaskStartScheduler+0xd4>)
 8004f04:	f04f 32ff 	mov.w	r2, #4294967295
 8004f08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f0a:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <vTaskStartScheduler+0xd8>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <vTaskStartScheduler+0xdc>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f16:	f001 f8cb 	bl	80060b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f1a:	e00e      	b.n	8004f3a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d10a      	bne.n	8004f3a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	60fb      	str	r3, [r7, #12]
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <vTaskStartScheduler+0xb4>
}
 8004f3a:	bf00      	nop
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	08006a50 	.word	0x08006a50
 8004f48:	08005589 	.word	0x08005589
 8004f4c:	20000ea8 	.word	0x20000ea8
 8004f50:	200009b0 	.word	0x200009b0
 8004f54:	20000014 	.word	0x20000014
 8004f58:	20000ea4 	.word	0x20000ea4
 8004f5c:	20000e90 	.word	0x20000e90
 8004f60:	20000e88 	.word	0x20000e88

08004f64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <vTaskSuspendAll+0x18>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	4a03      	ldr	r2, [pc, #12]	; (8004f7c <vTaskSuspendAll+0x18>)
 8004f70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f72:	bf00      	nop
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000eac 	.word	0x20000eac

08004f80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f8e:	4b42      	ldr	r3, [pc, #264]	; (8005098 <xTaskResumeAll+0x118>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10a      	bne.n	8004fac <xTaskResumeAll+0x2c>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	603b      	str	r3, [r7, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	e7fe      	b.n	8004faa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fac:	f001 f922 	bl	80061f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fb0:	4b39      	ldr	r3, [pc, #228]	; (8005098 <xTaskResumeAll+0x118>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	4a38      	ldr	r2, [pc, #224]	; (8005098 <xTaskResumeAll+0x118>)
 8004fb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fba:	4b37      	ldr	r3, [pc, #220]	; (8005098 <xTaskResumeAll+0x118>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d162      	bne.n	8005088 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fc2:	4b36      	ldr	r3, [pc, #216]	; (800509c <xTaskResumeAll+0x11c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d05e      	beq.n	8005088 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fca:	e02f      	b.n	800502c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fcc:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <xTaskResumeAll+0x120>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3318      	adds	r3, #24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff f851 	bl	8004080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff f84c 	bl	8004080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <xTaskResumeAll+0x124>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d903      	bls.n	8004ffc <xTaskResumeAll+0x7c>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	4a2a      	ldr	r2, [pc, #168]	; (80050a4 <xTaskResumeAll+0x124>)
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4a27      	ldr	r2, [pc, #156]	; (80050a8 <xTaskResumeAll+0x128>)
 800500a:	441a      	add	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f7fe ffd7 	bl	8003fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501c:	4b23      	ldr	r3, [pc, #140]	; (80050ac <xTaskResumeAll+0x12c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	429a      	cmp	r2, r3
 8005024:	d302      	bcc.n	800502c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005026:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <xTaskResumeAll+0x130>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800502c:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <xTaskResumeAll+0x120>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1cb      	bne.n	8004fcc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800503a:	f000 fb5f 	bl	80056fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800503e:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <xTaskResumeAll+0x134>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d010      	beq.n	800506c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800504a:	f000 f847 	bl	80050dc <xTaskIncrementTick>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005054:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <xTaskResumeAll+0x130>)
 8005056:	2201      	movs	r2, #1
 8005058:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3b01      	subs	r3, #1
 800505e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f1      	bne.n	800504a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005066:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <xTaskResumeAll+0x134>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800506c:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <xTaskResumeAll+0x130>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d009      	beq.n	8005088 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005074:	2301      	movs	r3, #1
 8005076:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005078:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <xTaskResumeAll+0x138>)
 800507a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005088:	f001 f8e4 	bl	8006254 <vPortExitCritical>

	return xAlreadyYielded;
 800508c:	68bb      	ldr	r3, [r7, #8]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000eac 	.word	0x20000eac
 800509c:	20000e84 	.word	0x20000e84
 80050a0:	20000e44 	.word	0x20000e44
 80050a4:	20000e8c 	.word	0x20000e8c
 80050a8:	200009b4 	.word	0x200009b4
 80050ac:	200009b0 	.word	0x200009b0
 80050b0:	20000e98 	.word	0x20000e98
 80050b4:	20000e94 	.word	0x20000e94
 80050b8:	e000ed04 	.word	0xe000ed04

080050bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <xTaskGetTickCount+0x1c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050c8:	687b      	ldr	r3, [r7, #4]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000e88 	.word	0x20000e88

080050dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050e6:	4b4f      	ldr	r3, [pc, #316]	; (8005224 <xTaskIncrementTick+0x148>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f040 808f 	bne.w	800520e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050f0:	4b4d      	ldr	r3, [pc, #308]	; (8005228 <xTaskIncrementTick+0x14c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050f8:	4a4b      	ldr	r2, [pc, #300]	; (8005228 <xTaskIncrementTick+0x14c>)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d120      	bne.n	8005146 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005104:	4b49      	ldr	r3, [pc, #292]	; (800522c <xTaskIncrementTick+0x150>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <xTaskIncrementTick+0x48>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	603b      	str	r3, [r7, #0]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <xTaskIncrementTick+0x46>
 8005124:	4b41      	ldr	r3, [pc, #260]	; (800522c <xTaskIncrementTick+0x150>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	4b41      	ldr	r3, [pc, #260]	; (8005230 <xTaskIncrementTick+0x154>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a3f      	ldr	r2, [pc, #252]	; (800522c <xTaskIncrementTick+0x150>)
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	4a3f      	ldr	r2, [pc, #252]	; (8005230 <xTaskIncrementTick+0x154>)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b3e      	ldr	r3, [pc, #248]	; (8005234 <xTaskIncrementTick+0x158>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	4a3d      	ldr	r2, [pc, #244]	; (8005234 <xTaskIncrementTick+0x158>)
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	f000 fadb 	bl	80056fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005146:	4b3c      	ldr	r3, [pc, #240]	; (8005238 <xTaskIncrementTick+0x15c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	429a      	cmp	r2, r3
 800514e:	d349      	bcc.n	80051e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005150:	4b36      	ldr	r3, [pc, #216]	; (800522c <xTaskIncrementTick+0x150>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d104      	bne.n	8005164 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800515a:	4b37      	ldr	r3, [pc, #220]	; (8005238 <xTaskIncrementTick+0x15c>)
 800515c:	f04f 32ff 	mov.w	r2, #4294967295
 8005160:	601a      	str	r2, [r3, #0]
					break;
 8005162:	e03f      	b.n	80051e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005164:	4b31      	ldr	r3, [pc, #196]	; (800522c <xTaskIncrementTick+0x150>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	d203      	bcs.n	8005184 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800517c:	4a2e      	ldr	r2, [pc, #184]	; (8005238 <xTaskIncrementTick+0x15c>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005182:	e02f      	b.n	80051e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	3304      	adds	r3, #4
 8005188:	4618      	mov	r0, r3
 800518a:	f7fe ff79 	bl	8004080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	3318      	adds	r3, #24
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe ff70 	bl	8004080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	4b25      	ldr	r3, [pc, #148]	; (800523c <xTaskIncrementTick+0x160>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d903      	bls.n	80051b4 <xTaskIncrementTick+0xd8>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	4a22      	ldr	r2, [pc, #136]	; (800523c <xTaskIncrementTick+0x160>)
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <xTaskIncrementTick+0x164>)
 80051c2:	441a      	add	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f7fe fefb 	bl	8003fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <xTaskIncrementTick+0x168>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	429a      	cmp	r2, r3
 80051dc:	d3b8      	bcc.n	8005150 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051de:	2301      	movs	r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051e2:	e7b5      	b.n	8005150 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051e4:	4b17      	ldr	r3, [pc, #92]	; (8005244 <xTaskIncrementTick+0x168>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ea:	4915      	ldr	r1, [pc, #84]	; (8005240 <xTaskIncrementTick+0x164>)
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d901      	bls.n	8005200 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80051fc:	2301      	movs	r3, #1
 80051fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <xTaskIncrementTick+0x16c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005208:	2301      	movs	r3, #1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e004      	b.n	8005218 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800520e:	4b0f      	ldr	r3, [pc, #60]	; (800524c <xTaskIncrementTick+0x170>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a0d      	ldr	r2, [pc, #52]	; (800524c <xTaskIncrementTick+0x170>)
 8005216:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005218:	697b      	ldr	r3, [r7, #20]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000eac 	.word	0x20000eac
 8005228:	20000e88 	.word	0x20000e88
 800522c:	20000e3c 	.word	0x20000e3c
 8005230:	20000e40 	.word	0x20000e40
 8005234:	20000e9c 	.word	0x20000e9c
 8005238:	20000ea4 	.word	0x20000ea4
 800523c:	20000e8c 	.word	0x20000e8c
 8005240:	200009b4 	.word	0x200009b4
 8005244:	200009b0 	.word	0x200009b0
 8005248:	20000e98 	.word	0x20000e98
 800524c:	20000e94 	.word	0x20000e94

08005250 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005256:	4b2a      	ldr	r3, [pc, #168]	; (8005300 <vTaskSwitchContext+0xb0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800525e:	4b29      	ldr	r3, [pc, #164]	; (8005304 <vTaskSwitchContext+0xb4>)
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005264:	e046      	b.n	80052f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005266:	4b27      	ldr	r3, [pc, #156]	; (8005304 <vTaskSwitchContext+0xb4>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526c:	4b26      	ldr	r3, [pc, #152]	; (8005308 <vTaskSwitchContext+0xb8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	e010      	b.n	8005296 <vTaskSwitchContext+0x46>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <vTaskSwitchContext+0x40>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	607b      	str	r3, [r7, #4]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <vTaskSwitchContext+0x3e>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3b01      	subs	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	491d      	ldr	r1, [pc, #116]	; (800530c <vTaskSwitchContext+0xbc>)
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0e4      	beq.n	8005274 <vTaskSwitchContext+0x24>
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4a15      	ldr	r2, [pc, #84]	; (800530c <vTaskSwitchContext+0xbc>)
 80052b6:	4413      	add	r3, r2
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	605a      	str	r2, [r3, #4]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	3308      	adds	r3, #8
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d104      	bne.n	80052da <vTaskSwitchContext+0x8a>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	605a      	str	r2, [r3, #4]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4a0b      	ldr	r2, [pc, #44]	; (8005310 <vTaskSwitchContext+0xc0>)
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	4a08      	ldr	r2, [pc, #32]	; (8005308 <vTaskSwitchContext+0xb8>)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <vTaskSwitchContext+0xc0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3354      	adds	r3, #84	; 0x54
 80052f0:	4a08      	ldr	r2, [pc, #32]	; (8005314 <vTaskSwitchContext+0xc4>)
 80052f2:	6013      	str	r3, [r2, #0]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20000eac 	.word	0x20000eac
 8005304:	20000e98 	.word	0x20000e98
 8005308:	20000e8c 	.word	0x20000e8c
 800530c:	200009b4 	.word	0x200009b4
 8005310:	200009b0 	.word	0x200009b0
 8005314:	20000014 	.word	0x20000014

08005318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	60fb      	str	r3, [r7, #12]
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800533e:	4b07      	ldr	r3, [pc, #28]	; (800535c <vTaskPlaceOnEventList+0x44>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3318      	adds	r3, #24
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fe fe61 	bl	800400e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800534c:	2101      	movs	r1, #1
 800534e:	6838      	ldr	r0, [r7, #0]
 8005350:	f000 fa80 	bl	8005854 <prvAddCurrentTaskToDelayedList>
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	200009b0 	.word	0x200009b0

08005360 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	617b      	str	r3, [r7, #20]
}
 8005384:	bf00      	nop
 8005386:	e7fe      	b.n	8005386 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3318      	adds	r3, #24
 800538e:	4619      	mov	r1, r3
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7fe fe18 	bl	8003fc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800539c:	f04f 33ff 	mov.w	r3, #4294967295
 80053a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	68b8      	ldr	r0, [r7, #8]
 80053a6:	f000 fa55 	bl	8005854 <prvAddCurrentTaskToDelayedList>
	}
 80053aa:	bf00      	nop
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	200009b0 	.word	0x200009b0

080053b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	60fb      	str	r3, [r7, #12]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3318      	adds	r3, #24
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe fe49 	bl	8004080 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053ee:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <xTaskRemoveFromEventList+0xb0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d11d      	bne.n	8005432 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fe40 	bl	8004080 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	4b19      	ldr	r3, [pc, #100]	; (800546c <xTaskRemoveFromEventList+0xb4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d903      	bls.n	8005414 <xTaskRemoveFromEventList+0x5c>
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	4a16      	ldr	r2, [pc, #88]	; (800546c <xTaskRemoveFromEventList+0xb4>)
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4a13      	ldr	r2, [pc, #76]	; (8005470 <xTaskRemoveFromEventList+0xb8>)
 8005422:	441a      	add	r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f7fe fdcb 	bl	8003fc6 <vListInsertEnd>
 8005430:	e005      	b.n	800543e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	3318      	adds	r3, #24
 8005436:	4619      	mov	r1, r3
 8005438:	480e      	ldr	r0, [pc, #56]	; (8005474 <xTaskRemoveFromEventList+0xbc>)
 800543a:	f7fe fdc4 	bl	8003fc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005442:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <xTaskRemoveFromEventList+0xc0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	429a      	cmp	r2, r3
 800544a:	d905      	bls.n	8005458 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005450:	4b0a      	ldr	r3, [pc, #40]	; (800547c <xTaskRemoveFromEventList+0xc4>)
 8005452:	2201      	movs	r2, #1
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e001      	b.n	800545c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800545c:	697b      	ldr	r3, [r7, #20]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000eac 	.word	0x20000eac
 800546c:	20000e8c 	.word	0x20000e8c
 8005470:	200009b4 	.word	0x200009b4
 8005474:	20000e44 	.word	0x20000e44
 8005478:	200009b0 	.word	0x200009b0
 800547c:	20000e98 	.word	0x20000e98

08005480 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005488:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <vTaskInternalSetTimeOutState+0x24>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <vTaskInternalSetTimeOutState+0x28>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	605a      	str	r2, [r3, #4]
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	20000e9c 	.word	0x20000e9c
 80054a8:	20000e88 	.word	0x20000e88

080054ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	613b      	str	r3, [r7, #16]
}
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	60fb      	str	r3, [r7, #12]
}
 80054ea:	bf00      	nop
 80054ec:	e7fe      	b.n	80054ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054ee:	f000 fe81 	bl	80061f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054f2:	4b1d      	ldr	r3, [pc, #116]	; (8005568 <xTaskCheckForTimeOut+0xbc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d102      	bne.n	8005512 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800550c:	2300      	movs	r3, #0
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e023      	b.n	800555a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b15      	ldr	r3, [pc, #84]	; (800556c <xTaskCheckForTimeOut+0xc0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d007      	beq.n	800552e <xTaskCheckForTimeOut+0x82>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	429a      	cmp	r2, r3
 8005526:	d302      	bcc.n	800552e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005528:	2301      	movs	r3, #1
 800552a:	61fb      	str	r3, [r7, #28]
 800552c:	e015      	b.n	800555a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	429a      	cmp	r2, r3
 8005536:	d20b      	bcs.n	8005550 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff9b 	bl	8005480 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	e004      	b.n	800555a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005556:	2301      	movs	r3, #1
 8005558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800555a:	f000 fe7b 	bl	8006254 <vPortExitCritical>

	return xReturn;
 800555e:	69fb      	ldr	r3, [r7, #28]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000e88 	.word	0x20000e88
 800556c:	20000e9c 	.word	0x20000e9c

08005570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005574:	4b03      	ldr	r3, [pc, #12]	; (8005584 <vTaskMissedYield+0x14>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]
}
 800557a:	bf00      	nop
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	20000e98 	.word	0x20000e98

08005588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005590:	f000 f852 	bl	8005638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005594:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <prvIdleTask+0x28>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d9f9      	bls.n	8005590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <prvIdleTask+0x2c>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055ac:	e7f0      	b.n	8005590 <prvIdleTask+0x8>
 80055ae:	bf00      	nop
 80055b0:	200009b4 	.word	0x200009b4
 80055b4:	e000ed04 	.word	0xe000ed04

080055b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055be:	2300      	movs	r3, #0
 80055c0:	607b      	str	r3, [r7, #4]
 80055c2:	e00c      	b.n	80055de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4a12      	ldr	r2, [pc, #72]	; (8005618 <prvInitialiseTaskLists+0x60>)
 80055d0:	4413      	add	r3, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fcca 	bl	8003f6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3301      	adds	r3, #1
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b37      	cmp	r3, #55	; 0x37
 80055e2:	d9ef      	bls.n	80055c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055e4:	480d      	ldr	r0, [pc, #52]	; (800561c <prvInitialiseTaskLists+0x64>)
 80055e6:	f7fe fcc1 	bl	8003f6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055ea:	480d      	ldr	r0, [pc, #52]	; (8005620 <prvInitialiseTaskLists+0x68>)
 80055ec:	f7fe fcbe 	bl	8003f6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055f0:	480c      	ldr	r0, [pc, #48]	; (8005624 <prvInitialiseTaskLists+0x6c>)
 80055f2:	f7fe fcbb 	bl	8003f6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055f6:	480c      	ldr	r0, [pc, #48]	; (8005628 <prvInitialiseTaskLists+0x70>)
 80055f8:	f7fe fcb8 	bl	8003f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055fc:	480b      	ldr	r0, [pc, #44]	; (800562c <prvInitialiseTaskLists+0x74>)
 80055fe:	f7fe fcb5 	bl	8003f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <prvInitialiseTaskLists+0x78>)
 8005604:	4a05      	ldr	r2, [pc, #20]	; (800561c <prvInitialiseTaskLists+0x64>)
 8005606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <prvInitialiseTaskLists+0x7c>)
 800560a:	4a05      	ldr	r2, [pc, #20]	; (8005620 <prvInitialiseTaskLists+0x68>)
 800560c:	601a      	str	r2, [r3, #0]
}
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	200009b4 	.word	0x200009b4
 800561c:	20000e14 	.word	0x20000e14
 8005620:	20000e28 	.word	0x20000e28
 8005624:	20000e44 	.word	0x20000e44
 8005628:	20000e58 	.word	0x20000e58
 800562c:	20000e70 	.word	0x20000e70
 8005630:	20000e3c 	.word	0x20000e3c
 8005634:	20000e40 	.word	0x20000e40

08005638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800563e:	e019      	b.n	8005674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005640:	f000 fdd8 	bl	80061f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005644:	4b10      	ldr	r3, [pc, #64]	; (8005688 <prvCheckTasksWaitingTermination+0x50>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	4618      	mov	r0, r3
 8005652:	f7fe fd15 	bl	8004080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <prvCheckTasksWaitingTermination+0x54>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3b01      	subs	r3, #1
 800565c:	4a0b      	ldr	r2, [pc, #44]	; (800568c <prvCheckTasksWaitingTermination+0x54>)
 800565e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <prvCheckTasksWaitingTermination+0x58>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3b01      	subs	r3, #1
 8005666:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <prvCheckTasksWaitingTermination+0x58>)
 8005668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800566a:	f000 fdf3 	bl	8006254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f810 	bl	8005694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005674:	4b06      	ldr	r3, [pc, #24]	; (8005690 <prvCheckTasksWaitingTermination+0x58>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e1      	bne.n	8005640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800567c:	bf00      	nop
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000e58 	.word	0x20000e58
 800568c:	20000e84 	.word	0x20000e84
 8005690:	20000e6c 	.word	0x20000e6c

08005694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3354      	adds	r3, #84	; 0x54
 80056a0:	4618      	mov	r0, r3
 80056a2:	f001 f8fd 	bl	80068a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d108      	bne.n	80056c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 ff8b 	bl	80065d0 <vPortFree>
				vPortFree( pxTCB );
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 ff88 	bl	80065d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056c0:	e018      	b.n	80056f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d103      	bne.n	80056d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 ff7f 	bl	80065d0 <vPortFree>
	}
 80056d2:	e00f      	b.n	80056f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d00a      	beq.n	80056f4 <prvDeleteTCB+0x60>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	60fb      	str	r3, [r7, #12]
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <prvDeleteTCB+0x5e>
	}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005702:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <prvResetNextTaskUnblockTime+0x38>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <prvResetNextTaskUnblockTime+0x3c>)
 800570e:	f04f 32ff 	mov.w	r2, #4294967295
 8005712:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005714:	e008      	b.n	8005728 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <prvResetNextTaskUnblockTime+0x38>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	4a04      	ldr	r2, [pc, #16]	; (8005738 <prvResetNextTaskUnblockTime+0x3c>)
 8005726:	6013      	str	r3, [r2, #0]
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	20000e3c 	.word	0x20000e3c
 8005738:	20000ea4 	.word	0x20000ea4

0800573c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005742:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <xTaskGetSchedulerState+0x34>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800574a:	2301      	movs	r3, #1
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	e008      	b.n	8005762 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005750:	4b08      	ldr	r3, [pc, #32]	; (8005774 <xTaskGetSchedulerState+0x38>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005758:	2302      	movs	r3, #2
 800575a:	607b      	str	r3, [r7, #4]
 800575c:	e001      	b.n	8005762 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800575e:	2300      	movs	r3, #0
 8005760:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005762:	687b      	ldr	r3, [r7, #4]
	}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	20000e90 	.word	0x20000e90
 8005774:	20000eac 	.word	0x20000eac

08005778 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d056      	beq.n	800583c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800578e:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <xTaskPriorityDisinherit+0xd0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	429a      	cmp	r2, r3
 8005796:	d00a      	beq.n	80057ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	60fb      	str	r3, [r7, #12]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	60bb      	str	r3, [r7, #8]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d0:	1e5a      	subs	r2, r3, #1
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057de:	429a      	cmp	r2, r3
 80057e0:	d02c      	beq.n	800583c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d128      	bne.n	800583c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fc46 	bl	8004080 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580c:	4b0f      	ldr	r3, [pc, #60]	; (800584c <xTaskPriorityDisinherit+0xd4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d903      	bls.n	800581c <xTaskPriorityDisinherit+0xa4>
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	4a0c      	ldr	r2, [pc, #48]	; (800584c <xTaskPriorityDisinherit+0xd4>)
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4a09      	ldr	r2, [pc, #36]	; (8005850 <xTaskPriorityDisinherit+0xd8>)
 800582a:	441a      	add	r2, r3
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f7fe fbc7 	bl	8003fc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005838:	2301      	movs	r3, #1
 800583a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800583c:	697b      	ldr	r3, [r7, #20]
	}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	200009b0 	.word	0x200009b0
 800584c:	20000e8c 	.word	0x20000e8c
 8005850:	200009b4 	.word	0x200009b4

08005854 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800585e:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005864:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3304      	adds	r3, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe fc08 	bl	8004080 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d10a      	bne.n	800588e <prvAddCurrentTaskToDelayedList+0x3a>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800587e:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3304      	adds	r3, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4819      	ldr	r0, [pc, #100]	; (80058ec <prvAddCurrentTaskToDelayedList+0x98>)
 8005888:	f7fe fb9d 	bl	8003fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800588c:	e026      	b.n	80058dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4413      	add	r3, r2
 8005894:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005896:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d209      	bcs.n	80058ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f7fe fbab 	bl	800400e <vListInsert>
}
 80058b8:	e010      	b.n	80058dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ba:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f7fe fba1 	bl	800400e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d202      	bcs.n	80058dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058d6:	4a08      	ldr	r2, [pc, #32]	; (80058f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000e88 	.word	0x20000e88
 80058e8:	200009b0 	.word	0x200009b0
 80058ec:	20000e70 	.word	0x20000e70
 80058f0:	20000e40 	.word	0x20000e40
 80058f4:	20000e3c 	.word	0x20000e3c
 80058f8:	20000ea4 	.word	0x20000ea4

080058fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005906:	f000 fb07 	bl	8005f18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800590a:	4b1c      	ldr	r3, [pc, #112]	; (800597c <xTimerCreateTimerTask+0x80>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d021      	beq.n	8005956 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800591a:	1d3a      	adds	r2, r7, #4
 800591c:	f107 0108 	add.w	r1, r7, #8
 8005920:	f107 030c 	add.w	r3, r7, #12
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe fb07 	bl	8003f38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	9202      	str	r2, [sp, #8]
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	2302      	movs	r3, #2
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	2300      	movs	r3, #0
 800593a:	460a      	mov	r2, r1
 800593c:	4910      	ldr	r1, [pc, #64]	; (8005980 <xTimerCreateTimerTask+0x84>)
 800593e:	4811      	ldr	r0, [pc, #68]	; (8005984 <xTimerCreateTimerTask+0x88>)
 8005940:	f7ff f8b4 	bl	8004aac <xTaskCreateStatic>
 8005944:	4603      	mov	r3, r0
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <xTimerCreateTimerTask+0x8c>)
 8005948:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800594a:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <xTimerCreateTimerTask+0x8c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005952:	2301      	movs	r3, #1
 8005954:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	613b      	str	r3, [r7, #16]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005972:	697b      	ldr	r3, [r7, #20]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000ee0 	.word	0x20000ee0
 8005980:	08006a58 	.word	0x08006a58
 8005984:	08005ac1 	.word	0x08005ac1
 8005988:	20000ee4 	.word	0x20000ee4

0800598c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800599a:	2300      	movs	r3, #0
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	623b      	str	r3, [r7, #32]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059ba:	4b1a      	ldr	r3, [pc, #104]	; (8005a24 <xTimerGenericCommand+0x98>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d02a      	beq.n	8005a18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b05      	cmp	r3, #5
 80059d2:	dc18      	bgt.n	8005a06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059d4:	f7ff feb2 	bl	800573c <xTaskGetSchedulerState>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d109      	bne.n	80059f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059de:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <xTimerGenericCommand+0x98>)
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	f107 0110 	add.w	r1, r7, #16
 80059e6:	2300      	movs	r3, #0
 80059e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ea:	f7fe fc77 	bl	80042dc <xQueueGenericSend>
 80059ee:	6278      	str	r0, [r7, #36]	; 0x24
 80059f0:	e012      	b.n	8005a18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <xTimerGenericCommand+0x98>)
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	f107 0110 	add.w	r1, r7, #16
 80059fa:	2300      	movs	r3, #0
 80059fc:	2200      	movs	r2, #0
 80059fe:	f7fe fc6d 	bl	80042dc <xQueueGenericSend>
 8005a02:	6278      	str	r0, [r7, #36]	; 0x24
 8005a04:	e008      	b.n	8005a18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a06:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <xTimerGenericCommand+0x98>)
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	f107 0110 	add.w	r1, r7, #16
 8005a0e:	2300      	movs	r3, #0
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	f7fe fd61 	bl	80044d8 <xQueueGenericSendFromISR>
 8005a16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3728      	adds	r7, #40	; 0x28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000ee0 	.word	0x20000ee0

08005a28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a32:	4b22      	ldr	r3, [pc, #136]	; (8005abc <prvProcessExpiredTimer+0x94>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fe fb1d 	bl	8004080 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d022      	beq.n	8005a9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	699a      	ldr	r2, [r3, #24]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	18d1      	adds	r1, r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	6978      	ldr	r0, [r7, #20]
 8005a62:	f000 f8d1 	bl	8005c08 <prvInsertTimerInActiveList>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01f      	beq.n	8005aac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	2300      	movs	r3, #0
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	2100      	movs	r1, #0
 8005a76:	6978      	ldr	r0, [r7, #20]
 8005a78:	f7ff ff88 	bl	800598c <xTimerGenericCommand>
 8005a7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d113      	bne.n	8005aac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	60fb      	str	r3, [r7, #12]
}
 8005a96:	bf00      	nop
 8005a98:	e7fe      	b.n	8005a98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	6978      	ldr	r0, [r7, #20]
 8005ab2:	4798      	blx	r3
}
 8005ab4:	bf00      	nop
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000ed8 	.word	0x20000ed8

08005ac0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ac8:	f107 0308 	add.w	r3, r7, #8
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f857 	bl	8005b80 <prvGetNextExpireTime>
 8005ad2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f803 	bl	8005ae4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ade:	f000 f8d5 	bl	8005c8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ae2:	e7f1      	b.n	8005ac8 <prvTimerTask+0x8>

08005ae4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005aee:	f7ff fa39 	bl	8004f64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005af2:	f107 0308 	add.w	r3, r7, #8
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f866 	bl	8005bc8 <prvSampleTimeNow>
 8005afc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d130      	bne.n	8005b66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <prvProcessTimerOrBlockTask+0x3c>
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d806      	bhi.n	8005b20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b12:	f7ff fa35 	bl	8004f80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b16:	68f9      	ldr	r1, [r7, #12]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff ff85 	bl	8005a28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b1e:	e024      	b.n	8005b6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d008      	beq.n	8005b38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b26:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <prvProcessTimerOrBlockTask+0x90>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <prvProcessTimerOrBlockTask+0x50>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <prvProcessTimerOrBlockTask+0x52>
 8005b34:	2300      	movs	r3, #0
 8005b36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <prvProcessTimerOrBlockTask+0x94>)
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	4619      	mov	r1, r3
 8005b46:	f7fe ff7d 	bl	8004a44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b4a:	f7ff fa19 	bl	8004f80 <xTaskResumeAll>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b54:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <prvProcessTimerOrBlockTask+0x98>)
 8005b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	f3bf 8f6f 	isb	sy
}
 8005b64:	e001      	b.n	8005b6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b66:	f7ff fa0b 	bl	8004f80 <xTaskResumeAll>
}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000edc 	.word	0x20000edc
 8005b78:	20000ee0 	.word	0x20000ee0
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <prvGetNextExpireTime+0x44>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <prvGetNextExpireTime+0x16>
 8005b92:	2201      	movs	r2, #1
 8005b94:	e000      	b.n	8005b98 <prvGetNextExpireTime+0x18>
 8005b96:	2200      	movs	r2, #0
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ba4:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <prvGetNextExpireTime+0x44>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e001      	b.n	8005bb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000ed8 	.word	0x20000ed8

08005bc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bd0:	f7ff fa74 	bl	80050bc <xTaskGetTickCount>
 8005bd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <prvSampleTimeNow+0x3c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d205      	bcs.n	8005bec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005be0:	f000 f936 	bl	8005e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e002      	b.n	8005bf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bf2:	4a04      	ldr	r2, [pc, #16]	; (8005c04 <prvSampleTimeNow+0x3c>)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000ee8 	.word	0x20000ee8

08005c08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d812      	bhi.n	8005c54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	1ad2      	subs	r2, r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d302      	bcc.n	8005c42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e01b      	b.n	8005c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c42:	4b10      	ldr	r3, [pc, #64]	; (8005c84 <prvInsertTimerInActiveList+0x7c>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f7fe f9de 	bl	800400e <vListInsert>
 8005c52:	e012      	b.n	8005c7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d206      	bcs.n	8005c6a <prvInsertTimerInActiveList+0x62>
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d302      	bcc.n	8005c6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c64:	2301      	movs	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e007      	b.n	8005c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c6a:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <prvInsertTimerInActiveList+0x80>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3304      	adds	r3, #4
 8005c72:	4619      	mov	r1, r3
 8005c74:	4610      	mov	r0, r2
 8005c76:	f7fe f9ca 	bl	800400e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c7a:	697b      	ldr	r3, [r7, #20]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000edc 	.word	0x20000edc
 8005c88:	20000ed8 	.word	0x20000ed8

08005c8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08e      	sub	sp, #56	; 0x38
 8005c90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c92:	e0ca      	b.n	8005e2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da18      	bge.n	8005ccc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	61fb      	str	r3, [r7, #28]
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc2:	6850      	ldr	r0, [r2, #4]
 8005cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc6:	6892      	ldr	r2, [r2, #8]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f2c0 80aa 	blt.w	8005e28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fe f9cb 	bl	8004080 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cea:	463b      	mov	r3, r7
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff ff6b 	bl	8005bc8 <prvSampleTimeNow>
 8005cf2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b09      	cmp	r3, #9
 8005cf8:	f200 8097 	bhi.w	8005e2a <prvProcessReceivedCommands+0x19e>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <prvProcessReceivedCommands+0x78>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08005da1 	.word	0x08005da1
 8005d14:	08005db5 	.word	0x08005db5
 8005d18:	08005dff 	.word	0x08005dff
 8005d1c:	08005d2d 	.word	0x08005d2d
 8005d20:	08005d2d 	.word	0x08005d2d
 8005d24:	08005da1 	.word	0x08005da1
 8005d28:	08005db5 	.word	0x08005db5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	18d1      	adds	r1, r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4c:	f7ff ff5c 	bl	8005c08 <prvInsertTimerInActiveList>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d069      	beq.n	8005e2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d05e      	beq.n	8005e2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	441a      	add	r2, r3
 8005d74:	2300      	movs	r3, #0
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d7e:	f7ff fe05 	bl	800598c <xTimerGenericCommand>
 8005d82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d14f      	bne.n	8005e2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	61bb      	str	r3, [r7, #24]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005db2:	e03a      	b.n	8005e2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	617b      	str	r3, [r7, #20]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	18d1      	adds	r1, r2, r3
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df8:	f7ff ff06 	bl	8005c08 <prvInsertTimerInActiveList>
					break;
 8005dfc:	e015      	b.n	8005e2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d103      	bne.n	8005e14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e0e:	f000 fbdf 	bl	80065d0 <vPortFree>
 8005e12:	e00a      	b.n	8005e2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e26:	e000      	b.n	8005e2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e2a:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <prvProcessReceivedCommands+0x1c0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	1d39      	adds	r1, r7, #4
 8005e30:	2200      	movs	r2, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe fbec 	bl	8004610 <xQueueReceive>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f47f af2a 	bne.w	8005c94 <prvProcessReceivedCommands+0x8>
	}
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	3730      	adds	r7, #48	; 0x30
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000ee0 	.word	0x20000ee0

08005e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e56:	e048      	b.n	8005eea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e58:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e62:	4b2b      	ldr	r3, [pc, #172]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe f905 	bl	8004080 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02e      	beq.n	8005eea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4413      	add	r3, r2
 8005e94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d90e      	bls.n	8005ebc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eaa:	4b19      	ldr	r3, [pc, #100]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	f7fe f8aa 	bl	800400e <vListInsert>
 8005eba:	e016      	b.n	8005eea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff fd60 	bl	800598c <xTimerGenericCommand>
 8005ecc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	603b      	str	r3, [r7, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	e7fe      	b.n	8005ee8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1b1      	bne.n	8005e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <prvSwitchTimerLists+0xc4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005f00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f02:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <prvSwitchTimerLists+0xc4>)
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	6013      	str	r3, [r2, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000ed8 	.word	0x20000ed8
 8005f14:	20000edc 	.word	0x20000edc

08005f18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f1e:	f000 f969 	bl	80061f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f22:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <prvCheckForValidListAndQueue+0x60>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d120      	bne.n	8005f6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f2a:	4814      	ldr	r0, [pc, #80]	; (8005f7c <prvCheckForValidListAndQueue+0x64>)
 8005f2c:	f7fe f81e 	bl	8003f6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f30:	4813      	ldr	r0, [pc, #76]	; (8005f80 <prvCheckForValidListAndQueue+0x68>)
 8005f32:	f7fe f81b 	bl	8003f6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <prvCheckForValidListAndQueue+0x6c>)
 8005f38:	4a10      	ldr	r2, [pc, #64]	; (8005f7c <prvCheckForValidListAndQueue+0x64>)
 8005f3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f3c:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <prvCheckForValidListAndQueue+0x70>)
 8005f3e:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <prvCheckForValidListAndQueue+0x68>)
 8005f40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f42:	2300      	movs	r3, #0
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <prvCheckForValidListAndQueue+0x74>)
 8005f48:	4a11      	ldr	r2, [pc, #68]	; (8005f90 <prvCheckForValidListAndQueue+0x78>)
 8005f4a:	2110      	movs	r1, #16
 8005f4c:	200a      	movs	r0, #10
 8005f4e:	f7fe f929 	bl	80041a4 <xQueueGenericCreateStatic>
 8005f52:	4603      	mov	r3, r0
 8005f54:	4a08      	ldr	r2, [pc, #32]	; (8005f78 <prvCheckForValidListAndQueue+0x60>)
 8005f56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <prvCheckForValidListAndQueue+0x60>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <prvCheckForValidListAndQueue+0x60>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	490b      	ldr	r1, [pc, #44]	; (8005f94 <prvCheckForValidListAndQueue+0x7c>)
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fe fd42 	bl	80049f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f6c:	f000 f972 	bl	8006254 <vPortExitCritical>
}
 8005f70:	bf00      	nop
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000ee0 	.word	0x20000ee0
 8005f7c:	20000eb0 	.word	0x20000eb0
 8005f80:	20000ec4 	.word	0x20000ec4
 8005f84:	20000ed8 	.word	0x20000ed8
 8005f88:	20000edc 	.word	0x20000edc
 8005f8c:	20000f8c 	.word	0x20000f8c
 8005f90:	20000eec 	.word	0x20000eec
 8005f94:	08006a60 	.word	0x08006a60

08005f98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3b04      	subs	r3, #4
 8005fa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3b04      	subs	r3, #4
 8005fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f023 0201 	bic.w	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3b04      	subs	r3, #4
 8005fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fc8:	4a0c      	ldr	r2, [pc, #48]	; (8005ffc <pxPortInitialiseStack+0x64>)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3b14      	subs	r3, #20
 8005fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3b04      	subs	r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f06f 0202 	mvn.w	r2, #2
 8005fe6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3b20      	subs	r3, #32
 8005fec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	08006001 	.word	0x08006001

08006000 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800600a:	4b12      	ldr	r3, [pc, #72]	; (8006054 <prvTaskExitError+0x54>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d00a      	beq.n	800602a <prvTaskExitError+0x2a>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	60fb      	str	r3, [r7, #12]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <prvTaskExitError+0x28>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	60bb      	str	r3, [r7, #8]
}
 800603c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800603e:	bf00      	nop
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0fc      	beq.n	8006040 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	20000010 	.word	0x20000010
	...

08006060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <pxCurrentTCBConst2>)
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	6808      	ldr	r0, [r1, #0]
 8006066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	f380 8809 	msr	PSP, r0
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f04f 0000 	mov.w	r0, #0
 8006076:	f380 8811 	msr	BASEPRI, r0
 800607a:	4770      	bx	lr
 800607c:	f3af 8000 	nop.w

08006080 <pxCurrentTCBConst2>:
 8006080:	200009b0 	.word	0x200009b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006088:	4808      	ldr	r0, [pc, #32]	; (80060ac <prvPortStartFirstTask+0x24>)
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	6800      	ldr	r0, [r0, #0]
 800608e:	f380 8808 	msr	MSP, r0
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8814 	msr	CONTROL, r0
 800609a:	b662      	cpsie	i
 800609c:	b661      	cpsie	f
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	df00      	svc	0
 80060a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060aa:	bf00      	nop
 80060ac:	e000ed08 	.word	0xe000ed08

080060b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060b6:	4b46      	ldr	r3, [pc, #280]	; (80061d0 <xPortStartScheduler+0x120>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a46      	ldr	r2, [pc, #280]	; (80061d4 <xPortStartScheduler+0x124>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10a      	bne.n	80060d6 <xPortStartScheduler+0x26>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	613b      	str	r3, [r7, #16]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060d6:	4b3e      	ldr	r3, [pc, #248]	; (80061d0 <xPortStartScheduler+0x120>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <xPortStartScheduler+0x128>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d10a      	bne.n	80060f6 <xPortStartScheduler+0x46>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060f6:	4b39      	ldr	r3, [pc, #228]	; (80061dc <xPortStartScheduler+0x12c>)
 80060f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	22ff      	movs	r2, #255	; 0xff
 8006106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006118:	b2da      	uxtb	r2, r3
 800611a:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <xPortStartScheduler+0x130>)
 800611c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800611e:	4b31      	ldr	r3, [pc, #196]	; (80061e4 <xPortStartScheduler+0x134>)
 8006120:	2207      	movs	r2, #7
 8006122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006124:	e009      	b.n	800613a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006126:	4b2f      	ldr	r3, [pc, #188]	; (80061e4 <xPortStartScheduler+0x134>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3b01      	subs	r3, #1
 800612c:	4a2d      	ldr	r2, [pc, #180]	; (80061e4 <xPortStartScheduler+0x134>)
 800612e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	b2db      	uxtb	r3, r3
 8006138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b80      	cmp	r3, #128	; 0x80
 8006144:	d0ef      	beq.n	8006126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006146:	4b27      	ldr	r3, [pc, #156]	; (80061e4 <xPortStartScheduler+0x134>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1c3 0307 	rsb	r3, r3, #7
 800614e:	2b04      	cmp	r3, #4
 8006150:	d00a      	beq.n	8006168 <xPortStartScheduler+0xb8>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60bb      	str	r3, [r7, #8]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006168:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <xPortStartScheduler+0x134>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <xPortStartScheduler+0x134>)
 8006170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006172:	4b1c      	ldr	r3, [pc, #112]	; (80061e4 <xPortStartScheduler+0x134>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800617a:	4a1a      	ldr	r2, [pc, #104]	; (80061e4 <xPortStartScheduler+0x134>)
 800617c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006186:	4b18      	ldr	r3, [pc, #96]	; (80061e8 <xPortStartScheduler+0x138>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <xPortStartScheduler+0x138>)
 800618c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <xPortStartScheduler+0x138>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <xPortStartScheduler+0x138>)
 8006198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800619c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800619e:	f000 f8dd 	bl	800635c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061a2:	4b12      	ldr	r3, [pc, #72]	; (80061ec <xPortStartScheduler+0x13c>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061a8:	f000 f8fc 	bl	80063a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061ac:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <xPortStartScheduler+0x140>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0f      	ldr	r2, [pc, #60]	; (80061f0 <xPortStartScheduler+0x140>)
 80061b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061b8:	f7ff ff66 	bl	8006088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061bc:	f7ff f848 	bl	8005250 <vTaskSwitchContext>
	prvTaskExitError();
 80061c0:	f7ff ff1e 	bl	8006000 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	e000ed00 	.word	0xe000ed00
 80061d4:	410fc271 	.word	0x410fc271
 80061d8:	410fc270 	.word	0x410fc270
 80061dc:	e000e400 	.word	0xe000e400
 80061e0:	20000fdc 	.word	0x20000fdc
 80061e4:	20000fe0 	.word	0x20000fe0
 80061e8:	e000ed20 	.word	0xe000ed20
 80061ec:	20000010 	.word	0x20000010
 80061f0:	e000ef34 	.word	0xe000ef34

080061f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	607b      	str	r3, [r7, #4]
}
 800620c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <vPortEnterCritical+0x58>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3301      	adds	r3, #1
 8006214:	4a0d      	ldr	r2, [pc, #52]	; (800624c <vPortEnterCritical+0x58>)
 8006216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006218:	4b0c      	ldr	r3, [pc, #48]	; (800624c <vPortEnterCritical+0x58>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d10f      	bne.n	8006240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <vPortEnterCritical+0x5c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <vPortEnterCritical+0x4c>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	603b      	str	r3, [r7, #0]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <vPortEnterCritical+0x4a>
	}
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	20000010 	.word	0x20000010
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <vPortExitCritical+0x50>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <vPortExitCritical+0x24>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	607b      	str	r3, [r7, #4]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006278:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <vPortExitCritical+0x50>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3b01      	subs	r3, #1
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <vPortExitCritical+0x50>)
 8006280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006282:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <vPortExitCritical+0x50>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d105      	bne.n	8006296 <vPortExitCritical+0x42>
 800628a:	2300      	movs	r3, #0
 800628c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	f383 8811 	msr	BASEPRI, r3
}
 8006294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000010 	.word	0x20000010
	...

080062b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062b0:	f3ef 8009 	mrs	r0, PSP
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <pxCurrentTCBConst>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f01e 0f10 	tst.w	lr, #16
 80062c0:	bf08      	it	eq
 80062c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	6010      	str	r0, [r2, #0]
 80062cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062d4:	f380 8811 	msr	BASEPRI, r0
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f7fe ffb6 	bl	8005250 <vTaskSwitchContext>
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	f380 8811 	msr	BASEPRI, r0
 80062ec:	bc09      	pop	{r0, r3}
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	6808      	ldr	r0, [r1, #0]
 80062f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f6:	f01e 0f10 	tst.w	lr, #16
 80062fa:	bf08      	it	eq
 80062fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006300:	f380 8809 	msr	PSP, r0
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst>:
 8006310:	200009b0 	.word	0x200009b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
}
 8006330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006332:	f7fe fed3 	bl	80050dc <xTaskIncrementTick>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <xPortSysTickHandler+0x40>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
}
 800634e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <vPortSetupTimerInterrupt+0x34>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <vPortSetupTimerInterrupt+0x38>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <vPortSetupTimerInterrupt+0x3c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a0a      	ldr	r2, [pc, #40]	; (800639c <vPortSetupTimerInterrupt+0x40>)
 8006372:	fba2 2303 	umull	r2, r3, r2, r3
 8006376:	099b      	lsrs	r3, r3, #6
 8006378:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <vPortSetupTimerInterrupt+0x44>)
 800637a:	3b01      	subs	r3, #1
 800637c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800637e:	4b04      	ldr	r3, [pc, #16]	; (8006390 <vPortSetupTimerInterrupt+0x34>)
 8006380:	2207      	movs	r2, #7
 8006382:	601a      	str	r2, [r3, #0]
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	e000e010 	.word	0xe000e010
 8006394:	e000e018 	.word	0xe000e018
 8006398:	20000004 	.word	0x20000004
 800639c:	10624dd3 	.word	0x10624dd3
 80063a0:	e000e014 	.word	0xe000e014

080063a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063b4 <vPortEnableVFP+0x10>
 80063a8:	6801      	ldr	r1, [r0, #0]
 80063aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063ae:	6001      	str	r1, [r0, #0]
 80063b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063b2:	bf00      	nop
 80063b4:	e000ed88 	.word	0xe000ed88

080063b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d914      	bls.n	80063f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063ca:	4a17      	ldr	r2, [pc, #92]	; (8006428 <vPortValidateInterruptPriority+0x70>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063d4:	4b15      	ldr	r3, [pc, #84]	; (800642c <vPortValidateInterruptPriority+0x74>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	7afa      	ldrb	r2, [r7, #11]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d20a      	bcs.n	80063f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <vPortValidateInterruptPriority+0x78>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <vPortValidateInterruptPriority+0x7c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d90a      	bls.n	800641a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	603b      	str	r3, [r7, #0]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <vPortValidateInterruptPriority+0x60>
	}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	e000e3f0 	.word	0xe000e3f0
 800642c:	20000fdc 	.word	0x20000fdc
 8006430:	e000ed0c 	.word	0xe000ed0c
 8006434:	20000fe0 	.word	0x20000fe0

08006438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006444:	f7fe fd8e 	bl	8004f64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006448:	4b5b      	ldr	r3, [pc, #364]	; (80065b8 <pvPortMalloc+0x180>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006450:	f000 f920 	bl	8006694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006454:	4b59      	ldr	r3, [pc, #356]	; (80065bc <pvPortMalloc+0x184>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	f040 8093 	bne.w	8006588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01d      	beq.n	80064a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006468:	2208      	movs	r2, #8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d014      	beq.n	80064a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f023 0307 	bic.w	r3, r3, #7
 8006480:	3308      	adds	r3, #8
 8006482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <pvPortMalloc+0x6c>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	617b      	str	r3, [r7, #20]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d06e      	beq.n	8006588 <pvPortMalloc+0x150>
 80064aa:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <pvPortMalloc+0x188>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d869      	bhi.n	8006588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064b4:	4b43      	ldr	r3, [pc, #268]	; (80065c4 <pvPortMalloc+0x18c>)
 80064b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064b8:	4b42      	ldr	r3, [pc, #264]	; (80065c4 <pvPortMalloc+0x18c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064be:	e004      	b.n	80064ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d903      	bls.n	80064dc <pvPortMalloc+0xa4>
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f1      	bne.n	80064c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064dc:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <pvPortMalloc+0x180>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d050      	beq.n	8006588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2208      	movs	r2, #8
 80064ec:	4413      	add	r3, r2
 80064ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	1ad2      	subs	r2, r2, r3
 8006500:	2308      	movs	r3, #8
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	429a      	cmp	r2, r3
 8006506:	d91f      	bls.n	8006548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <pvPortMalloc+0xf8>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	613b      	str	r3, [r7, #16]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	1ad2      	subs	r2, r2, r3
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006542:	69b8      	ldr	r0, [r7, #24]
 8006544:	f000 f908 	bl	8006758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <pvPortMalloc+0x188>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <pvPortMalloc+0x188>)
 8006554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006556:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <pvPortMalloc+0x188>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <pvPortMalloc+0x190>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d203      	bcs.n	800656a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006562:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <pvPortMalloc+0x188>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <pvPortMalloc+0x190>)
 8006568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <pvPortMalloc+0x184>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	431a      	orrs	r2, r3
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <pvPortMalloc+0x194>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3301      	adds	r3, #1
 8006584:	4a11      	ldr	r2, [pc, #68]	; (80065cc <pvPortMalloc+0x194>)
 8006586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006588:	f7fe fcfa 	bl	8004f80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <pvPortMalloc+0x174>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60fb      	str	r3, [r7, #12]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <pvPortMalloc+0x172>
	return pvReturn;
 80065ac:	69fb      	ldr	r3, [r7, #28]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3728      	adds	r7, #40	; 0x28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20004bec 	.word	0x20004bec
 80065bc:	20004c00 	.word	0x20004c00
 80065c0:	20004bf0 	.word	0x20004bf0
 80065c4:	20004be4 	.word	0x20004be4
 80065c8:	20004bf4 	.word	0x20004bf4
 80065cc:	20004bf8 	.word	0x20004bf8

080065d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d04d      	beq.n	800667e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065e2:	2308      	movs	r3, #8
 80065e4:	425b      	negs	r3, r3
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	4b24      	ldr	r3, [pc, #144]	; (8006688 <vPortFree+0xb8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10a      	bne.n	8006614 <vPortFree+0x44>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	60fb      	str	r3, [r7, #12]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <vPortFree+0x62>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60bb      	str	r3, [r7, #8]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <vPortFree+0xb8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01e      	beq.n	800667e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11a      	bne.n	800667e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <vPortFree+0xb8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	43db      	mvns	r3, r3
 8006652:	401a      	ands	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006658:	f7fe fc84 	bl	8004f64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <vPortFree+0xbc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4413      	add	r3, r2
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <vPortFree+0xbc>)
 8006668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f000 f874 	bl	8006758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <vPortFree+0xc0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	4a06      	ldr	r2, [pc, #24]	; (8006690 <vPortFree+0xc0>)
 8006678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800667a:	f7fe fc81 	bl	8004f80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20004c00 	.word	0x20004c00
 800668c:	20004bf0 	.word	0x20004bf0
 8006690:	20004bfc 	.word	0x20004bfc

08006694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800669a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800669e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066a0:	4b27      	ldr	r3, [pc, #156]	; (8006740 <prvHeapInit+0xac>)
 80066a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3307      	adds	r3, #7
 80066b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0307 	bic.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <prvHeapInit+0xac>)
 80066c4:	4413      	add	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066cc:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <prvHeapInit+0xb0>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <prvHeapInit+0xb0>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066e0:	2208      	movs	r2, #8
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0307 	bic.w	r3, r3, #7
 80066ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a15      	ldr	r2, [pc, #84]	; (8006748 <prvHeapInit+0xb4>)
 80066f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <prvHeapInit+0xb4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066fe:	4b12      	ldr	r3, [pc, #72]	; (8006748 <prvHeapInit+0xb4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006714:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <prvHeapInit+0xb4>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a0a      	ldr	r2, [pc, #40]	; (800674c <prvHeapInit+0xb8>)
 8006722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4a09      	ldr	r2, [pc, #36]	; (8006750 <prvHeapInit+0xbc>)
 800672a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <prvHeapInit+0xc0>)
 800672e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006732:	601a      	str	r2, [r3, #0]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	20000fe4 	.word	0x20000fe4
 8006744:	20004be4 	.word	0x20004be4
 8006748:	20004bec 	.word	0x20004bec
 800674c:	20004bf4 	.word	0x20004bf4
 8006750:	20004bf0 	.word	0x20004bf0
 8006754:	20004c00 	.word	0x20004c00

08006758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006760:	4b28      	ldr	r3, [pc, #160]	; (8006804 <prvInsertBlockIntoFreeList+0xac>)
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e002      	b.n	800676c <prvInsertBlockIntoFreeList+0x14>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	429a      	cmp	r2, r3
 8006774:	d8f7      	bhi.n	8006766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d108      	bne.n	800679a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d118      	bne.n	80067e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <prvInsertBlockIntoFreeList+0xb0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d00d      	beq.n	80067d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	441a      	add	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e008      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <prvInsertBlockIntoFreeList+0xb0>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e003      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d002      	beq.n	80067f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20004be4 	.word	0x20004be4
 8006808:	20004bec 	.word	0x20004bec

0800680c <__libc_init_array>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	4d0d      	ldr	r5, [pc, #52]	; (8006844 <__libc_init_array+0x38>)
 8006810:	4c0d      	ldr	r4, [pc, #52]	; (8006848 <__libc_init_array+0x3c>)
 8006812:	1b64      	subs	r4, r4, r5
 8006814:	10a4      	asrs	r4, r4, #2
 8006816:	2600      	movs	r6, #0
 8006818:	42a6      	cmp	r6, r4
 800681a:	d109      	bne.n	8006830 <__libc_init_array+0x24>
 800681c:	4d0b      	ldr	r5, [pc, #44]	; (800684c <__libc_init_array+0x40>)
 800681e:	4c0c      	ldr	r4, [pc, #48]	; (8006850 <__libc_init_array+0x44>)
 8006820:	f000 f8f2 	bl	8006a08 <_init>
 8006824:	1b64      	subs	r4, r4, r5
 8006826:	10a4      	asrs	r4, r4, #2
 8006828:	2600      	movs	r6, #0
 800682a:	42a6      	cmp	r6, r4
 800682c:	d105      	bne.n	800683a <__libc_init_array+0x2e>
 800682e:	bd70      	pop	{r4, r5, r6, pc}
 8006830:	f855 3b04 	ldr.w	r3, [r5], #4
 8006834:	4798      	blx	r3
 8006836:	3601      	adds	r6, #1
 8006838:	e7ee      	b.n	8006818 <__libc_init_array+0xc>
 800683a:	f855 3b04 	ldr.w	r3, [r5], #4
 800683e:	4798      	blx	r3
 8006840:	3601      	adds	r6, #1
 8006842:	e7f2      	b.n	800682a <__libc_init_array+0x1e>
 8006844:	080082bc 	.word	0x080082bc
 8006848:	080082bc 	.word	0x080082bc
 800684c:	080082bc 	.word	0x080082bc
 8006850:	080082c0 	.word	0x080082c0

08006854 <__retarget_lock_acquire_recursive>:
 8006854:	4770      	bx	lr

08006856 <__retarget_lock_release_recursive>:
 8006856:	4770      	bx	lr

08006858 <memcpy>:
 8006858:	440a      	add	r2, r1
 800685a:	4291      	cmp	r1, r2
 800685c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006860:	d100      	bne.n	8006864 <memcpy+0xc>
 8006862:	4770      	bx	lr
 8006864:	b510      	push	{r4, lr}
 8006866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800686a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800686e:	4291      	cmp	r1, r2
 8006870:	d1f9      	bne.n	8006866 <memcpy+0xe>
 8006872:	bd10      	pop	{r4, pc}

08006874 <memset>:
 8006874:	4402      	add	r2, r0
 8006876:	4603      	mov	r3, r0
 8006878:	4293      	cmp	r3, r2
 800687a:	d100      	bne.n	800687e <memset+0xa>
 800687c:	4770      	bx	lr
 800687e:	f803 1b01 	strb.w	r1, [r3], #1
 8006882:	e7f9      	b.n	8006878 <memset+0x4>

08006884 <cleanup_glue>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	460c      	mov	r4, r1
 8006888:	6809      	ldr	r1, [r1, #0]
 800688a:	4605      	mov	r5, r0
 800688c:	b109      	cbz	r1, 8006892 <cleanup_glue+0xe>
 800688e:	f7ff fff9 	bl	8006884 <cleanup_glue>
 8006892:	4621      	mov	r1, r4
 8006894:	4628      	mov	r0, r5
 8006896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800689a:	f000 b869 	b.w	8006970 <_free_r>
	...

080068a0 <_reclaim_reent>:
 80068a0:	4b2c      	ldr	r3, [pc, #176]	; (8006954 <_reclaim_reent+0xb4>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4283      	cmp	r3, r0
 80068a6:	b570      	push	{r4, r5, r6, lr}
 80068a8:	4604      	mov	r4, r0
 80068aa:	d051      	beq.n	8006950 <_reclaim_reent+0xb0>
 80068ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068ae:	b143      	cbz	r3, 80068c2 <_reclaim_reent+0x22>
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d14a      	bne.n	800694c <_reclaim_reent+0xac>
 80068b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068b8:	6819      	ldr	r1, [r3, #0]
 80068ba:	b111      	cbz	r1, 80068c2 <_reclaim_reent+0x22>
 80068bc:	4620      	mov	r0, r4
 80068be:	f000 f857 	bl	8006970 <_free_r>
 80068c2:	6961      	ldr	r1, [r4, #20]
 80068c4:	b111      	cbz	r1, 80068cc <_reclaim_reent+0x2c>
 80068c6:	4620      	mov	r0, r4
 80068c8:	f000 f852 	bl	8006970 <_free_r>
 80068cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80068ce:	b111      	cbz	r1, 80068d6 <_reclaim_reent+0x36>
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 f84d 	bl	8006970 <_free_r>
 80068d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80068d8:	b111      	cbz	r1, 80068e0 <_reclaim_reent+0x40>
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 f848 	bl	8006970 <_free_r>
 80068e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80068e2:	b111      	cbz	r1, 80068ea <_reclaim_reent+0x4a>
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 f843 	bl	8006970 <_free_r>
 80068ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068ec:	b111      	cbz	r1, 80068f4 <_reclaim_reent+0x54>
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 f83e 	bl	8006970 <_free_r>
 80068f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80068f6:	b111      	cbz	r1, 80068fe <_reclaim_reent+0x5e>
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 f839 	bl	8006970 <_free_r>
 80068fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006900:	b111      	cbz	r1, 8006908 <_reclaim_reent+0x68>
 8006902:	4620      	mov	r0, r4
 8006904:	f000 f834 	bl	8006970 <_free_r>
 8006908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800690a:	b111      	cbz	r1, 8006912 <_reclaim_reent+0x72>
 800690c:	4620      	mov	r0, r4
 800690e:	f000 f82f 	bl	8006970 <_free_r>
 8006912:	69a3      	ldr	r3, [r4, #24]
 8006914:	b1e3      	cbz	r3, 8006950 <_reclaim_reent+0xb0>
 8006916:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006918:	4620      	mov	r0, r4
 800691a:	4798      	blx	r3
 800691c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800691e:	b1b9      	cbz	r1, 8006950 <_reclaim_reent+0xb0>
 8006920:	4620      	mov	r0, r4
 8006922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006926:	f7ff bfad 	b.w	8006884 <cleanup_glue>
 800692a:	5949      	ldr	r1, [r1, r5]
 800692c:	b941      	cbnz	r1, 8006940 <_reclaim_reent+0xa0>
 800692e:	3504      	adds	r5, #4
 8006930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006932:	2d80      	cmp	r5, #128	; 0x80
 8006934:	68d9      	ldr	r1, [r3, #12]
 8006936:	d1f8      	bne.n	800692a <_reclaim_reent+0x8a>
 8006938:	4620      	mov	r0, r4
 800693a:	f000 f819 	bl	8006970 <_free_r>
 800693e:	e7ba      	b.n	80068b6 <_reclaim_reent+0x16>
 8006940:	680e      	ldr	r6, [r1, #0]
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f814 	bl	8006970 <_free_r>
 8006948:	4631      	mov	r1, r6
 800694a:	e7ef      	b.n	800692c <_reclaim_reent+0x8c>
 800694c:	2500      	movs	r5, #0
 800694e:	e7ef      	b.n	8006930 <_reclaim_reent+0x90>
 8006950:	bd70      	pop	{r4, r5, r6, pc}
 8006952:	bf00      	nop
 8006954:	20000014 	.word	0x20000014

08006958 <__malloc_lock>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__malloc_lock+0x8>)
 800695a:	f7ff bf7b 	b.w	8006854 <__retarget_lock_acquire_recursive>
 800695e:	bf00      	nop
 8006960:	20004c04 	.word	0x20004c04

08006964 <__malloc_unlock>:
 8006964:	4801      	ldr	r0, [pc, #4]	; (800696c <__malloc_unlock+0x8>)
 8006966:	f7ff bf76 	b.w	8006856 <__retarget_lock_release_recursive>
 800696a:	bf00      	nop
 800696c:	20004c04 	.word	0x20004c04

08006970 <_free_r>:
 8006970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006972:	2900      	cmp	r1, #0
 8006974:	d044      	beq.n	8006a00 <_free_r+0x90>
 8006976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697a:	9001      	str	r0, [sp, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f1a1 0404 	sub.w	r4, r1, #4
 8006982:	bfb8      	it	lt
 8006984:	18e4      	addlt	r4, r4, r3
 8006986:	f7ff ffe7 	bl	8006958 <__malloc_lock>
 800698a:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <_free_r+0x94>)
 800698c:	9801      	ldr	r0, [sp, #4]
 800698e:	6813      	ldr	r3, [r2, #0]
 8006990:	b933      	cbnz	r3, 80069a0 <_free_r+0x30>
 8006992:	6063      	str	r3, [r4, #4]
 8006994:	6014      	str	r4, [r2, #0]
 8006996:	b003      	add	sp, #12
 8006998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800699c:	f7ff bfe2 	b.w	8006964 <__malloc_unlock>
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d908      	bls.n	80069b6 <_free_r+0x46>
 80069a4:	6825      	ldr	r5, [r4, #0]
 80069a6:	1961      	adds	r1, r4, r5
 80069a8:	428b      	cmp	r3, r1
 80069aa:	bf01      	itttt	eq
 80069ac:	6819      	ldreq	r1, [r3, #0]
 80069ae:	685b      	ldreq	r3, [r3, #4]
 80069b0:	1949      	addeq	r1, r1, r5
 80069b2:	6021      	streq	r1, [r4, #0]
 80069b4:	e7ed      	b.n	8006992 <_free_r+0x22>
 80069b6:	461a      	mov	r2, r3
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	b10b      	cbz	r3, 80069c0 <_free_r+0x50>
 80069bc:	42a3      	cmp	r3, r4
 80069be:	d9fa      	bls.n	80069b6 <_free_r+0x46>
 80069c0:	6811      	ldr	r1, [r2, #0]
 80069c2:	1855      	adds	r5, r2, r1
 80069c4:	42a5      	cmp	r5, r4
 80069c6:	d10b      	bne.n	80069e0 <_free_r+0x70>
 80069c8:	6824      	ldr	r4, [r4, #0]
 80069ca:	4421      	add	r1, r4
 80069cc:	1854      	adds	r4, r2, r1
 80069ce:	42a3      	cmp	r3, r4
 80069d0:	6011      	str	r1, [r2, #0]
 80069d2:	d1e0      	bne.n	8006996 <_free_r+0x26>
 80069d4:	681c      	ldr	r4, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	6053      	str	r3, [r2, #4]
 80069da:	4421      	add	r1, r4
 80069dc:	6011      	str	r1, [r2, #0]
 80069de:	e7da      	b.n	8006996 <_free_r+0x26>
 80069e0:	d902      	bls.n	80069e8 <_free_r+0x78>
 80069e2:	230c      	movs	r3, #12
 80069e4:	6003      	str	r3, [r0, #0]
 80069e6:	e7d6      	b.n	8006996 <_free_r+0x26>
 80069e8:	6825      	ldr	r5, [r4, #0]
 80069ea:	1961      	adds	r1, r4, r5
 80069ec:	428b      	cmp	r3, r1
 80069ee:	bf04      	itt	eq
 80069f0:	6819      	ldreq	r1, [r3, #0]
 80069f2:	685b      	ldreq	r3, [r3, #4]
 80069f4:	6063      	str	r3, [r4, #4]
 80069f6:	bf04      	itt	eq
 80069f8:	1949      	addeq	r1, r1, r5
 80069fa:	6021      	streq	r1, [r4, #0]
 80069fc:	6054      	str	r4, [r2, #4]
 80069fe:	e7ca      	b.n	8006996 <_free_r+0x26>
 8006a00:	b003      	add	sp, #12
 8006a02:	bd30      	pop	{r4, r5, pc}
 8006a04:	20004c08 	.word	0x20004c08

08006a08 <_init>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr

08006a14 <_fini>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr
