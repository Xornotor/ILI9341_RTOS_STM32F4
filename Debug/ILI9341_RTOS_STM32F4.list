
ILI9341_RTOS_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  08006890  08006890  00016890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd4  08006fd4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fdc  08006fdc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b3c  20000078  0800705c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bb4  0800705c  00024bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d43  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000369a  00000000  00000000  00038deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0003c488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0003d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001805f  00000000  00000000  0003ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016981  00000000  00000000  00056dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a8b  00000000  00000000  0006d748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001061d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba0  00000000  00000000  00106224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006878 	.word	0x08006878

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006878 	.word	0x08006878

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ILI9341_DrawHollowRectangleCoord>:
		}
	}
}

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4604      	mov	r4, r0
 80004ec:	4608      	mov	r0, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	461a      	mov	r2, r3
 80004f2:	4623      	mov	r3, r4
 80004f4:	80fb      	strh	r3, [r7, #6]
 80004f6:	4603      	mov	r3, r0
 80004f8:	80bb      	strh	r3, [r7, #4]
 80004fa:	460b      	mov	r3, r1
 80004fc:	807b      	strh	r3, [r7, #2]
 80004fe:	4613      	mov	r3, r2
 8000500:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 8000512:	f04f 0300 	mov.w	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8000518:	887a      	ldrh	r2, [r7, #2]
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	ee07 3a90 	vmov	s15, r3
 8000522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000526:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 800052a:	edd7 7a03 	vldr	s15, [r7, #12]
 800052e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000536:	d501      	bpl.n	800053c <ILI9341_DrawHollowRectangleCoord+0x58>
 8000538:	2301      	movs	r3, #1
 800053a:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 800053c:	f04f 0300 	mov.w	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 8000542:	883a      	ldrh	r2, [r7, #0]
 8000544:	88bb      	ldrh	r3, [r7, #4]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	ee07 3a90 	vmov	s15, r3
 800054c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000550:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 8000554:	edd7 7a03 	vldr	s15, [r7, #12]
 8000558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800055c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000560:	d501      	bpl.n	8000566 <ILI9341_DrawHollowRectangleCoord+0x82>
 8000562:	2301      	movs	r3, #1
 8000564:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 8000566:	7cfb      	ldrb	r3, [r7, #19]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d104      	bne.n	8000576 <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 800056c:	887a      	ldrh	r2, [r7, #2]
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	82fb      	strh	r3, [r7, #22]
 8000574:	e003      	b.n	800057e <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 8000576:	88fa      	ldrh	r2, [r7, #6]
 8000578:	887b      	ldrh	r3, [r7, #2]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 800057e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000580:	8afa      	ldrh	r2, [r7, #22]
 8000582:	88b9      	ldrh	r1, [r7, #4]
 8000584:	88f8      	ldrh	r0, [r7, #6]
 8000586:	f000 fd35 	bl	8000ff4 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 800058a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800058c:	8afa      	ldrh	r2, [r7, #22]
 800058e:	8839      	ldrh	r1, [r7, #0]
 8000590:	88f8      	ldrh	r0, [r7, #6]
 8000592:	f000 fd2f 	bl	8000ff4 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 8000596:	7cbb      	ldrb	r3, [r7, #18]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d104      	bne.n	80005a6 <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 800059c:	883a      	ldrh	r2, [r7, #0]
 800059e:	88bb      	ldrh	r3, [r7, #4]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	82bb      	strh	r3, [r7, #20]
 80005a4:	e003      	b.n	80005ae <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 80005a6:	88ba      	ldrh	r2, [r7, #4]
 80005a8:	883b      	ldrh	r3, [r7, #0]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 80005ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005b0:	8aba      	ldrh	r2, [r7, #20]
 80005b2:	88b9      	ldrh	r1, [r7, #4]
 80005b4:	88f8      	ldrh	r0, [r7, #6]
 80005b6:	f000 fd61 	bl	800107c <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80005ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005bc:	8aba      	ldrh	r2, [r7, #20]
 80005be:	88b9      	ldrh	r1, [r7, #4]
 80005c0:	8878      	ldrh	r0, [r7, #2]
 80005c2:	f000 fd5b 	bl	800107c <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 80005c6:	8afb      	ldrh	r3, [r7, #22]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <ILI9341_DrawHollowRectangleCoord+0xee>
 80005cc:	8abb      	ldrh	r3, [r7, #20]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d005      	beq.n	80005de <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 80005d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80005d4:	8839      	ldrh	r1, [r7, #0]
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fc49 	bl	8000e70 <ILI9341_DrawPixel>
	}
}
 80005de:	bf00      	nop
 80005e0:	371c      	adds	r7, #28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd90      	pop	{r4, r7, pc}

080005e6 <ILI9341_DrawFilledRectangleCoord>:

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80005e6:	b590      	push	{r4, r7, lr}
 80005e8:	b089      	sub	sp, #36	; 0x24
 80005ea:	af02      	add	r7, sp, #8
 80005ec:	4604      	mov	r4, r0
 80005ee:	4608      	mov	r0, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	461a      	mov	r2, r3
 80005f4:	4623      	mov	r3, r4
 80005f6:	80fb      	strh	r3, [r7, #6]
 80005f8:	4603      	mov	r3, r0
 80005fa:	80bb      	strh	r3, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
 8000600:	4613      	mov	r3, r2
 8000602:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8000620:	887a      	ldrh	r2, [r7, #2]
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b00      	cmp	r3, #0
 800062c:	da01      	bge.n	8000632 <ILI9341_DrawFilledRectangleCoord+0x4c>
 800062e:	2301      	movs	r3, #1
 8000630:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8000636:	883a      	ldrh	r2, [r7, #0]
 8000638:	88bb      	ldrh	r3, [r7, #4]
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	da01      	bge.n	8000648 <ILI9341_DrawFilledRectangleCoord+0x62>
 8000644:	2301      	movs	r3, #1
 8000646:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 8000648:	7cfb      	ldrb	r3, [r7, #19]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d106      	bne.n	800065c <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 800064e:	887a      	ldrh	r2, [r7, #2]
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	823b      	strh	r3, [r7, #16]
 800065a:	e005      	b.n	8000668 <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 800065c:	88fa      	ldrh	r2, [r7, #6]
 800065e:	887b      	ldrh	r3, [r7, #2]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 8000668:	7cbb      	ldrb	r3, [r7, #18]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d106      	bne.n	800067c <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 800066e:	883a      	ldrh	r2, [r7, #0]
 8000670:	88bb      	ldrh	r3, [r7, #4]
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 8000676:	88bb      	ldrh	r3, [r7, #4]
 8000678:	81fb      	strh	r3, [r7, #14]
 800067a:	e005      	b.n	8000688 <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 800067c:	88ba      	ldrh	r2, [r7, #4]
 800067e:	883b      	ldrh	r3, [r7, #0]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 8000684:	883b      	ldrh	r3, [r7, #0]
 8000686:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 8000688:	8abc      	ldrh	r4, [r7, #20]
 800068a:	8afa      	ldrh	r2, [r7, #22]
 800068c:	89f9      	ldrh	r1, [r7, #14]
 800068e:	8a38      	ldrh	r0, [r7, #16]
 8000690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	4623      	mov	r3, r4
 8000696:	f000 fc51 	bl	8000f3c <ILI9341_DrawRectangle>
}
 800069a:	bf00      	nop
 800069c:	371c      	adds	r7, #28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd90      	pop	{r4, r7, pc}

080006a2 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80006a2:	b590      	push	{r4, r7, lr}
 80006a4:	b08d      	sub	sp, #52	; 0x34
 80006a6:	af02      	add	r7, sp, #8
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	460b      	mov	r3, r1
 80006b4:	81bb      	strh	r3, [r7, #12]
 80006b6:	4613      	mov	r3, r2
 80006b8:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2b1e      	cmp	r3, #30
 80006be:	d961      	bls.n	8000784 <ILI9341_DrawChar+0xe2>
 80006c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db5d      	blt.n	8000784 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	785b      	ldrb	r3, [r3, #1]
 80006d2:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	789b      	ldrb	r3, [r3, #2]
 80006d8:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	78db      	ldrb	r3, [r3, #3]
 80006de:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	3b20      	subs	r3, #32
 80006e4:	7ffa      	ldrb	r2, [r7, #31]
 80006e6:	fb02 f303 	mul.w	r3, r2, r3
 80006ea:	3304      	adds	r3, #4
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	4413      	add	r3, r2
 80006f0:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80006f2:	7fbb      	ldrb	r3, [r7, #30]
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	7f7b      	ldrb	r3, [r7, #29]
 80006f8:	b29c      	uxth	r4, r3
 80006fa:	88f9      	ldrh	r1, [r7, #6]
 80006fc:	89b8      	ldrh	r0, [r7, #12]
 80006fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	4623      	mov	r3, r4
 8000704:	f000 fc1a 	bl	8000f3c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
 800070c:	e035      	b.n	800077a <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
 8000712:	e02b      	b.n	800076c <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000714:	7f3b      	ldrb	r3, [r7, #28]
 8000716:	6a3a      	ldr	r2, [r7, #32]
 8000718:	fb03 f202 	mul.w	r2, r3, r2
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	10db      	asrs	r3, r3, #3
 8000720:	f003 031f 	and.w	r3, r3, #31
 8000724:	4413      	add	r3, r2
 8000726:	3301      	adds	r3, #1
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	2201      	movs	r2, #1
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800073e:	7dfa      	ldrb	r2, [r7, #23]
 8000740:	7dbb      	ldrb	r3, [r7, #22]
 8000742:	4013      	ands	r3, r2
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00d      	beq.n	8000766 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800074a:	6a3b      	ldr	r3, [r7, #32]
 800074c:	b29a      	uxth	r2, r3
 800074e:	89bb      	ldrh	r3, [r7, #12]
 8000750:	4413      	add	r3, r2
 8000752:	b298      	uxth	r0, r3
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	b29a      	uxth	r2, r3
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	4413      	add	r3, r2
 800075c:	b29b      	uxth	r3, r3
 800075e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fb85 	bl	8000e70 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	3301      	adds	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
 800076c:	7fbb      	ldrb	r3, [r7, #30]
 800076e:	6a3a      	ldr	r2, [r7, #32]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbcf      	blt.n	8000714 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	3301      	adds	r3, #1
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
 800077a:	7f7b      	ldrb	r3, [r7, #29]
 800077c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800077e:	429a      	cmp	r2, r3
 8000780:	dbc5      	blt.n	800070e <ILI9341_DrawChar+0x6c>
 8000782:	e000      	b.n	8000786 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 8000784:	bf00      	nop
			}
		}
	}
}
 8000786:	372c      	adds	r7, #44	; 0x2c
 8000788:	46bd      	mov	sp, r7
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af02      	add	r7, sp, #8
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	4611      	mov	r1, r2
 8000798:	461a      	mov	r2, r3
 800079a:	460b      	mov	r3, r1
 800079c:	80fb      	strh	r3, [r7, #6]
 800079e:	4613      	mov	r3, r2
 80007a0:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	785b      	ldrb	r3, [r3, #1]
 80007ac:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80007ae:	e02d      	b.n	800080c <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	7818      	ldrb	r0, [r3, #0]
 80007b4:	88b9      	ldrh	r1, [r7, #4]
 80007b6:	88fa      	ldrh	r2, [r7, #6]
 80007b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	460b      	mov	r3, r1
 80007c2:	68b9      	ldr	r1, [r7, #8]
 80007c4:	f7ff ff6d 	bl	80006a2 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	3b20      	subs	r3, #32
 80007ce:	7ffa      	ldrb	r2, [r7, #31]
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	3304      	adds	r3, #4
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	4413      	add	r3, r2
 80007da:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	1c9a      	adds	r2, r3, #2
 80007e6:	7fbb      	ldrb	r3, [r7, #30]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	da07      	bge.n	80007fc <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80007ec:	7dfb      	ldrb	r3, [r7, #23]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	4413      	add	r3, r2
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	3302      	adds	r3, #2
 80007f8:	80fb      	strh	r3, [r7, #6]
 80007fa:	e004      	b.n	8000806 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 80007fc:	7fbb      	ldrb	r3, [r7, #30]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	4413      	add	r3, r2
 8000804:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3301      	adds	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
	while (*str)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1cd      	bne.n	80007b0 <ILI9341_DrawText+0x24>
	}
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a06      	ldr	r2, [pc, #24]	; (8000844 <HAL_SPI_TxCpltCallback+0x24>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d104      	bne.n	800083a <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2108      	movs	r1, #8
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <HAL_SPI_TxCpltCallback+0x28>)
 8000836:	f001 fe41 	bl	80024bc <HAL_GPIO_WritePin>
  }
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000094 	.word	0x20000094
 8000848:	40020000 	.word	0x40020000

0800084c <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000856:	bf00      	nop
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <ILI9341_SPI_Tx+0x30>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	2b02      	cmp	r3, #2
 8000864:	d1f8      	bne.n	8000858 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	2201      	movs	r2, #1
 800086a:	4619      	mov	r1, r3
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <ILI9341_SPI_Tx+0x30>)
 800086e:	f002 fcad 	bl	80031cc <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000094 	.word	0x20000094

08000880 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800088c:	bf00      	nop
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <ILI9341_SPI_TxBuffer+0x30>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	2b02      	cmp	r3, #2
 800089a:	d1f8      	bne.n	800088e <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 800089c:	887b      	ldrh	r3, [r7, #2]
 800089e:	461a      	mov	r2, r3
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <ILI9341_SPI_TxBuffer+0x30>)
 80008a4:	f002 fc92 	bl	80031cc <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000094 	.word	0x20000094

080008b4 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80008be:	2200      	movs	r2, #0
 80008c0:	2104      	movs	r1, #4
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <ILI9341_WriteCommand+0x30>)
 80008c4:	f001 fdfa 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80008c8:	2200      	movs	r2, #0
 80008ca:	2108      	movs	r1, #8
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <ILI9341_WriteCommand+0x30>)
 80008ce:	f001 fdf5 	bl	80024bc <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ffb9 	bl	800084c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40020000 	.word	0x40020000

080008e8 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80008f2:	2201      	movs	r2, #1
 80008f4:	2104      	movs	r1, #4
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <ILI9341_WriteData+0x30>)
 80008f8:	f001 fde0 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80008fc:	2200      	movs	r2, #0
 80008fe:	2108      	movs	r1, #8
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <ILI9341_WriteData+0x30>)
 8000902:	f001 fddb 	bl	80024bc <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff9f 	bl	800084c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020000 	.word	0x40020000

0800091c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000928:	2201      	movs	r2, #1
 800092a:	2104      	movs	r1, #4
 800092c:	4808      	ldr	r0, [pc, #32]	; (8000950 <ILI9341_WriteBuffer+0x34>)
 800092e:	f001 fdc5 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000932:	2200      	movs	r2, #0
 8000934:	2108      	movs	r1, #8
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <ILI9341_WriteBuffer+0x34>)
 8000938:	f001 fdc0 	bl	80024bc <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 800093c:	887b      	ldrh	r3, [r7, #2]
 800093e:	4619      	mov	r1, r3
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff9d 	bl	8000880 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40020000 	.word	0x40020000

08000954 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4604      	mov	r4, r0
 800095c:	4608      	mov	r0, r1
 800095e:	4611      	mov	r1, r2
 8000960:	461a      	mov	r2, r3
 8000962:	4623      	mov	r3, r4
 8000964:	80fb      	strh	r3, [r7, #6]
 8000966:	4603      	mov	r3, r0
 8000968:	80bb      	strh	r3, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	807b      	strh	r3, [r7, #2]
 800096e:	4613      	mov	r3, r2
 8000970:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b29b      	uxth	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 800098c:	887b      	ldrh	r3, [r7, #2]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000992:	202a      	movs	r0, #42	; 0x2a
 8000994:	f7ff ff8e 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2104      	movs	r1, #4
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ffbc 	bl	800091c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80009a4:	88bb      	ldrh	r3, [r7, #4]
 80009a6:	0a1b      	lsrs	r3, r3, #8
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80009b4:	883b      	ldrh	r3, [r7, #0]
 80009b6:	0a1b      	lsrs	r3, r3, #8
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80009be:	883b      	ldrh	r3, [r7, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80009c4:	202b      	movs	r0, #43	; 0x2b
 80009c6:	f7ff ff75 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2104      	movs	r1, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffa3 	bl	800091c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80009d6:	202c      	movs	r0, #44	; 0x2c
 80009d8:	f7ff ff6c 	bl	80008b4 <ILI9341_WriteCommand>
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd90      	pop	{r4, r7, pc}

080009e4 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80009e8:	2200      	movs	r2, #0
 80009ea:	2110      	movs	r1, #16
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <ILI9341_Reset+0x3c>)
 80009ee:	f001 fd65 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80009f2:	200a      	movs	r0, #10
 80009f4:	f000 ff68 	bl	80018c8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80009f8:	2200      	movs	r2, #0
 80009fa:	2108      	movs	r1, #8
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <ILI9341_Reset+0x3c>)
 80009fe:	f001 fd5d 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f000 ff60 	bl	80018c8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <ILI9341_Reset+0x3c>)
 8000a0e:	f001 fd55 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000a12:	2201      	movs	r2, #1
 8000a14:	2108      	movs	r1, #8
 8000a16:	4802      	ldr	r0, [pc, #8]	; (8000a20 <ILI9341_Reset+0x3c>)
 8000a18:	f001 fd50 	bl	80024bc <HAL_GPIO_WritePin>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40020000 	.word	0x40020000

08000a24 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <ILI9341_Enable+0x14>)
 8000a2e:	f001 fd45 	bl	80024bc <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40020000 	.word	0x40020000

08000a3c <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000a40:	f7ff fff0 	bl	8000a24 <ILI9341_Enable>
	ILI9341_Reset();
 8000a44:	f7ff ffce 	bl	80009e4 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ff33 	bl	80008b4 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f000 ff3a 	bl	80018c8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000a54:	20cb      	movs	r0, #203	; 0xcb
 8000a56:	f7ff ff2d 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000a5a:	2039      	movs	r0, #57	; 0x39
 8000a5c:	f7ff ff44 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000a60:	202c      	movs	r0, #44	; 0x2c
 8000a62:	f7ff ff41 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff ff3e 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000a6c:	2034      	movs	r0, #52	; 0x34
 8000a6e:	f7ff ff3b 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000a72:	2002      	movs	r0, #2
 8000a74:	f7ff ff38 	bl	80008e8 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000a78:	20cf      	movs	r0, #207	; 0xcf
 8000a7a:	f7ff ff1b 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff ff32 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000a84:	20c1      	movs	r0, #193	; 0xc1
 8000a86:	f7ff ff2f 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000a8a:	2030      	movs	r0, #48	; 0x30
 8000a8c:	f7ff ff2c 	bl	80008e8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000a90:	20e8      	movs	r0, #232	; 0xe8
 8000a92:	f7ff ff0f 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000a96:	2085      	movs	r0, #133	; 0x85
 8000a98:	f7ff ff26 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff ff23 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000aa2:	2078      	movs	r0, #120	; 0x78
 8000aa4:	f7ff ff20 	bl	80008e8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000aa8:	20ea      	movs	r0, #234	; 0xea
 8000aaa:	f7ff ff03 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ff1a 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff ff17 	bl	80008e8 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000aba:	20ed      	movs	r0, #237	; 0xed
 8000abc:	f7ff fefa 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000ac0:	2064      	movs	r0, #100	; 0x64
 8000ac2:	f7ff ff11 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f7ff ff0e 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000acc:	2012      	movs	r0, #18
 8000ace:	f7ff ff0b 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000ad2:	2081      	movs	r0, #129	; 0x81
 8000ad4:	f7ff ff08 	bl	80008e8 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000ad8:	20f7      	movs	r0, #247	; 0xf7
 8000ada:	f7ff feeb 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000ade:	2020      	movs	r0, #32
 8000ae0:	f7ff ff02 	bl	80008e8 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000ae4:	20c0      	movs	r0, #192	; 0xc0
 8000ae6:	f7ff fee5 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000aea:	2023      	movs	r0, #35	; 0x23
 8000aec:	f7ff fefc 	bl	80008e8 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000af0:	20c1      	movs	r0, #193	; 0xc1
 8000af2:	f7ff fedf 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000af6:	2010      	movs	r0, #16
 8000af8:	f7ff fef6 	bl	80008e8 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000afc:	20c5      	movs	r0, #197	; 0xc5
 8000afe:	f7ff fed9 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000b02:	203e      	movs	r0, #62	; 0x3e
 8000b04:	f7ff fef0 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000b08:	2028      	movs	r0, #40	; 0x28
 8000b0a:	f7ff feed 	bl	80008e8 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000b0e:	20c7      	movs	r0, #199	; 0xc7
 8000b10:	f7ff fed0 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000b14:	2086      	movs	r0, #134	; 0x86
 8000b16:	f7ff fee7 	bl	80008e8 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000b1a:	2036      	movs	r0, #54	; 0x36
 8000b1c:	f7ff feca 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000b20:	2048      	movs	r0, #72	; 0x48
 8000b22:	f7ff fee1 	bl	80008e8 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000b26:	203a      	movs	r0, #58	; 0x3a
 8000b28:	f7ff fec4 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000b2c:	2055      	movs	r0, #85	; 0x55
 8000b2e:	f7ff fedb 	bl	80008e8 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000b32:	20b1      	movs	r0, #177	; 0xb1
 8000b34:	f7ff febe 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fed5 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000b3e:	2018      	movs	r0, #24
 8000b40:	f7ff fed2 	bl	80008e8 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000b44:	20b6      	movs	r0, #182	; 0xb6
 8000b46:	f7ff feb5 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000b4a:	2008      	movs	r0, #8
 8000b4c:	f7ff fecc 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000b50:	2082      	movs	r0, #130	; 0x82
 8000b52:	f7ff fec9 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000b56:	2027      	movs	r0, #39	; 0x27
 8000b58:	f7ff fec6 	bl	80008e8 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000b5c:	20f2      	movs	r0, #242	; 0xf2
 8000b5e:	f7ff fea9 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff fec0 	bl	80008e8 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000b68:	2026      	movs	r0, #38	; 0x26
 8000b6a:	f7ff fea3 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff feba 	bl	80008e8 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000b74:	20e0      	movs	r0, #224	; 0xe0
 8000b76:	f7ff fe9d 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f7ff feb4 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b80:	2031      	movs	r0, #49	; 0x31
 8000b82:	f7ff feb1 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000b86:	202b      	movs	r0, #43	; 0x2b
 8000b88:	f7ff feae 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000b8c:	200c      	movs	r0, #12
 8000b8e:	f7ff feab 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b92:	200e      	movs	r0, #14
 8000b94:	f7ff fea8 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000b98:	2008      	movs	r0, #8
 8000b9a:	f7ff fea5 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000b9e:	204e      	movs	r0, #78	; 0x4e
 8000ba0:	f7ff fea2 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000ba4:	20f1      	movs	r0, #241	; 0xf1
 8000ba6:	f7ff fe9f 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000baa:	2037      	movs	r0, #55	; 0x37
 8000bac:	f7ff fe9c 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000bb0:	2007      	movs	r0, #7
 8000bb2:	f7ff fe99 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000bb6:	2010      	movs	r0, #16
 8000bb8:	f7ff fe96 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f7ff fe93 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000bc2:	200e      	movs	r0, #14
 8000bc4:	f7ff fe90 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000bc8:	2009      	movs	r0, #9
 8000bca:	f7ff fe8d 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fe8a 	bl	80008e8 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000bd4:	20e1      	movs	r0, #225	; 0xe1
 8000bd6:	f7ff fe6d 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fe84 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000be0:	200e      	movs	r0, #14
 8000be2:	f7ff fe81 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000be6:	2014      	movs	r0, #20
 8000be8:	f7ff fe7e 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f7ff fe7b 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000bf2:	2011      	movs	r0, #17
 8000bf4:	f7ff fe78 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000bf8:	2007      	movs	r0, #7
 8000bfa:	f7ff fe75 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000bfe:	2031      	movs	r0, #49	; 0x31
 8000c00:	f7ff fe72 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000c04:	20c1      	movs	r0, #193	; 0xc1
 8000c06:	f7ff fe6f 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000c0a:	2048      	movs	r0, #72	; 0x48
 8000c0c:	f7ff fe6c 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000c10:	2008      	movs	r0, #8
 8000c12:	f7ff fe69 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f7ff fe66 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000c1c:	200c      	movs	r0, #12
 8000c1e:	f7ff fe63 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000c22:	2031      	movs	r0, #49	; 0x31
 8000c24:	f7ff fe60 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000c28:	2036      	movs	r0, #54	; 0x36
 8000c2a:	f7ff fe5d 	bl	80008e8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f7ff fe5a 	bl	80008e8 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000c34:	2011      	movs	r0, #17
 8000c36:	f7ff fe3d 	bl	80008b4 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f000 fe44 	bl	80018c8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000c40:	2029      	movs	r0, #41	; 0x29
 8000c42:	f7ff fe37 	bl	80008b4 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f802 	bl	8000c50 <ILI9341_SetRotation>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000c5a:	2036      	movs	r0, #54	; 0x36
 8000c5c:	f7ff fe2a 	bl	80008b4 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f000 fe31 	bl	80018c8 <HAL_Delay>

	switch(rotation)
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d837      	bhi.n	8000cdc <ILI9341_SetRotation+0x8c>
 8000c6c:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <ILI9341_SetRotation+0x24>)
 8000c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c72:	bf00      	nop
 8000c74:	08000c85 	.word	0x08000c85
 8000c78:	08000c9b 	.word	0x08000c9b
 8000c7c:	08000cb1 	.word	0x08000cb1
 8000c80:	08000cc7 	.word	0x08000cc7
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000c84:	2048      	movs	r0, #72	; 0x48
 8000c86:	f7ff fe2f 	bl	80008e8 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <ILI9341_SetRotation+0x98>)
 8000c8c:	22f0      	movs	r2, #240	; 0xf0
 8000c8e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <ILI9341_SetRotation+0x9c>)
 8000c92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c96:	801a      	strh	r2, [r3, #0]
		break;
 8000c98:	e021      	b.n	8000cde <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000c9a:	2028      	movs	r0, #40	; 0x28
 8000c9c:	f7ff fe24 	bl	80008e8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <ILI9341_SetRotation+0x98>)
 8000ca2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ca6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <ILI9341_SetRotation+0x9c>)
 8000caa:	22f0      	movs	r2, #240	; 0xf0
 8000cac:	801a      	strh	r2, [r3, #0]
		break;
 8000cae:	e016      	b.n	8000cde <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000cb0:	2088      	movs	r0, #136	; 0x88
 8000cb2:	f7ff fe19 	bl	80008e8 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <ILI9341_SetRotation+0x98>)
 8000cb8:	22f0      	movs	r2, #240	; 0xf0
 8000cba:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <ILI9341_SetRotation+0x9c>)
 8000cbe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000cc2:	801a      	strh	r2, [r3, #0]
		break;
 8000cc4:	e00b      	b.n	8000cde <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000cc6:	20e8      	movs	r0, #232	; 0xe8
 8000cc8:	f7ff fe0e 	bl	80008e8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <ILI9341_SetRotation+0x98>)
 8000cce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000cd2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <ILI9341_SetRotation+0x9c>)
 8000cd6:	22f0      	movs	r2, #240	; 0xf0
 8000cd8:	801a      	strh	r2, [r3, #0]
		break;
 8000cda:	e000      	b.n	8000cde <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000cdc:	bf00      	nop
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000002 	.word	0x20000002
 8000cec:	20000000 	.word	0x20000000

08000cf0 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cf4:	b08d      	sub	sp, #52	; 0x34
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	6039      	str	r1, [r7, #0]
 8000cfc:	80fb      	strh	r3, [r7, #6]
 8000cfe:	466b      	mov	r3, sp
 8000d00:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d0e:	d202      	bcs.n	8000d16 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
 8000d14:	e002      	b.n	8000d1c <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000d16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2104      	movs	r1, #4
 8000d20:	483e      	ldr	r0, [pc, #248]	; (8000e1c <ILI9341_DrawColorBurst+0x12c>)
 8000d22:	f001 fbcb 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2108      	movs	r1, #8
 8000d2a:	483c      	ldr	r0, [pc, #240]	; (8000e1c <ILI9341_DrawColorBurst+0x12c>)
 8000d2c:	f001 fbc6 	bl	80024bc <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	0a1b      	lsrs	r3, r3, #8
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	2300      	movs	r3, #0
 8000d44:	4688      	mov	r8, r1
 8000d46:	4699      	mov	r9, r3
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	460c      	mov	r4, r1
 8000d60:	461d      	mov	r5, r3
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	00eb      	lsls	r3, r5, #3
 8000d6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d70:	00e2      	lsls	r2, r4, #3
 8000d72:	1dcb      	adds	r3, r1, #7
 8000d74:	08db      	lsrs	r3, r3, #3
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	ebad 0d03 	sub.w	sp, sp, r3
 8000d7c:	466b      	mov	r3, sp
 8000d7e:	3300      	adds	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d86:	e00e      	b.n	8000da6 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8c:	4413      	add	r3, r2
 8000d8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d92:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d96:	3301      	adds	r3, #1
 8000d98:	88fa      	ldrh	r2, [r7, #6]
 8000d9a:	b2d1      	uxtb	r1, r2
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	3302      	adds	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d3ec      	bcc.n	8000d88 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbc:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000dc8:	fb01 f202 	mul.w	r2, r1, r2
 8000dcc:	1a9b      	subs	r3, r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d010      	beq.n	8000df8 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dda:	e009      	b.n	8000df0 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	230a      	movs	r3, #10
 8000de2:	69b9      	ldr	r1, [r7, #24]
 8000de4:	480e      	ldr	r0, [pc, #56]	; (8000e20 <ILI9341_DrawColorBurst+0x130>)
 8000de6:	f002 f8b4 	bl	8002f52 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dec:	3301      	adds	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d3f1      	bcc.n	8000ddc <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <ILI9341_DrawColorBurst+0x130>)
 8000e02:	f002 f8a6 	bl	8002f52 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4804      	ldr	r0, [pc, #16]	; (8000e1c <ILI9341_DrawColorBurst+0x12c>)
 8000e0c:	f001 fb56 	bl	80024bc <HAL_GPIO_WritePin>
 8000e10:	46b5      	mov	sp, r6
}
 8000e12:	bf00      	nop
 8000e14:	3734      	adds	r7, #52	; 0x34
 8000e16:	46bd      	mov	sp, r7
 8000e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	20000094 	.word	0x20000094

08000e24 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <ILI9341_FillScreen+0x44>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <ILI9341_FillScreen+0x48>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fd89 	bl	8000954 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <ILI9341_FillScreen+0x44>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <ILI9341_FillScreen+0x48>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff48 	bl	8000cf0 <ILI9341_DrawColorBurst>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000002 	.word	0x20000002
 8000e6c:	20000000 	.word	0x20000000

08000e70 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	80bb      	strh	r3, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <ILI9341_DrawPixel+0xc4>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	88fa      	ldrh	r2, [r7, #6]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d24d      	bcs.n	8000f2a <ILI9341_DrawPixel+0xba>
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <ILI9341_DrawPixel+0xc8>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	88ba      	ldrh	r2, [r7, #4]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d247      	bcs.n	8000f2a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	753b      	strb	r3, [r7, #20]
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	757b      	strb	r3, [r7, #21]
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	3301      	adds	r3, #1
 8000eae:	121b      	asrs	r3, r3, #8
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	75bb      	strb	r3, [r7, #22]
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	743b      	strb	r3, [r7, #16]
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	747b      	strb	r3, [r7, #17]
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	121b      	asrs	r3, r3, #8
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	74bb      	strb	r3, [r7, #18]
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	733b      	strb	r3, [r7, #12]
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000ef2:	202a      	movs	r0, #42	; 0x2a
 8000ef4:	f7ff fcde 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2104      	movs	r1, #4
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fd0c 	bl	800091c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000f04:	202b      	movs	r0, #43	; 0x2b
 8000f06:	f7ff fcd5 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	2104      	movs	r1, #4
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fd03 	bl	800091c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000f16:	202c      	movs	r0, #44	; 0x2c
 8000f18:	f7ff fccc 	bl	80008b4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2102      	movs	r1, #2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fcfa 	bl	800091c <ILI9341_WriteBuffer>
 8000f28:	e000      	b.n	8000f2c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f2a:	bf00      	nop
}
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000002 	.word	0x20000002
 8000f38:	20000000 	.word	0x20000000

08000f3c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4604      	mov	r4, r0
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80bb      	strh	r3, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	807b      	strh	r3, [r7, #2]
 8000f56:	4613      	mov	r3, r2
 8000f58:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <ILI9341_DrawRectangle+0xb0>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	88fa      	ldrh	r2, [r7, #6]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d23d      	bcs.n	8000fe2 <ILI9341_DrawRectangle+0xa6>
 8000f66:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <ILI9341_DrawRectangle+0xb4>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	88ba      	ldrh	r2, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d237      	bcs.n	8000fe2 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <ILI9341_DrawRectangle+0xb0>)
 8000f7a:	8812      	ldrh	r2, [r2, #0]
 8000f7c:	b292      	uxth	r2, r2
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	dd05      	ble.n	8000f8e <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <ILI9341_DrawRectangle+0xb0>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000f8e:	88ba      	ldrh	r2, [r7, #4]
 8000f90:	883b      	ldrh	r3, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <ILI9341_DrawRectangle+0xb4>)
 8000f96:	8812      	ldrh	r2, [r2, #0]
 8000f98:	b292      	uxth	r2, r2
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	dd05      	ble.n	8000faa <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <ILI9341_DrawRectangle+0xb4>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000faa:	88fa      	ldrh	r2, [r7, #6]
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	b29c      	uxth	r4, r3
 8000fb6:	88ba      	ldrh	r2, [r7, #4]
 8000fb8:	883b      	ldrh	r3, [r7, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	88b9      	ldrh	r1, [r7, #4]
 8000fc4:	88f8      	ldrh	r0, [r7, #6]
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	f7ff fcc4 	bl	8000954 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000fcc:	883b      	ldrh	r3, [r7, #0]
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	8b3b      	ldrh	r3, [r7, #24]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe88 	bl	8000cf0 <ILI9341_DrawColorBurst>
 8000fe0:	e000      	b.n	8000fe4 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000fe2:	bf00      	nop
}
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000002 	.word	0x20000002
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4623      	mov	r3, r4
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	4603      	mov	r3, r0
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]
 800100e:	4613      	mov	r3, r2
 8001010:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <ILI9341_DrawHLine+0x80>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	429a      	cmp	r2, r3
 800101c:	d225      	bcs.n	800106a <ILI9341_DrawHLine+0x76>
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <ILI9341_DrawHLine+0x84>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	88ba      	ldrh	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d21f      	bcs.n	800106a <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800102a:	88fa      	ldrh	r2, [r7, #6]
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	4413      	add	r3, r2
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <ILI9341_DrawHLine+0x80>)
 8001032:	8812      	ldrh	r2, [r2, #0]
 8001034:	b292      	uxth	r2, r2
 8001036:	4293      	cmp	r3, r2
 8001038:	dd05      	ble.n	8001046 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <ILI9341_DrawHLine+0x80>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	3b01      	subs	r3, #1
 8001050:	b29a      	uxth	r2, r3
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	88b9      	ldrh	r1, [r7, #4]
 8001056:	88f8      	ldrh	r0, [r7, #6]
 8001058:	f7ff fc7c 	bl	8000954 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 800105c:	887a      	ldrh	r2, [r7, #2]
 800105e:	883b      	ldrh	r3, [r7, #0]
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fe44 	bl	8000cf0 <ILI9341_DrawColorBurst>
 8001068:	e000      	b.n	800106c <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800106a:	bf00      	nop
}
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}
 8001072:	bf00      	nop
 8001074:	20000002 	.word	0x20000002
 8001078:	20000000 	.word	0x20000000

0800107c <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4623      	mov	r3, r4
 800108c:	80fb      	strh	r3, [r7, #6]
 800108e:	4603      	mov	r3, r0
 8001090:	80bb      	strh	r3, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <ILI9341_DrawVLine+0x80>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	88fa      	ldrh	r2, [r7, #6]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d225      	bcs.n	80010f2 <ILI9341_DrawVLine+0x76>
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <ILI9341_DrawVLine+0x84>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	88ba      	ldrh	r2, [r7, #4]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d21f      	bcs.n	80010f2 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 80010b2:	88ba      	ldrh	r2, [r7, #4]
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <ILI9341_DrawVLine+0x84>)
 80010ba:	8812      	ldrh	r2, [r2, #0]
 80010bc:	b292      	uxth	r2, r2
 80010be:	4293      	cmp	r3, r2
 80010c0:	dd05      	ble.n	80010ce <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <ILI9341_DrawVLine+0x84>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 80010ce:	88ba      	ldrh	r2, [r7, #4]
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	4413      	add	r3, r2
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b29b      	uxth	r3, r3
 80010da:	88fa      	ldrh	r2, [r7, #6]
 80010dc:	88b9      	ldrh	r1, [r7, #4]
 80010de:	88f8      	ldrh	r0, [r7, #6]
 80010e0:	f7ff fc38 	bl	8000954 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	883b      	ldrh	r3, [r7, #0]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fe00 	bl	8000cf0 <ILI9341_DrawColorBurst>
 80010f0:	e000      	b.n	80010f4 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80010f2:	bf00      	nop
}
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000002 	.word	0x20000002
 8001100:	20000000 	.word	0x20000000

08001104 <userCode>:
#include "ILI9341_GFX.h"
#include "ILI9341_STM32_Driver.h"

void moldeTela(void);

void userCode(void){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

	ILI9341_Init();
 8001108:	f7ff fc98 	bl	8000a3c <ILI9341_Init>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800110c:	2003      	movs	r0, #3
 800110e:	f7ff fd9f 	bl	8000c50 <ILI9341_SetRotation>
	ILI9341_FillScreen(BLACK);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fe86 	bl	8000e24 <ILI9341_FillScreen>
	moldeTela();
 8001118:	f000 f802 	bl	8001120 <moldeTela>

	while(1){
 800111c:	e7fe      	b.n	800111c <userCode+0x18>
	...

08001120 <moldeTela>:

	}

}

void moldeTela(void){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af02      	add	r7, sp, #8
	ILI9341_DrawFilledRectangleCoord(22, 192, 99, 219, LIGHTGREY);
 8001126:	f24c 6318 	movw	r3, #50712	; 0xc618
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	23db      	movs	r3, #219	; 0xdb
 800112e:	2263      	movs	r2, #99	; 0x63
 8001130:	21c0      	movs	r1, #192	; 0xc0
 8001132:	2016      	movs	r0, #22
 8001134:	f7ff fa57 	bl	80005e6 <ILI9341_DrawFilledRectangleCoord>
	ILI9341_DrawHollowRectangleCoord(20, 190, 100, 220, DARKGREY);
 8001138:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	23dc      	movs	r3, #220	; 0xdc
 8001140:	2264      	movs	r2, #100	; 0x64
 8001142:	21be      	movs	r1, #190	; 0xbe
 8001144:	2014      	movs	r0, #20
 8001146:	f7ff f9cd 	bl	80004e4 <ILI9341_DrawHollowRectangleCoord>
	ILI9341_DrawText("Tela 1", FONT1, 43, 201, BLACK, LIGHTGREY);
 800114a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	23c9      	movs	r3, #201	; 0xc9
 8001156:	222b      	movs	r2, #43	; 0x2b
 8001158:	4926      	ldr	r1, [pc, #152]	; (80011f4 <moldeTela+0xd4>)
 800115a:	4827      	ldr	r0, [pc, #156]	; (80011f8 <moldeTela+0xd8>)
 800115c:	f7ff fb16 	bl	800078c <ILI9341_DrawText>

	ILI9341_DrawFilledRectangleCoord(122, 192, 199, 219, LIGHTGREY);
 8001160:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	23db      	movs	r3, #219	; 0xdb
 8001168:	22c7      	movs	r2, #199	; 0xc7
 800116a:	21c0      	movs	r1, #192	; 0xc0
 800116c:	207a      	movs	r0, #122	; 0x7a
 800116e:	f7ff fa3a 	bl	80005e6 <ILI9341_DrawFilledRectangleCoord>
	ILI9341_DrawHollowRectangleCoord(120, 190, 200, 220, DARKGREY);
 8001172:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	23dc      	movs	r3, #220	; 0xdc
 800117a:	22c8      	movs	r2, #200	; 0xc8
 800117c:	21be      	movs	r1, #190	; 0xbe
 800117e:	2078      	movs	r0, #120	; 0x78
 8001180:	f7ff f9b0 	bl	80004e4 <ILI9341_DrawHollowRectangleCoord>
	ILI9341_DrawText("Tela 2", FONT1, 143, 201, BLACK, LIGHTGREY);
 8001184:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2300      	movs	r3, #0
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	23c9      	movs	r3, #201	; 0xc9
 8001190:	228f      	movs	r2, #143	; 0x8f
 8001192:	4918      	ldr	r1, [pc, #96]	; (80011f4 <moldeTela+0xd4>)
 8001194:	4819      	ldr	r0, [pc, #100]	; (80011fc <moldeTela+0xdc>)
 8001196:	f7ff faf9 	bl	800078c <ILI9341_DrawText>

	ILI9341_DrawFilledRectangleCoord(222, 192, 299, 219, LIGHTGREY);
 800119a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	23db      	movs	r3, #219	; 0xdb
 80011a2:	f240 122b 	movw	r2, #299	; 0x12b
 80011a6:	21c0      	movs	r1, #192	; 0xc0
 80011a8:	20de      	movs	r0, #222	; 0xde
 80011aa:	f7ff fa1c 	bl	80005e6 <ILI9341_DrawFilledRectangleCoord>
	ILI9341_DrawHollowRectangleCoord(220, 190, 300, 220, DARKGREY);
 80011ae:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	23dc      	movs	r3, #220	; 0xdc
 80011b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ba:	21be      	movs	r1, #190	; 0xbe
 80011bc:	20dc      	movs	r0, #220	; 0xdc
 80011be:	f7ff f991 	bl	80004e4 <ILI9341_DrawHollowRectangleCoord>
	ILI9341_DrawText("Tela 3", FONT1, 243, 201, BLACK, LIGHTGREY);
 80011c2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	2300      	movs	r3, #0
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	23c9      	movs	r3, #201	; 0xc9
 80011ce:	22f3      	movs	r2, #243	; 0xf3
 80011d0:	4908      	ldr	r1, [pc, #32]	; (80011f4 <moldeTela+0xd4>)
 80011d2:	480b      	ldr	r0, [pc, #44]	; (8001200 <moldeTela+0xe0>)
 80011d4:	f7ff fada 	bl	800078c <ILI9341_DrawText>

	ILI9341_DrawFilledRectangleCoord(20, 20, 300, 170,  WHITE);
 80011d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	23aa      	movs	r3, #170	; 0xaa
 80011e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011e4:	2114      	movs	r1, #20
 80011e6:	2014      	movs	r0, #20
 80011e8:	f7ff f9fd 	bl	80005e6 <ILI9341_DrawFilledRectangleCoord>
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	080068cc 	.word	0x080068cc
 80011f8:	08006890 	.word	0x08006890
 80011fc:	08006898 	.word	0x08006898
 8001200:	080068a0 	.word	0x080068a0

08001204 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001214:	d017      	beq.n	8001246 <HAL_GPIO_EXTI_Callback+0x42>
 8001216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800121a:	dc1a      	bgt.n	8001252 <HAL_GPIO_EXTI_Callback+0x4e>
 800121c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001220:	d003      	beq.n	800122a <HAL_GPIO_EXTI_Callback+0x26>
 8001222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001226:	d007      	beq.n	8001238 <HAL_GPIO_EXTI_Callback+0x34>
			break;
		case BTN_3_Pin:
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			break;
		default:
			break;
 8001228:	e013      	b.n	8001252 <HAL_GPIO_EXTI_Callback+0x4e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001230:	480a      	ldr	r0, [pc, #40]	; (800125c <HAL_GPIO_EXTI_Callback+0x58>)
 8001232:	f001 f943 	bl	80024bc <HAL_GPIO_WritePin>
			break;
 8001236:	e00d      	b.n	8001254 <HAL_GPIO_EXTI_Callback+0x50>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <HAL_GPIO_EXTI_Callback+0x58>)
 8001240:	f001 f93c 	bl	80024bc <HAL_GPIO_WritePin>
			break;
 8001244:	e006      	b.n	8001254 <HAL_GPIO_EXTI_Callback+0x50>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <HAL_GPIO_EXTI_Callback+0x58>)
 800124c:	f001 f94f 	bl	80024ee <HAL_GPIO_TogglePin>
			break;
 8001250:	e000      	b.n	8001254 <HAL_GPIO_EXTI_Callback+0x50>
			break;
 8001252:	bf00      	nop
	}
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020800 	.word	0x40020800

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001264:	f000 faee 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001268:	f000 f81c 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126c:	f000 f8d8 	bl	8001420 <MX_GPIO_Init>
  MX_DMA_Init();
 8001270:	f000 f8b6 	bl	80013e0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001274:	f000 f87e 	bl	8001374 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  userCode();
 8001278:	f7ff ff44 	bl	8001104 <userCode>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800127c:	f002 fc80 	bl	8003b80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001280:	4a05      	ldr	r2, [pc, #20]	; (8001298 <main+0x38>)
 8001282:	2100      	movs	r1, #0
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <main+0x3c>)
 8001286:	f002 fcc5 	bl	8003c14 <osThreadNew>
 800128a:	4603      	mov	r3, r0
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <main+0x40>)
 800128e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001290:	f002 fc9a 	bl	8003bc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001294:	e7fe      	b.n	8001294 <main+0x34>
 8001296:	bf00      	nop
 8001298:	08006f30 	.word	0x08006f30
 800129c:	0800151d 	.word	0x0800151d
 80012a0:	2000014c 	.word	0x2000014c

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b094      	sub	sp, #80	; 0x50
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	2230      	movs	r2, #48	; 0x30
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 fa16 	bl	80066e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <SystemClock_Config+0xc8>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a26      	ldr	r2, [pc, #152]	; (800136c <SystemClock_Config+0xc8>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <SystemClock_Config+0xc8>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <SystemClock_Config+0xcc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a20      	ldr	r2, [pc, #128]	; (8001370 <SystemClock_Config+0xcc>)
 80012ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <SystemClock_Config+0xcc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001314:	2319      	movs	r3, #25
 8001316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001318:	23c8      	movs	r3, #200	; 0xc8
 800131a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001320:	2304      	movs	r3, #4
 8001322:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f913 	bl	8002554 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001334:	f000 f90c 	bl	8001550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2302      	movs	r3, #2
 800133e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2103      	movs	r1, #3
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fb75 	bl	8002a44 <HAL_RCC_ClockConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001360:	f000 f8f6 	bl	8001550 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	3750      	adds	r7, #80	; 0x50
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000

08001374 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_SPI1_Init+0x64>)
 800137a:	4a18      	ldr	r2, [pc, #96]	; (80013dc <MX_SPI1_Init+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_SPI1_Init+0x64>)
 8001380:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001384:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_SPI1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_SPI1_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_SPI1_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_SPI1_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_SPI1_Init+0x64>)
 80013a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_SPI1_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_SPI1_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_SPI1_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <MX_SPI1_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_SPI1_Init+0x64>)
 80013c0:	220a      	movs	r2, #10
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_SPI1_Init+0x64>)
 80013c6:	f001 fd3b 	bl	8002e40 <HAL_SPI_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013d0:	f000 f8be 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000094 	.word	0x20000094
 80013dc:	40013000 	.word	0x40013000

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_DMA_Init+0x3c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <MX_DMA_Init+0x3c>)
 80013f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_DMA_Init+0x3c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2105      	movs	r1, #5
 8001406:	203a      	movs	r0, #58	; 0x3a
 8001408:	f000 fb3a 	bl	8001a80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800140c:	203a      	movs	r0, #58	; 0x3a
 800140e:	f000 fb53 	bl	8001ab8 <HAL_NVIC_EnableIRQ>

}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <MX_GPIO_Init+0xf0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a34      	ldr	r2, [pc, #208]	; (8001510 <MX_GPIO_Init+0xf0>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b32      	ldr	r3, [pc, #200]	; (8001510 <MX_GPIO_Init+0xf0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_GPIO_Init+0xf0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a2d      	ldr	r2, [pc, #180]	; (8001510 <MX_GPIO_Init+0xf0>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <MX_GPIO_Init+0xf0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_GPIO_Init+0xf0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a26      	ldr	r2, [pc, #152]	; (8001510 <MX_GPIO_Init+0xf0>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_GPIO_Init+0xf0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001490:	4820      	ldr	r0, [pc, #128]	; (8001514 <MX_GPIO_Init+0xf4>)
 8001492:	f001 f813 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_DC_Pin|TFT_CS_Pin|TFT_RST_Pin, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	211c      	movs	r1, #28
 800149a:	481f      	ldr	r0, [pc, #124]	; (8001518 <MX_GPIO_Init+0xf8>)
 800149c:	f001 f80e 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	4816      	ldr	r0, [pc, #88]	; (8001514 <MX_GPIO_Init+0xf4>)
 80014ba:	f000 fe7b 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_DC_Pin TFT_CS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin|TFT_RST_Pin;
 80014be:	231c      	movs	r3, #28
 80014c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4619      	mov	r1, r3
 80014d4:	4810      	ldr	r0, [pc, #64]	; (8001518 <MX_GPIO_Init+0xf8>)
 80014d6:	f000 fe6d 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin;
 80014da:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4619      	mov	r1, r3
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <MX_GPIO_Init+0xf8>)
 80014f2:	f000 fe5f 	bl	80021b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2105      	movs	r1, #5
 80014fa:	2028      	movs	r0, #40	; 0x28
 80014fc:	f000 fac0 	bl	8001a80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001500:	2028      	movs	r0, #40	; 0x28
 8001502:	f000 fad9 	bl	8001ab8 <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40020800 	.word	0x40020800
 8001518:	40020000 	.word	0x40020000

0800151c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f002 fc07 	bl	8003d38 <osDelay>
 800152a:	e7fb      	b.n	8001524 <StartDefaultTask+0x8>

0800152c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800153e:	f000 f9a3 	bl	8001888 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40010000 	.word	0x40010000

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	e7fe      	b.n	8001558 <Error_Handler+0x8>
	...

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_MspInit+0x54>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_MspInit+0x54>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_MspInit+0x54>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_MspInit+0x54>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_MspInit+0x54>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_MspInit+0x54>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	210f      	movs	r1, #15
 800159e:	f06f 0001 	mvn.w	r0, #1
 80015a2:	f000 fa6d 	bl	8001a80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a30      	ldr	r2, [pc, #192]	; (8001694 <HAL_SPI_MspInit+0xe0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d15a      	bne.n	800168c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_SPI_MspInit+0xe4>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <HAL_SPI_MspInit+0xe4>)
 80015e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <HAL_SPI_MspInit+0xe4>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_SPI_MspInit+0xe4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_SPI_MspInit+0xe4>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_SPI_MspInit+0xe4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_CLK_Pin|TFT_MISO_Pin|TFT_MOSI_Pin;
 800160e:	23e0      	movs	r3, #224	; 0xe0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800161e:	2305      	movs	r3, #5
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	481c      	ldr	r0, [pc, #112]	; (800169c <HAL_SPI_MspInit+0xe8>)
 800162a:	f000 fdc3 	bl	80021b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 8001630:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_SPI_MspInit+0xf0>)
 8001632:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 8001636:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800163a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 800163e:	2240      	movs	r2, #64	; 0x40
 8001640:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 800164a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 8001664:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001668:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001670:	480b      	ldr	r0, [pc, #44]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 8001672:	f000 fa2f 	bl	8001ad4 <HAL_DMA_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800167c:	f7ff ff68 	bl	8001550 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 8001684:	649a      	str	r2, [r3, #72]	; 0x48
 8001686:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_SPI_MspInit+0xec>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40013000 	.word	0x40013000
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000
 80016a0:	200000ec 	.word	0x200000ec
 80016a4:	40026440 	.word	0x40026440

080016a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	; 0x30
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	2019      	movs	r0, #25
 80016be:	f000 f9df 	bl	8001a80 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016c2:	2019      	movs	r0, #25
 80016c4:	f000 f9f8 	bl	8001ab8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_InitTick+0xa0>)
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_InitTick+0xa0>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6453      	str	r3, [r2, #68]	; 0x44
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_InitTick+0xa0>)
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016e4:	f107 0210 	add.w	r2, r7, #16
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 fb74 	bl	8002ddc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016f4:	f001 fb5e 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 80016f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	4a13      	ldr	r2, [pc, #76]	; (800174c <HAL_InitTick+0xa4>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0c9b      	lsrs	r3, r3, #18
 8001704:	3b01      	subs	r3, #1
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_InitTick+0xa8>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <HAL_InitTick+0xac>)
 800170c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_InitTick+0xa8>)
 8001710:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001714:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001716:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_InitTick+0xa8>)
 8001718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_InitTick+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_InitTick+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <HAL_InitTick+0xa8>)
 800172a:	f001 ff65 	bl	80035f8 <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d104      	bne.n	800173e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001734:	4806      	ldr	r0, [pc, #24]	; (8001750 <HAL_InitTick+0xa8>)
 8001736:	f001 ffb9 	bl	80036ac <HAL_TIM_Base_Start_IT>
 800173a:	4603      	mov	r3, r0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3730      	adds	r7, #48	; 0x30
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	431bde83 	.word	0x431bde83
 8001750:	20000150 	.word	0x20000150
 8001754:	40010000 	.word	0x40010000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800178a:	f001 fff1 	bl	8003770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000150 	.word	0x20000150

08001798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_1_Pin);
 800179c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017a0:	f000 fec0 	bl	8002524 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_2_Pin);
 80017a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017a8:	f000 febc 	bl	8002524 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_3_Pin);
 80017ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017b0:	f000 feb8 	bl	8002524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <DMA2_Stream2_IRQHandler+0x10>)
 80017be:	f000 fa8f 	bl	8001ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200000ec 	.word	0x200000ec

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f6:	490e      	ldr	r1, [pc, #56]	; (8001830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800180c:	4c0b      	ldr	r4, [pc, #44]	; (800183c <LoopFillZerobss+0x26>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181a:	f7ff ffd7 	bl	80017cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181e:	f004 ff2d 	bl	800667c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7ff fd1d 	bl	8001260 <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001834:	08006fe4 	.word	0x08006fe4
  ldr r2, =_sbss
 8001838:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800183c:	20004bb4 	.word	0x20004bb4

08001840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f8fc 	bl	8001a6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f7ff ff18 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fe70 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	20000198 	.word	0x20000198

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000198 	.word	0x20000198

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ffee 	bl	80018b0 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_Delay+0x44>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000000c 	.word	0x2000000c

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	; (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff4c 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a92:	f7ff ff61 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001a96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	6978      	ldr	r0, [r7, #20]
 8001a9e:	f7ff ffb1 	bl	8001a04 <NVIC_EncodePriority>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff80 	bl	80019b0 <__NVIC_SetPriority>
}
 8001ab0:	bf00      	nop
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff54 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff fee6 	bl	80018b0 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e099      	b.n	8001c24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b10:	e00f      	b.n	8001b32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b12:	f7ff fecd 	bl	80018b0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d908      	bls.n	8001b32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e078      	b.n	8001c24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e8      	bne.n	8001b12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <HAL_DMA_Init+0x158>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d107      	bne.n	8001b9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	4313      	orrs	r3, r2
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f023 0307 	bic.w	r3, r3, #7
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d117      	bne.n	8001bf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00e      	beq.n	8001bf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fa6f 	bl	80020bc <DMA_CheckFifoParam>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2240      	movs	r2, #64	; 0x40
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e016      	b.n	8001c24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fa26 	bl	8002050 <DMA_CalcBaseAndBitshift>
 8001c04:	4603      	mov	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	223f      	movs	r2, #63	; 0x3f
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	f010803f 	.word	0xf010803f

08001c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_DMA_Start_IT+0x26>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e040      	b.n	8001cd8 <HAL_DMA_Start_IT+0xa8>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d12f      	bne.n	8001cca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f9b8 	bl	8001ff4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	223f      	movs	r2, #63	; 0x3f
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0216 	orr.w	r2, r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0208 	orr.w	r2, r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e005      	b.n	8001cd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cec:	4b8e      	ldr	r3, [pc, #568]	; (8001f28 <HAL_DMA_IRQHandler+0x248>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a8e      	ldr	r2, [pc, #568]	; (8001f2c <HAL_DMA_IRQHandler+0x24c>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0a9b      	lsrs	r3, r3, #10
 8001cf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d01a      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0204 	bic.w	r2, r2, #4
 8001d32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	2208      	movs	r2, #8
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	f043 0201 	orr.w	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	2201      	movs	r2, #1
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d012      	beq.n	8001d82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	2201      	movs	r2, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7a:	f043 0202 	orr.w	r2, r3, #2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	2204      	movs	r2, #4
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d012      	beq.n	8001db8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2204      	movs	r2, #4
 8001da6:	409a      	lsls	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	f043 0204 	orr.w	r2, r3, #4
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d043      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d03c      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	2210      	movs	r2, #16
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d018      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d108      	bne.n	8001e10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d024      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4798      	blx	r3
 8001e0e:	e01f      	b.n	8001e50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
 8001e20:	e016      	b.n	8001e50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0208 	bic.w	r2, r2, #8
 8001e3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2220      	movs	r2, #32
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 808f 	beq.w	8001f80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8087 	beq.w	8001f80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	2220      	movs	r2, #32
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d136      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0216 	bic.w	r2, r2, #22
 8001e98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d103      	bne.n	8001eba <HAL_DMA_IRQHandler+0x1da>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0208 	bic.w	r2, r2, #8
 8001ec8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	223f      	movs	r2, #63	; 0x3f
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d07e      	beq.n	8001fec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
        }
        return;
 8001ef6:	e079      	b.n	8001fec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01d      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10d      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d031      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
 8001f24:	e02c      	b.n	8001f80 <HAL_DMA_IRQHandler+0x2a0>
 8001f26:	bf00      	nop
 8001f28:	20000004 	.word	0x20000004
 8001f2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d023      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
 8001f40:	e01e      	b.n	8001f80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10f      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0210 	bic.w	r2, r2, #16
 8001f5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d032      	beq.n	8001fee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d022      	beq.n	8001fda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2205      	movs	r2, #5
 8001f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d307      	bcc.n	8001fc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f2      	bne.n	8001fac <HAL_DMA_IRQHandler+0x2cc>
 8001fc6:	e000      	b.n	8001fca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
 8001fea:	e000      	b.n	8001fee <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fec:	bf00      	nop
    }
  }
}
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002010:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b40      	cmp	r3, #64	; 0x40
 8002020:	d108      	bne.n	8002034 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002032:	e007      	b.n	8002044 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	60da      	str	r2, [r3, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3b10      	subs	r3, #16
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800206a:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <DMA_CalcBaseAndBitshift+0x68>)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d909      	bls.n	8002092 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	1d1a      	adds	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	659a      	str	r2, [r3, #88]	; 0x58
 8002090:	e007      	b.n	80020a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800209a:	f023 0303 	bic.w	r3, r3, #3
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	aaaaaaab 	.word	0xaaaaaaab
 80020b8:	08006f6c 	.word	0x08006f6c

080020bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11f      	bne.n	8002116 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d856      	bhi.n	800218a <DMA_CheckFifoParam+0xce>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <DMA_CheckFifoParam+0x28>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	08002107 	.word	0x08002107
 80020ec:	080020f5 	.word	0x080020f5
 80020f0:	0800218b 	.word	0x0800218b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d046      	beq.n	800218e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002104:	e043      	b.n	800218e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800210e:	d140      	bne.n	8002192 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002114:	e03d      	b.n	8002192 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800211e:	d121      	bne.n	8002164 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d837      	bhi.n	8002196 <DMA_CheckFifoParam+0xda>
 8002126:	a201      	add	r2, pc, #4	; (adr r2, 800212c <DMA_CheckFifoParam+0x70>)
 8002128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212c:	0800213d 	.word	0x0800213d
 8002130:	08002143 	.word	0x08002143
 8002134:	0800213d 	.word	0x0800213d
 8002138:	08002155 	.word	0x08002155
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      break;
 8002140:	e030      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d025      	beq.n	800219a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002152:	e022      	b.n	800219a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800215c:	d11f      	bne.n	800219e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002162:	e01c      	b.n	800219e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d903      	bls.n	8002172 <DMA_CheckFifoParam+0xb6>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d003      	beq.n	8002178 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002170:	e018      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
      break;
 8002176:	e015      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00e      	beq.n	80021a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      break;
 8002188:	e00b      	b.n	80021a2 <DMA_CheckFifoParam+0xe6>
      break;
 800218a:	bf00      	nop
 800218c:	e00a      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
 8002190:	e008      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
 8002194:	e006      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
 8002198:	e004      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e002      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
    }
  } 
  
  return status; 
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e159      	b.n	8002484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f040 8148 	bne.w	800247e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	2b02      	cmp	r3, #2
 8002204:	d130      	bne.n	8002268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 0201 	and.w	r2, r3, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b03      	cmp	r3, #3
 8002272:	d017      	beq.n	80022a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d123      	bne.n	80022f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a2 	beq.w	800247e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_GPIO_Init+0x2e8>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a56      	ldr	r2, [pc, #344]	; (800249c <HAL_GPIO_Init+0x2e8>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b54      	ldr	r3, [pc, #336]	; (800249c <HAL_GPIO_Init+0x2e8>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002356:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_GPIO_Init+0x2ec>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a49      	ldr	r2, [pc, #292]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x202>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a48      	ldr	r2, [pc, #288]	; (80024a8 <HAL_GPIO_Init+0x2f4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x1fe>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a47      	ldr	r2, [pc, #284]	; (80024ac <HAL_GPIO_Init+0x2f8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x1fa>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_GPIO_Init+0x2fc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x1f6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a45      	ldr	r2, [pc, #276]	; (80024b4 <HAL_GPIO_Init+0x300>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x1f2>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e008      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e004      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b6:	2300      	movs	r3, #0
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	4093      	lsls	r3, r2
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c8:	4935      	ldr	r1, [pc, #212]	; (80024a0 <HAL_GPIO_Init+0x2ec>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <HAL_GPIO_Init+0x304>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fa:	4a2f      	ldr	r2, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x304>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_GPIO_Init+0x304>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002478:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_GPIO_Init+0x304>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	f67f aea2 	bls.w	80021d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020c00 	.word	0x40020c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d8:	e003      	b.n	80024e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002500:	887a      	ldrh	r2, [r7, #2]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	041a      	lsls	r2, r3, #16
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43d9      	mvns	r1, r3
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	400b      	ands	r3, r1
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	619a      	str	r2, [r3, #24]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d006      	beq.n	8002548 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fe5e 	bl	8001204 <HAL_GPIO_EXTI_Callback>
  }
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e267      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d075      	beq.n	800265e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002572:	4b88      	ldr	r3, [pc, #544]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b04      	cmp	r3, #4
 800257c:	d00c      	beq.n	8002598 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257e:	4b85      	ldr	r3, [pc, #532]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002586:	2b08      	cmp	r3, #8
 8002588:	d112      	bne.n	80025b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258a:	4b82      	ldr	r3, [pc, #520]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002596:	d10b      	bne.n	80025b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	4b7e      	ldr	r3, [pc, #504]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d05b      	beq.n	800265c <HAL_RCC_OscConfig+0x108>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d157      	bne.n	800265c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e242      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b8:	d106      	bne.n	80025c8 <HAL_RCC_OscConfig+0x74>
 80025ba:	4b76      	ldr	r3, [pc, #472]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a75      	ldr	r2, [pc, #468]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e01d      	b.n	8002604 <HAL_RCC_OscConfig+0xb0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x98>
 80025d2:	4b70      	ldr	r3, [pc, #448]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6f      	ldr	r2, [pc, #444]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b6d      	ldr	r3, [pc, #436]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6c      	ldr	r2, [pc, #432]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0xb0>
 80025ec:	4b69      	ldr	r3, [pc, #420]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a68      	ldr	r2, [pc, #416]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b66      	ldr	r3, [pc, #408]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a65      	ldr	r2, [pc, #404]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff f950 	bl	80018b0 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002614:	f7ff f94c 	bl	80018b0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e207      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b5b      	ldr	r3, [pc, #364]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0xc0>
 8002632:	e014      	b.n	800265e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff f93c 	bl	80018b0 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800263c:	f7ff f938 	bl	80018b0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1f3      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	4b51      	ldr	r3, [pc, #324]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0xe8>
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d063      	beq.n	8002732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266a:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267e:	2b08      	cmp	r3, #8
 8002680:	d11c      	bne.n	80026bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002682:	4b44      	ldr	r3, [pc, #272]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d116      	bne.n	80026bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x152>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e1c7      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4937      	ldr	r1, [pc, #220]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	e03a      	b.n	8002732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c4:	4b34      	ldr	r3, [pc, #208]	; (8002798 <HAL_RCC_OscConfig+0x244>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7ff f8f1 	bl	80018b0 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d2:	f7ff f8ed 	bl	80018b0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1a8      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b28      	ldr	r3, [pc, #160]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4925      	ldr	r1, [pc, #148]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x244>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7ff f8d0 	bl	80018b0 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002714:	f7ff f8cc 	bl	80018b0 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e187      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d036      	beq.n	80027ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_RCC_OscConfig+0x248>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7ff f8b0 	bl	80018b0 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002754:	f7ff f8ac 	bl	80018b0 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e167      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x200>
 8002772:	e01b      	b.n	80027ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_OscConfig+0x248>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7ff f899 	bl	80018b0 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	e00e      	b.n	80027a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002782:	f7ff f895 	bl	80018b0 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d907      	bls.n	80027a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e150      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
 8002794:	40023800 	.word	0x40023800
 8002798:	42470000 	.word	0x42470000
 800279c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a0:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ea      	bne.n	8002782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8097 	beq.w	80028e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027be:	4b81      	ldr	r3, [pc, #516]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10f      	bne.n	80027ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	4b7d      	ldr	r3, [pc, #500]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a7c      	ldr	r2, [pc, #496]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b7a      	ldr	r3, [pc, #488]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b77      	ldr	r3, [pc, #476]	; (80029c8 <HAL_RCC_OscConfig+0x474>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b74      	ldr	r3, [pc, #464]	; (80029c8 <HAL_RCC_OscConfig+0x474>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a73      	ldr	r2, [pc, #460]	; (80029c8 <HAL_RCC_OscConfig+0x474>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7ff f855 	bl	80018b0 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7ff f851 	bl	80018b0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e10c      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b6a      	ldr	r3, [pc, #424]	; (80029c8 <HAL_RCC_OscConfig+0x474>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x2ea>
 8002830:	4b64      	ldr	r3, [pc, #400]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	4a63      	ldr	r2, [pc, #396]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6713      	str	r3, [r2, #112]	; 0x70
 800283c:	e01c      	b.n	8002878 <HAL_RCC_OscConfig+0x324>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b05      	cmp	r3, #5
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x30c>
 8002846:	4b5f      	ldr	r3, [pc, #380]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a5e      	ldr	r2, [pc, #376]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	; 0x70
 8002852:	4b5c      	ldr	r3, [pc, #368]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a5b      	ldr	r2, [pc, #364]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	e00b      	b.n	8002878 <HAL_RCC_OscConfig+0x324>
 8002860:	4b58      	ldr	r3, [pc, #352]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	4a57      	ldr	r2, [pc, #348]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	; 0x70
 800286c:	4b55      	ldr	r3, [pc, #340]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a54      	ldr	r2, [pc, #336]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7ff f816 	bl	80018b0 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7ff f812 	bl	80018b0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0cb      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289e:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ee      	beq.n	8002888 <HAL_RCC_OscConfig+0x334>
 80028aa:	e014      	b.n	80028d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7ff f800 	bl	80018b0 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fe fffc 	bl	80018b0 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0b5      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ca:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1ee      	bne.n	80028b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028dc:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	4a38      	ldr	r2, [pc, #224]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a1 	beq.w	8002a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f2:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d05c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d141      	bne.n	800298a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_RCC_OscConfig+0x478>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe ffd0 	bl	80018b0 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe ffcc 	bl	80018b0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e087      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	019b      	lsls	r3, r3, #6
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	3b01      	subs	r3, #1
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	491b      	ldr	r1, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x478>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe ffa5 	bl	80018b0 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296a:	f7fe ffa1 	bl	80018b0 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e05c      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x416>
 8002988:	e054      	b.n	8002a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_RCC_OscConfig+0x478>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe ff8e 	bl	80018b0 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe ff8a 	bl	80018b0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e045      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x444>
 80029b6:	e03d      	b.n	8002a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e038      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40007000 	.word	0x40007000
 80029cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x4ec>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d028      	beq.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d121      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d11a      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a00:	4013      	ands	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d111      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0cc      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b68      	ldr	r3, [pc, #416]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d90c      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b65      	ldr	r3, [pc, #404]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0b8      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b59      	ldr	r3, [pc, #356]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494d      	ldr	r1, [pc, #308]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d044      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d119      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b02:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e06f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e067      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4934      	ldr	r1, [pc, #208]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b34:	f7fe febc 	bl	80018b0 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7fe feb8 	bl	80018b0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e04f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d20c      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e032      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4916      	ldr	r1, [pc, #88]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490e      	ldr	r1, [pc, #56]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bca:	f000 f821 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490a      	ldr	r1, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fd5c 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00
 8002c00:	40023800 	.word	0x40023800
 8002c04:	08006f54 	.word	0x08006f54
 8002c08:	20000004 	.word	0x20000004
 8002c0c:	20000008 	.word	0x20000008

08002c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c14:	b090      	sub	sp, #64	; 0x40
 8002c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c20:	2300      	movs	r3, #0
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c28:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d00d      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x40>
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	f200 80a1 	bhi.w	8002d7c <HAL_RCC_GetSysClockFreq+0x16c>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d003      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c42:	e09b      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c48:	e09b      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c4a:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c4e:	e098      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c50:	4b4f      	ldr	r3, [pc, #316]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	627a      	str	r2, [r7, #36]	; 0x24
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c7c:	fb03 f201 	mul.w	r2, r3, r1
 8002c80:	2300      	movs	r3, #0
 8002c82:	fb00 f303 	mul.w	r3, r0, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	4a43      	ldr	r2, [pc, #268]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c8a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c90:	460a      	mov	r2, r1
 8002c92:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c96:	4413      	add	r3, r2
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	61fa      	str	r2, [r7, #28]
 8002ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002caa:	f7fd fa99 	bl	80001e0 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb6:	e053      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb8:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	617a      	str	r2, [r7, #20]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cca:	f04f 0b00 	mov.w	fp, #0
 8002cce:	4652      	mov	r2, sl
 8002cd0:	465b      	mov	r3, fp
 8002cd2:	f04f 0000 	mov.w	r0, #0
 8002cd6:	f04f 0100 	mov.w	r1, #0
 8002cda:	0159      	lsls	r1, r3, #5
 8002cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce0:	0150      	lsls	r0, r2, #5
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	ebb2 080a 	subs.w	r8, r2, sl
 8002cea:	eb63 090b 	sbc.w	r9, r3, fp
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d02:	ebb2 0408 	subs.w	r4, r2, r8
 8002d06:	eb63 0509 	sbc.w	r5, r3, r9
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	00eb      	lsls	r3, r5, #3
 8002d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d18:	00e2      	lsls	r2, r4, #3
 8002d1a:	4614      	mov	r4, r2
 8002d1c:	461d      	mov	r5, r3
 8002d1e:	eb14 030a 	adds.w	r3, r4, sl
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	eb45 030b 	adc.w	r3, r5, fp
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d36:	4629      	mov	r1, r5
 8002d38:	028b      	lsls	r3, r1, #10
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d40:	4621      	mov	r1, r4
 8002d42:	028a      	lsls	r2, r1, #10
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	60fa      	str	r2, [r7, #12]
 8002d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d54:	f7fd fa44 	bl	80001e0 <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3740      	adds	r7, #64	; 0x40
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	017d7840 	.word	0x017d7840

08002d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0b5b      	lsrs	r3, r3, #13
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08006f64 	.word	0x08006f64

08002ddc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	220f      	movs	r2, #15
 8002dea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_RCC_GetClockConfig+0x5c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0203 	and.w	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_GetClockConfig+0x5c>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_RCC_GetClockConfig+0x5c>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_GetClockConfig+0x5c>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	08db      	lsrs	r3, r3, #3
 8002e16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <HAL_RCC_GetClockConfig+0x60>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0207 	and.w	r2, r3, #7
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	601a      	str	r2, [r3, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40023c00 	.word	0x40023c00

08002e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e07b      	b.n	8002f4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d108      	bne.n	8002e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e62:	d009      	beq.n	8002e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
 8002e6a:	e005      	b.n	8002e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe fb8e 	bl	80015b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	ea42 0103 	orr.w	r1, r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0104 	and.w	r1, r3, #4
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	f003 0210 	and.w	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b088      	sub	sp, #32
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_SPI_Transmit+0x22>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e126      	b.n	80031c2 <HAL_SPI_Transmit+0x270>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f7c:	f7fe fc98 	bl	80018b0 <HAL_GetTick>
 8002f80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d002      	beq.n	8002f98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
 8002f94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f96:	e10b      	b.n	80031b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Transmit+0x52>
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fa8:	e102      	b.n	80031b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2203      	movs	r2, #3
 8002fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff0:	d10f      	bne.n	8003012 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003000:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003010:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d007      	beq.n	8003030 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800302e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003038:	d14b      	bne.n	80030d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_SPI_Transmit+0xf6>
 8003042:	8afb      	ldrh	r3, [r7, #22]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d13e      	bne.n	80030c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	881a      	ldrh	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	1c9a      	adds	r2, r3, #2
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800306c:	e02b      	b.n	80030c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b02      	cmp	r3, #2
 800307a:	d112      	bne.n	80030a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	881a      	ldrh	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	1c9a      	adds	r2, r3, #2
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	86da      	strh	r2, [r3, #54]	; 0x36
 80030a0:	e011      	b.n	80030c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a2:	f7fe fc05 	bl	80018b0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d803      	bhi.n	80030ba <HAL_SPI_Transmit+0x168>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d102      	bne.n	80030c0 <HAL_SPI_Transmit+0x16e>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030c4:	e074      	b.n	80031b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ce      	bne.n	800306e <HAL_SPI_Transmit+0x11c>
 80030d0:	e04c      	b.n	800316c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_SPI_Transmit+0x18e>
 80030da:	8afb      	ldrh	r3, [r7, #22]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d140      	bne.n	8003162 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003106:	e02c      	b.n	8003162 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d113      	bne.n	800313e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	330c      	adds	r3, #12
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	86da      	strh	r2, [r3, #54]	; 0x36
 800313c:	e011      	b.n	8003162 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800313e:	f7fe fbb7 	bl	80018b0 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d803      	bhi.n	8003156 <HAL_SPI_Transmit+0x204>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d102      	bne.n	800315c <HAL_SPI_Transmit+0x20a>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003160:	e026      	b.n	80031b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1cd      	bne.n	8003108 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	6839      	ldr	r1, [r7, #0]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f9ff 	bl	8003574 <SPI_EndRxTxTransaction>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e000      	b.n	80031b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80031ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_SPI_Transmit_DMA+0x20>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e09b      	b.n	8003324 <HAL_SPI_Transmit_DMA+0x158>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d002      	beq.n	8003206 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003200:	2302      	movs	r3, #2
 8003202:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003204:	e089      	b.n	800331a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_SPI_Transmit_DMA+0x46>
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003216:	e080      	b.n	800331a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2203      	movs	r2, #3
 800321c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325e:	d10f      	bne.n	8003280 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800327e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003284:	4a29      	ldr	r2, [pc, #164]	; (800332c <HAL_SPI_Transmit_DMA+0x160>)
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328c:	4a28      	ldr	r2, [pc, #160]	; (8003330 <HAL_SPI_Transmit_DMA+0x164>)
 800328e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	4a27      	ldr	r2, [pc, #156]	; (8003334 <HAL_SPI_Transmit_DMA+0x168>)
 8003296:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329c:	2200      	movs	r2, #0
 800329e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	4619      	mov	r1, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032b8:	f7fe fcba 	bl	8001c30 <HAL_DMA_Start_IT>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f043 0210 	orr.w	r2, r3, #16
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80032da:	e01e      	b.n	800331a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b40      	cmp	r3, #64	; 0x40
 80032e8:	d007      	beq.n	80032fa <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0220 	orr.w	r2, r2, #32
 8003308:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0202 	orr.w	r2, r2, #2
 8003318:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003322:	7dfb      	ldrb	r3, [r7, #23]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	08003409 	.word	0x08003409
 8003330:	08003361 	.word	0x08003361
 8003334:	08003425 	.word	0x08003425

08003338 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800336e:	f7fe fa9f 	bl	80018b0 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003382:	d03b      	beq.n	80033fc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0220 	bic.w	r2, r2, #32
 8003392:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0202 	bic.w	r2, r2, #2
 80033a2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	2164      	movs	r1, #100	; 0x64
 80033a8:	6978      	ldr	r0, [r7, #20]
 80033aa:	f000 f8e3 	bl	8003574 <SPI_EndRxTxTransaction>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	f043 0220 	orr.w	r2, r3, #32
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80033f4:	6978      	ldr	r0, [r7, #20]
 80033f6:	f7ff ffa9 	bl	800334c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80033fa:	e002      	b.n	8003402 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80033fc:	6978      	ldr	r0, [r7, #20]
 80033fe:	f7fd fa0f 	bl	8000820 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff ff8e 	bl	8003338 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0203 	bic.w	r2, r2, #3
 8003440:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f043 0210 	orr.w	r2, r3, #16
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff ff78 	bl	800334c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003474:	f7fe fa1c 	bl	80018b0 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	4413      	add	r3, r2
 8003482:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003484:	f7fe fa14 	bl	80018b0 <HAL_GetTick>
 8003488:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	015b      	lsls	r3, r3, #5
 8003490:	0d1b      	lsrs	r3, r3, #20
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	fb02 f303 	mul.w	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800349a:	e054      	b.n	8003546 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d050      	beq.n	8003546 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034a4:	f7fe fa04 	bl	80018b0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d902      	bls.n	80034ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d13d      	bne.n	8003536 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d2:	d111      	bne.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d004      	beq.n	80034e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e6:	d107      	bne.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003500:	d10f      	bne.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003520:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e017      	b.n	8003566 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	3b01      	subs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4013      	ands	r3, r2
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	bf0c      	ite	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	2300      	movne	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	429a      	cmp	r2, r3
 8003562:	d19b      	bne.n	800349c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000004 	.word	0x20000004

08003574 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x7c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <SPI_EndRxTxTransaction+0x80>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	0d5b      	lsrs	r3, r3, #21
 800358c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003590:	fb02 f303 	mul.w	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359e:	d112      	bne.n	80035c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2200      	movs	r2, #0
 80035a8:	2180      	movs	r1, #128	; 0x80
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f7ff ff5a 	bl	8003464 <SPI_WaitFlagStateUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e00f      	b.n	80035e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d0f2      	beq.n	80035c6 <SPI_EndRxTxTransaction+0x52>
 80035e0:	e000      	b.n	80035e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80035e2:	bf00      	nop
  }

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000004 	.word	0x20000004
 80035f4:	165e9f81 	.word	0x165e9f81

080035f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e041      	b.n	800368e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f839 	bl	8003696 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 f9ca 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d001      	beq.n	80036c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e044      	b.n	800374e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_TIM_Base_Start_IT+0xb0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d018      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x6c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d013      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x6c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <HAL_TIM_Base_Start_IT+0xb4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00e      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x6c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a19      	ldr	r2, [pc, #100]	; (8003764 <HAL_TIM_Base_Start_IT+0xb8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x6c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a17      	ldr	r2, [pc, #92]	; (8003768 <HAL_TIM_Base_Start_IT+0xbc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x6c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <HAL_TIM_Base_Start_IT+0xc0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d111      	bne.n	800373c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b06      	cmp	r3, #6
 8003728:	d010      	beq.n	800374c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373a:	e007      	b.n	800374c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800
 8003768:	40000c00 	.word	0x40000c00
 800376c:	40014000 	.word	0x40014000

08003770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d122      	bne.n	80037cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d11b      	bne.n	80037cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0202 	mvn.w	r2, #2
 800379c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8ee 	bl	8003994 <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8e0 	bl	8003980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8f1 	bl	80039a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d122      	bne.n	8003820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d11b      	bne.n	8003820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0204 	mvn.w	r2, #4
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8c4 	bl	8003994 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f8b6 	bl	8003980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8c7 	bl	80039a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b08      	cmp	r3, #8
 800382c:	d122      	bne.n	8003874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d11b      	bne.n	8003874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0208 	mvn.w	r2, #8
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2204      	movs	r2, #4
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f89a 	bl	8003994 <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f88c 	bl	8003980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f89d 	bl	80039a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b10      	cmp	r3, #16
 8003880:	d122      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b10      	cmp	r3, #16
 800388e:	d11b      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0210 	mvn.w	r2, #16
 8003898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2208      	movs	r2, #8
 800389e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f870 	bl	8003994 <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f862 	bl	8003980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f873 	bl	80039a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d10e      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0201 	mvn.w	r2, #1
 80038ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fe1c 	bl	800152c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d10e      	bne.n	8003920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d107      	bne.n	8003920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8e2 	bl	8003ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d10e      	bne.n	800394c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d107      	bne.n	800394c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f838 	bl	80039bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d10e      	bne.n	8003978 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b20      	cmp	r3, #32
 8003966:	d107      	bne.n	8003978 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0220 	mvn.w	r2, #32
 8003970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8ac 	bl	8003ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a34      	ldr	r2, [pc, #208]	; (8003ab4 <TIM_Base_SetConfig+0xe4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00f      	beq.n	8003a08 <TIM_Base_SetConfig+0x38>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ee:	d00b      	beq.n	8003a08 <TIM_Base_SetConfig+0x38>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a31      	ldr	r2, [pc, #196]	; (8003ab8 <TIM_Base_SetConfig+0xe8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <TIM_Base_SetConfig+0x38>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a30      	ldr	r2, [pc, #192]	; (8003abc <TIM_Base_SetConfig+0xec>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0x38>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a2f      	ldr	r2, [pc, #188]	; (8003ac0 <TIM_Base_SetConfig+0xf0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d108      	bne.n	8003a1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a25      	ldr	r2, [pc, #148]	; (8003ab4 <TIM_Base_SetConfig+0xe4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01b      	beq.n	8003a5a <TIM_Base_SetConfig+0x8a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d017      	beq.n	8003a5a <TIM_Base_SetConfig+0x8a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <TIM_Base_SetConfig+0xe8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <TIM_Base_SetConfig+0x8a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a21      	ldr	r2, [pc, #132]	; (8003abc <TIM_Base_SetConfig+0xec>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00f      	beq.n	8003a5a <TIM_Base_SetConfig+0x8a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a20      	ldr	r2, [pc, #128]	; (8003ac0 <TIM_Base_SetConfig+0xf0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <TIM_Base_SetConfig+0x8a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <TIM_Base_SetConfig+0xf4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <TIM_Base_SetConfig+0x8a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ac8 <TIM_Base_SetConfig+0xf8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_Base_SetConfig+0x8a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <TIM_Base_SetConfig+0xfc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <TIM_Base_SetConfig+0xe4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d103      	bne.n	8003aa0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	615a      	str	r2, [r3, #20]
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40014000 	.word	0x40014000
 8003ac8:	40014400 	.word	0x40014400
 8003acc:	40014800 	.word	0x40014800

08003ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <__NVIC_SetPriority>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	db0a      	blt.n	8003b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	490c      	ldr	r1, [pc, #48]	; (8003b44 <__NVIC_SetPriority+0x4c>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	0112      	lsls	r2, r2, #4
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b20:	e00a      	b.n	8003b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4908      	ldr	r1, [pc, #32]	; (8003b48 <__NVIC_SetPriority+0x50>)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	3b04      	subs	r3, #4
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	440b      	add	r3, r1
 8003b36:	761a      	strb	r2, [r3, #24]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000e100 	.word	0xe000e100
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <SysTick_Handler+0x1c>)
 8003b52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b54:	f001 fd28 	bl	80055a8 <xTaskGetSchedulerState>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b5e:	f002 fb13 	bl	8006188 <xPortSysTickHandler>
  }
}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000e010 	.word	0xe000e010

08003b6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b70:	2100      	movs	r1, #0
 8003b72:	f06f 0004 	mvn.w	r0, #4
 8003b76:	f7ff ffbf 	bl	8003af8 <__NVIC_SetPriority>
#endif
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b86:	f3ef 8305 	mrs	r3, IPSR
 8003b8a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b92:	f06f 0305 	mvn.w	r3, #5
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	e00c      	b.n	8003bb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <osKernelInitialize+0x44>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <osKernelInitialize+0x44>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	e002      	b.n	8003bb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bb4:	687b      	ldr	r3, [r7, #4]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	2000019c 	.word	0x2000019c

08003bc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bce:	f3ef 8305 	mrs	r3, IPSR
 8003bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8003bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bda:	f06f 0305 	mvn.w	r3, #5
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	e010      	b.n	8003c04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <osKernelStart+0x48>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d109      	bne.n	8003bfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bea:	f7ff ffbf 	bl	8003b6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <osKernelStart+0x48>)
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003bf4:	f001 f87c 	bl	8004cf0 <vTaskStartScheduler>
      stat = osOK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	e002      	b.n	8003c04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c04:	687b      	ldr	r3, [r7, #4]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	2000019c 	.word	0x2000019c

08003c14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08e      	sub	sp, #56	; 0x38
 8003c18:	af04      	add	r7, sp, #16
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c24:	f3ef 8305 	mrs	r3, IPSR
 8003c28:	617b      	str	r3, [r7, #20]
  return(result);
 8003c2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d17e      	bne.n	8003d2e <osThreadNew+0x11a>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d07b      	beq.n	8003d2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c3a:	2318      	movs	r3, #24
 8003c3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295
 8003c46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d045      	beq.n	8003cda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <osThreadNew+0x48>
        name = attr->name;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <osThreadNew+0x6e>
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b38      	cmp	r3, #56	; 0x38
 8003c74:	d805      	bhi.n	8003c82 <osThreadNew+0x6e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <osThreadNew+0x72>
        return (NULL);
 8003c82:	2300      	movs	r3, #0
 8003c84:	e054      	b.n	8003d30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00e      	beq.n	8003cbc <osThreadNew+0xa8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2bbb      	cmp	r3, #187	; 0xbb
 8003ca4:	d90a      	bls.n	8003cbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <osThreadNew+0xa8>
        mem = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	e010      	b.n	8003cde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10c      	bne.n	8003cde <osThreadNew+0xca>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d108      	bne.n	8003cde <osThreadNew+0xca>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <osThreadNew+0xca>
          mem = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e001      	b.n	8003cde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d110      	bne.n	8003d06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cec:	9202      	str	r2, [sp, #8]
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	6a3a      	ldr	r2, [r7, #32]
 8003cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fe0c 	bl	8004918 <xTaskCreateStatic>
 8003d00:	4603      	mov	r3, r0
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	e013      	b.n	8003d2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d110      	bne.n	8003d2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	f107 0310 	add.w	r3, r7, #16
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fe57 	bl	80049d2 <xTaskCreate>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <osThreadNew+0x11a>
            hTask = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d2e:	693b      	ldr	r3, [r7, #16]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3728      	adds	r7, #40	; 0x28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d40:	f3ef 8305 	mrs	r3, IPSR
 8003d44:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <osDelay+0x1c>
    stat = osErrorISR;
 8003d4c:	f06f 0305 	mvn.w	r3, #5
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e007      	b.n	8003d64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 ff92 	bl	8004c88 <vTaskDelay>
    }
  }

  return (stat);
 8003d64:	68fb      	ldr	r3, [r7, #12]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a07      	ldr	r2, [pc, #28]	; (8003d9c <vApplicationGetIdleTaskMemory+0x2c>)
 8003d80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <vApplicationGetIdleTaskMemory+0x30>)
 8003d86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2280      	movs	r2, #128	; 0x80
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	200001a0 	.word	0x200001a0
 8003da0:	2000025c 	.word	0x2000025c

08003da4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003db4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4a06      	ldr	r2, [pc, #24]	; (8003dd4 <vApplicationGetTimerTaskMemory+0x30>)
 8003dba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	2000045c 	.word	0x2000045c
 8003dd4:	20000518 	.word	0x20000518

08003dd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f103 0208 	add.w	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f103 0208 	add.w	r2, r3, #8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f103 0208 	add.w	r2, r3, #8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d103      	bne.n	8003e9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e00c      	b.n	8003eb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e002      	b.n	8003ea8 <vListInsert+0x2e>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d2f6      	bcs.n	8003ea2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6892      	ldr	r2, [r2, #8]
 8003f02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6852      	ldr	r2, [r2, #4]
 8003f0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d103      	bne.n	8003f20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	1e5a      	subs	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f6a:	f002 f87b 	bl	8006064 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	441a      	add	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	68f9      	ldr	r1, [r7, #12]
 8003f9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	22ff      	movs	r2, #255	; 0xff
 8003fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22ff      	movs	r2, #255	; 0xff
 8003fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d114      	bne.n	8003fea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01a      	beq.n	8003ffe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3310      	adds	r3, #16
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f929 	bl	8005224 <xTaskRemoveFromEventList>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d012      	beq.n	8003ffe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <xQueueGenericReset+0xcc>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	e009      	b.n	8003ffe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3310      	adds	r3, #16
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fef2 	bl	8003dd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3324      	adds	r3, #36	; 0x24
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff feed 	bl	8003dd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ffe:	f002 f861 	bl	80060c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004002:	2301      	movs	r3, #1
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08e      	sub	sp, #56	; 0x38
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <xQueueGenericCreateStatic+0x52>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <xQueueGenericCreateStatic+0x56>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <xQueueGenericCreateStatic+0x58>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	623b      	str	r3, [r7, #32]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <xQueueGenericCreateStatic+0x7e>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <xQueueGenericCreateStatic+0x82>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <xQueueGenericCreateStatic+0x84>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	61fb      	str	r3, [r7, #28]
}
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040ae:	2350      	movs	r3, #80	; 0x50
 80040b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b50      	cmp	r3, #80	; 0x50
 80040b6:	d00a      	beq.n	80040ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	61bb      	str	r3, [r7, #24]
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f805 	bl	8004100 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3730      	adds	r7, #48	; 0x30
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e002      	b.n	8004122 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800412e:	2101      	movs	r1, #1
 8004130:	69b8      	ldr	r0, [r7, #24]
 8004132:	f7ff ff05 	bl	8003f40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08e      	sub	sp, #56	; 0x38
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004156:	2300      	movs	r3, #0
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueGenericSend+0x32>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d103      	bne.n	8004188 <xQueueGenericSend+0x40>
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <xQueueGenericSend+0x44>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <xQueueGenericSend+0x46>
 800418c:	2300      	movs	r3, #0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <xQueueGenericSend+0x60>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d103      	bne.n	80041b6 <xQueueGenericSend+0x6e>
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <xQueueGenericSend+0x72>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <xQueueGenericSend+0x74>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	623b      	str	r3, [r7, #32]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041d6:	f001 f9e7 	bl	80055a8 <xTaskGetSchedulerState>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <xQueueGenericSend+0x9e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <xQueueGenericSend+0xa2>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <xQueueGenericSend+0xa4>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <xQueueGenericSend+0xbe>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	61fb      	str	r3, [r7, #28]
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004206:	f001 ff2d 	bl	8006064 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <xQueueGenericSend+0xd4>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d129      	bne.n	8004270 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004222:	f000 fa0b 	bl	800463c <prvCopyDataToQueue>
 8004226:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d010      	beq.n	8004252 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	3324      	adds	r3, #36	; 0x24
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fff5 	bl	8005224 <xTaskRemoveFromEventList>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004240:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <xQueueGenericSend+0x1f8>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	e00a      	b.n	8004268 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004258:	4b39      	ldr	r3, [pc, #228]	; (8004340 <xQueueGenericSend+0x1f8>)
 800425a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004268:	f001 ff2c 	bl	80060c4 <vPortExitCritical>
				return pdPASS;
 800426c:	2301      	movs	r3, #1
 800426e:	e063      	b.n	8004338 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d103      	bne.n	800427e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004276:	f001 ff25 	bl	80060c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800427a:	2300      	movs	r3, #0
 800427c:	e05c      	b.n	8004338 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800427e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4618      	mov	r0, r3
 800428a:	f001 f82f 	bl	80052ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800428e:	2301      	movs	r3, #1
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004292:	f001 ff17 	bl	80060c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004296:	f000 fd9b 	bl	8004dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800429a:	f001 fee3 	bl	8006064 <vPortEnterCritical>
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a4:	b25b      	sxtb	r3, r3
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d103      	bne.n	80042b4 <xQueueGenericSend+0x16c>
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ba:	b25b      	sxtb	r3, r3
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d103      	bne.n	80042ca <xQueueGenericSend+0x182>
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042ca:	f001 fefb 	bl	80060c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ce:	1d3a      	adds	r2, r7, #4
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 f81e 	bl	8005318 <xTaskCheckForTimeOut>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d124      	bne.n	800432c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042e4:	f000 faa2 	bl	800482c <prvIsQueueFull>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	3310      	adds	r3, #16
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4611      	mov	r1, r2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 ff44 	bl	8005184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fe:	f000 fa2d 	bl	800475c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004302:	f000 fd73 	bl	8004dec <xTaskResumeAll>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	f47f af7c 	bne.w	8004206 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <xQueueGenericSend+0x1f8>)
 8004310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	e772      	b.n	8004206 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004322:	f000 fa1b 	bl	800475c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004326:	f000 fd61 	bl	8004dec <xTaskResumeAll>
 800432a:	e76c      	b.n	8004206 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800432c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800432e:	f000 fa15 	bl	800475c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004332:	f000 fd5b 	bl	8004dec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004336:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004338:	4618      	mov	r0, r3
 800433a:	3738      	adds	r7, #56	; 0x38
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	e000ed04 	.word	0xe000ed04

08004344 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b090      	sub	sp, #64	; 0x40
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d103      	bne.n	8004380 <xQueueGenericSendFromISR+0x3c>
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <xQueueGenericSendFromISR+0x40>
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <xQueueGenericSendFromISR+0x42>
 8004384:	2300      	movs	r3, #0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d103      	bne.n	80043ae <xQueueGenericSendFromISR+0x6a>
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <xQueueGenericSendFromISR+0x6e>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <xQueueGenericSendFromISR+0x70>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	623b      	str	r3, [r7, #32]
}
 80043ca:	bf00      	nop
 80043cc:	e7fe      	b.n	80043cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043ce:	f001 ff2b 	bl	8006228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043d2:	f3ef 8211 	mrs	r2, BASEPRI
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	61fa      	str	r2, [r7, #28]
 80043e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d302      	bcc.n	8004400 <xQueueGenericSendFromISR+0xbc>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d12f      	bne.n	8004460 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004416:	f000 f911 	bl	800463c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800441a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d112      	bne.n	800444a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	2b00      	cmp	r3, #0
 800442a:	d016      	beq.n	800445a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	3324      	adds	r3, #36	; 0x24
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fef7 	bl	8005224 <xTaskRemoveFromEventList>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00e      	beq.n	800445a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e007      	b.n	800445a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800444a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800444e:	3301      	adds	r3, #1
 8004450:	b2db      	uxtb	r3, r3
 8004452:	b25a      	sxtb	r2, r3
 8004454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800445a:	2301      	movs	r3, #1
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800445e:	e001      	b.n	8004464 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004460:	2300      	movs	r3, #0
 8004462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004466:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800446e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004472:	4618      	mov	r0, r3
 8004474:	3740      	adds	r7, #64	; 0x40
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08c      	sub	sp, #48	; 0x30
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004488:	2300      	movs	r3, #0
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <xQueueReceive+0x30>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	623b      	str	r3, [r7, #32]
}
 80044a8:	bf00      	nop
 80044aa:	e7fe      	b.n	80044aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <xQueueReceive+0x3e>
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <xQueueReceive+0x42>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <xQueueReceive+0x44>
 80044be:	2300      	movs	r3, #0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <xQueueReceive+0x5e>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	61fb      	str	r3, [r7, #28]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044da:	f001 f865 	bl	80055a8 <xTaskGetSchedulerState>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <xQueueReceive+0x6e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <xQueueReceive+0x72>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <xQueueReceive+0x74>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <xQueueReceive+0x8e>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	61bb      	str	r3, [r7, #24]
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800450a:	f001 fdab 	bl	8006064 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01f      	beq.n	800455a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451e:	f000 f8f7 	bl	8004710 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	1e5a      	subs	r2, r3, #1
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00f      	beq.n	8004552 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	3310      	adds	r3, #16
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fe74 	bl	8005224 <xTaskRemoveFromEventList>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004542:	4b3d      	ldr	r3, [pc, #244]	; (8004638 <xQueueReceive+0x1bc>)
 8004544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004552:	f001 fdb7 	bl	80060c4 <vPortExitCritical>
				return pdPASS;
 8004556:	2301      	movs	r3, #1
 8004558:	e069      	b.n	800462e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004560:	f001 fdb0 	bl	80060c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004564:	2300      	movs	r3, #0
 8004566:	e062      	b.n	800462e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800456e:	f107 0310 	add.w	r3, r7, #16
 8004572:	4618      	mov	r0, r3
 8004574:	f000 feba 	bl	80052ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004578:	2301      	movs	r3, #1
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800457c:	f001 fda2 	bl	80060c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004580:	f000 fc26 	bl	8004dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004584:	f001 fd6e 	bl	8006064 <vPortEnterCritical>
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800458e:	b25b      	sxtb	r3, r3
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d103      	bne.n	800459e <xQueueReceive+0x122>
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a4:	b25b      	sxtb	r3, r3
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d103      	bne.n	80045b4 <xQueueReceive+0x138>
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b4:	f001 fd86 	bl	80060c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045b8:	1d3a      	adds	r2, r7, #4
 80045ba:	f107 0310 	add.w	r3, r7, #16
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fea9 	bl	8005318 <xTaskCheckForTimeOut>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d123      	bne.n	8004614 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ce:	f000 f917 	bl	8004800 <prvIsQueueEmpty>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d017      	beq.n	8004608 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	3324      	adds	r3, #36	; 0x24
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fdcf 	bl	8005184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e8:	f000 f8b8 	bl	800475c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045ec:	f000 fbfe 	bl	8004dec <xTaskResumeAll>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d189      	bne.n	800450a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <xQueueReceive+0x1bc>)
 80045f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	e780      	b.n	800450a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800460a:	f000 f8a7 	bl	800475c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800460e:	f000 fbed 	bl	8004dec <xTaskResumeAll>
 8004612:	e77a      	b.n	800450a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004616:	f000 f8a1 	bl	800475c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800461a:	f000 fbe7 	bl	8004dec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800461e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004620:	f000 f8ee 	bl	8004800 <prvIsQueueEmpty>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	f43f af6f 	beq.w	800450a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800462c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800462e:	4618      	mov	r0, r3
 8004630:	3730      	adds	r7, #48	; 0x30
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10d      	bne.n	8004676 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d14d      	bne.n	80046fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 ffbc 	bl	80055e4 <xTaskPriorityDisinherit>
 800466c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	e043      	b.n	80046fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d119      	bne.n	80046b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6858      	ldr	r0, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	461a      	mov	r2, r3
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	f002 f81e 	bl	80066c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	441a      	add	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d32b      	bcc.n	80046fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	e026      	b.n	80046fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	68d8      	ldr	r0, [r3, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	461a      	mov	r2, r3
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	f002 f804 	bl	80066c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	425b      	negs	r3, r3
 80046ca:	441a      	add	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d207      	bcs.n	80046ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	425b      	negs	r3, r3
 80046e6:	441a      	add	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d105      	bne.n	80046fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004706:	697b      	ldr	r3, [r7, #20]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d018      	beq.n	8004754 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	441a      	add	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	429a      	cmp	r2, r3
 800473a:	d303      	bcc.n	8004744 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68d9      	ldr	r1, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	461a      	mov	r2, r3
 800474e:	6838      	ldr	r0, [r7, #0]
 8004750:	f001 ffba 	bl	80066c8 <memcpy>
	}
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004764:	f001 fc7e 	bl	8006064 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800476e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004770:	e011      	b.n	8004796 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3324      	adds	r3, #36	; 0x24
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fd50 	bl	8005224 <xTaskRemoveFromEventList>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800478a:	f000 fe27 	bl	80053dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	3b01      	subs	r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	dce9      	bgt.n	8004772 <prvUnlockQueue+0x16>
 800479e:	e000      	b.n	80047a2 <prvUnlockQueue+0x46>
					break;
 80047a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	22ff      	movs	r2, #255	; 0xff
 80047a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047aa:	f001 fc8b 	bl	80060c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047ae:	f001 fc59 	bl	8006064 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047ba:	e011      	b.n	80047e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d012      	beq.n	80047ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3310      	adds	r3, #16
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fd2b 	bl	8005224 <xTaskRemoveFromEventList>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047d4:	f000 fe02 	bl	80053dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047d8:	7bbb      	ldrb	r3, [r7, #14]
 80047da:	3b01      	subs	r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	dce9      	bgt.n	80047bc <prvUnlockQueue+0x60>
 80047e8:	e000      	b.n	80047ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	22ff      	movs	r2, #255	; 0xff
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047f4:	f001 fc66 	bl	80060c4 <vPortExitCritical>
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004808:	f001 fc2c 	bl	8006064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004814:	2301      	movs	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e001      	b.n	800481e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800481e:	f001 fc51 	bl	80060c4 <vPortExitCritical>

	return xReturn;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004834:	f001 fc16 	bl	8006064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	429a      	cmp	r2, r3
 8004842:	d102      	bne.n	800484a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004844:	2301      	movs	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e001      	b.n	800484e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800484e:	f001 fc39 	bl	80060c4 <vPortExitCritical>

	return xReturn;
 8004852:	68fb      	ldr	r3, [r7, #12]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	e014      	b.n	8004896 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800486c:	4a0f      	ldr	r2, [pc, #60]	; (80048ac <vQueueAddToRegistry+0x50>)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10b      	bne.n	8004890 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004878:	490c      	ldr	r1, [pc, #48]	; (80048ac <vQueueAddToRegistry+0x50>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004882:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <vQueueAddToRegistry+0x50>)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4413      	add	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800488e:	e006      	b.n	800489e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b07      	cmp	r3, #7
 800489a:	d9e7      	bls.n	800486c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000918 	.word	0x20000918

080048b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048c0:	f001 fbd0 	bl	8006064 <vPortEnterCritical>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048ca:	b25b      	sxtb	r3, r3
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d103      	bne.n	80048da <vQueueWaitForMessageRestricted+0x2a>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048e0:	b25b      	sxtb	r3, r3
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e6:	d103      	bne.n	80048f0 <vQueueWaitForMessageRestricted+0x40>
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048f0:	f001 fbe8 	bl	80060c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3324      	adds	r3, #36	; 0x24
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fc61 	bl	80051cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f7ff ff26 	bl	800475c <prvUnlockQueue>
	}
 8004910:	bf00      	nop
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08e      	sub	sp, #56	; 0x38
 800491c:	af04      	add	r7, sp, #16
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <xTaskCreateStatic+0x2a>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	623b      	str	r3, [r7, #32]
}
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xTaskCreateStatic+0x46>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	61fb      	str	r3, [r7, #28]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800495e:	23bc      	movs	r3, #188	; 0xbc
 8004960:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2bbc      	cmp	r3, #188	; 0xbc
 8004966:	d00a      	beq.n	800497e <xTaskCreateStatic+0x66>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	61bb      	str	r3, [r7, #24]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800497e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01e      	beq.n	80049c4 <xTaskCreateStatic+0xac>
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01b      	beq.n	80049c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004994:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	2202      	movs	r2, #2
 800499a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800499e:	2300      	movs	r3, #0
 80049a0:	9303      	str	r3, [sp, #12]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	9302      	str	r3, [sp, #8]
 80049a6:	f107 0314 	add.w	r3, r7, #20
 80049aa:	9301      	str	r3, [sp, #4]
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f850 	bl	8004a5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049be:	f000 f8f3 	bl	8004ba8 <prvAddNewTaskToReadyList>
 80049c2:	e001      	b.n	80049c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049c8:	697b      	ldr	r3, [r7, #20]
	}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3728      	adds	r7, #40	; 0x28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b08c      	sub	sp, #48	; 0x30
 80049d6:	af04      	add	r7, sp, #16
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	4613      	mov	r3, r2
 80049e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 fc5e 	bl	80062a8 <pvPortMalloc>
 80049ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00e      	beq.n	8004a12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049f4:	20bc      	movs	r0, #188	; 0xbc
 80049f6:	f001 fc57 	bl	80062a8 <pvPortMalloc>
 80049fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
 8004a08:	e005      	b.n	8004a16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a0a:	6978      	ldr	r0, [r7, #20]
 8004a0c:	f001 fd18 	bl	8006440 <vPortFree>
 8004a10:	e001      	b.n	8004a16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d017      	beq.n	8004a4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a24:	88fa      	ldrh	r2, [r7, #6]
 8004a26:	2300      	movs	r3, #0
 8004a28:	9303      	str	r3, [sp, #12]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	9302      	str	r3, [sp, #8]
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f80e 	bl	8004a5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a40:	69f8      	ldr	r0, [r7, #28]
 8004a42:	f000 f8b1 	bl	8004ba8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	e002      	b.n	8004a52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a52:	69bb      	ldr	r3, [r7, #24]
	}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	461a      	mov	r2, r3
 8004a74:	21a5      	movs	r1, #165	; 0xa5
 8004a76:	f001 fe35 	bl	80066e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a84:	3b01      	subs	r3, #1
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f023 0307 	bic.w	r3, r3, #7
 8004a92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	617b      	str	r3, [r7, #20]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01f      	beq.n	8004afa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e012      	b.n	8004ae6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	7819      	ldrb	r1, [r3, #0]
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	3334      	adds	r3, #52	; 0x34
 8004ad0:	460a      	mov	r2, r1
 8004ad2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d006      	beq.n	8004aee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	2b0f      	cmp	r3, #15
 8004aea:	d9e9      	bls.n	8004ac0 <prvInitialiseNewTask+0x64>
 8004aec:	e000      	b.n	8004af0 <prvInitialiseNewTask+0x94>
			{
				break;
 8004aee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004af8:	e003      	b.n	8004b02 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	2b37      	cmp	r3, #55	; 0x37
 8004b06:	d901      	bls.n	8004b0c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b08:	2337      	movs	r3, #55	; 0x37
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	3304      	adds	r3, #4
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff f978 	bl	8003e18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	3318      	adds	r3, #24
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff f973 	bl	8003e18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	3354      	adds	r3, #84	; 0x54
 8004b5c:	2260      	movs	r2, #96	; 0x60
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 fdbf 	bl	80066e4 <memset>
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	4a0c      	ldr	r2, [pc, #48]	; (8004b9c <prvInitialiseNewTask+0x140>)
 8004b6a:	659a      	str	r2, [r3, #88]	; 0x58
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <prvInitialiseNewTask+0x144>)
 8004b70:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	4a0b      	ldr	r2, [pc, #44]	; (8004ba4 <prvInitialiseNewTask+0x148>)
 8004b76:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	69b8      	ldr	r0, [r7, #24]
 8004b7e:	f001 f941 	bl	8005e04 <pxPortInitialiseStack>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b94:	bf00      	nop
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	08006f94 	.word	0x08006f94
 8004ba0:	08006fb4 	.word	0x08006fb4
 8004ba4:	08006f74 	.word	0x08006f74

08004ba8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004bb0:	f001 fa58 	bl	8006064 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bb4:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <prvAddNewTaskToReadyList+0xc4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	4a2c      	ldr	r2, [pc, #176]	; (8004c6c <prvAddNewTaskToReadyList+0xc4>)
 8004bbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bbe:	4b2c      	ldr	r3, [pc, #176]	; (8004c70 <prvAddNewTaskToReadyList+0xc8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bc6:	4a2a      	ldr	r2, [pc, #168]	; (8004c70 <prvAddNewTaskToReadyList+0xc8>)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bcc:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <prvAddNewTaskToReadyList+0xc4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d110      	bne.n	8004bf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bd4:	f000 fc26 	bl	8005424 <prvInitialiseTaskLists>
 8004bd8:	e00d      	b.n	8004bf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bda:	4b26      	ldr	r3, [pc, #152]	; (8004c74 <prvAddNewTaskToReadyList+0xcc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004be2:	4b23      	ldr	r3, [pc, #140]	; (8004c70 <prvAddNewTaskToReadyList+0xc8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d802      	bhi.n	8004bf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bf0:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <prvAddNewTaskToReadyList+0xc8>)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <prvAddNewTaskToReadyList+0xd0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	4a1e      	ldr	r2, [pc, #120]	; (8004c78 <prvAddNewTaskToReadyList+0xd0>)
 8004bfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c00:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <prvAddNewTaskToReadyList+0xd0>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <prvAddNewTaskToReadyList+0xd4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d903      	bls.n	8004c1c <prvAddNewTaskToReadyList+0x74>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <prvAddNewTaskToReadyList+0xd4>)
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <prvAddNewTaskToReadyList+0xd8>)
 8004c2a:	441a      	add	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f7ff f8fd 	bl	8003e32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c38:	f001 fa44 	bl	80060c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <prvAddNewTaskToReadyList+0xcc>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00e      	beq.n	8004c62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <prvAddNewTaskToReadyList+0xc8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d207      	bcs.n	8004c62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c52:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <prvAddNewTaskToReadyList+0xdc>)
 8004c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000e2c 	.word	0x20000e2c
 8004c70:	20000958 	.word	0x20000958
 8004c74:	20000e38 	.word	0x20000e38
 8004c78:	20000e48 	.word	0x20000e48
 8004c7c:	20000e34 	.word	0x20000e34
 8004c80:	2000095c 	.word	0x2000095c
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d017      	beq.n	8004cca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c9a:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <vTaskDelay+0x60>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <vTaskDelay+0x30>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	60bb      	str	r3, [r7, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	e7fe      	b.n	8004cb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004cb8:	f000 f88a 	bl	8004dd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fcfe 	bl	80056c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cc4:	f000 f892 	bl	8004dec <xTaskResumeAll>
 8004cc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d107      	bne.n	8004ce0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <vTaskDelay+0x64>)
 8004cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000e54 	.word	0x20000e54
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cfe:	463a      	mov	r2, r7
 8004d00:	1d39      	adds	r1, r7, #4
 8004d02:	f107 0308 	add.w	r3, r7, #8
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff f832 	bl	8003d70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d0c:	6839      	ldr	r1, [r7, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	9202      	str	r2, [sp, #8]
 8004d14:	9301      	str	r3, [sp, #4]
 8004d16:	2300      	movs	r3, #0
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	460a      	mov	r2, r1
 8004d1e:	4924      	ldr	r1, [pc, #144]	; (8004db0 <vTaskStartScheduler+0xc0>)
 8004d20:	4824      	ldr	r0, [pc, #144]	; (8004db4 <vTaskStartScheduler+0xc4>)
 8004d22:	f7ff fdf9 	bl	8004918 <xTaskCreateStatic>
 8004d26:	4603      	mov	r3, r0
 8004d28:	4a23      	ldr	r2, [pc, #140]	; (8004db8 <vTaskStartScheduler+0xc8>)
 8004d2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d2c:	4b22      	ldr	r3, [pc, #136]	; (8004db8 <vTaskStartScheduler+0xc8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d34:	2301      	movs	r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	e001      	b.n	8004d3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d102      	bne.n	8004d4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d44:	f000 fd10 	bl	8005768 <xTimerCreateTimerTask>
 8004d48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d11b      	bne.n	8004d88 <vTaskStartScheduler+0x98>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	613b      	str	r3, [r7, #16]
}
 8004d62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d64:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <vTaskStartScheduler+0xcc>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3354      	adds	r3, #84	; 0x54
 8004d6a:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <vTaskStartScheduler+0xd0>)
 8004d6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <vTaskStartScheduler+0xd4>)
 8004d70:	f04f 32ff 	mov.w	r2, #4294967295
 8004d74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <vTaskStartScheduler+0xd8>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d7c:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <vTaskStartScheduler+0xdc>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d82:	f001 f8cd 	bl	8005f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d86:	e00e      	b.n	8004da6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d10a      	bne.n	8004da6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	60fb      	str	r3, [r7, #12]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <vTaskStartScheduler+0xb4>
}
 8004da6:	bf00      	nop
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	080068b4 	.word	0x080068b4
 8004db4:	080053f5 	.word	0x080053f5
 8004db8:	20000e50 	.word	0x20000e50
 8004dbc:	20000958 	.word	0x20000958
 8004dc0:	20000014 	.word	0x20000014
 8004dc4:	20000e4c 	.word	0x20000e4c
 8004dc8:	20000e38 	.word	0x20000e38
 8004dcc:	20000e30 	.word	0x20000e30

08004dd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004dd4:	4b04      	ldr	r3, [pc, #16]	; (8004de8 <vTaskSuspendAll+0x18>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	4a03      	ldr	r2, [pc, #12]	; (8004de8 <vTaskSuspendAll+0x18>)
 8004ddc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004dde:	bf00      	nop
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	20000e54 	.word	0x20000e54

08004dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dfa:	4b42      	ldr	r3, [pc, #264]	; (8004f04 <xTaskResumeAll+0x118>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	603b      	str	r3, [r7, #0]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e18:	f001 f924 	bl	8006064 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e1c:	4b39      	ldr	r3, [pc, #228]	; (8004f04 <xTaskResumeAll+0x118>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	4a38      	ldr	r2, [pc, #224]	; (8004f04 <xTaskResumeAll+0x118>)
 8004e24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e26:	4b37      	ldr	r3, [pc, #220]	; (8004f04 <xTaskResumeAll+0x118>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d162      	bne.n	8004ef4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e2e:	4b36      	ldr	r3, [pc, #216]	; (8004f08 <xTaskResumeAll+0x11c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d05e      	beq.n	8004ef4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e36:	e02f      	b.n	8004e98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e38:	4b34      	ldr	r3, [pc, #208]	; (8004f0c <xTaskResumeAll+0x120>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3318      	adds	r3, #24
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff f851 	bl	8003eec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff f84c 	bl	8003eec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	4b2d      	ldr	r3, [pc, #180]	; (8004f10 <xTaskResumeAll+0x124>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d903      	bls.n	8004e68 <xTaskResumeAll+0x7c>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	4a2a      	ldr	r2, [pc, #168]	; (8004f10 <xTaskResumeAll+0x124>)
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4a27      	ldr	r2, [pc, #156]	; (8004f14 <xTaskResumeAll+0x128>)
 8004e76:	441a      	add	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f7fe ffd7 	bl	8003e32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e88:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <xTaskResumeAll+0x12c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e92:	4b22      	ldr	r3, [pc, #136]	; (8004f1c <xTaskResumeAll+0x130>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e98:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <xTaskResumeAll+0x120>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1cb      	bne.n	8004e38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ea6:	f000 fb5f 	bl	8005568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004eaa:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <xTaskResumeAll+0x134>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d010      	beq.n	8004ed8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004eb6:	f000 f847 	bl	8004f48 <xTaskIncrementTick>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ec0:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <xTaskResumeAll+0x130>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f1      	bne.n	8004eb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004ed2:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <xTaskResumeAll+0x134>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ed8:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <xTaskResumeAll+0x130>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d009      	beq.n	8004ef4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <xTaskResumeAll+0x138>)
 8004ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ef4:	f001 f8e6 	bl	80060c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000e54 	.word	0x20000e54
 8004f08:	20000e2c 	.word	0x20000e2c
 8004f0c:	20000dec 	.word	0x20000dec
 8004f10:	20000e34 	.word	0x20000e34
 8004f14:	2000095c 	.word	0x2000095c
 8004f18:	20000958 	.word	0x20000958
 8004f1c:	20000e40 	.word	0x20000e40
 8004f20:	20000e3c 	.word	0x20000e3c
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <xTaskGetTickCount+0x1c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f34:	687b      	ldr	r3, [r7, #4]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20000e30 	.word	0x20000e30

08004f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f52:	4b4f      	ldr	r3, [pc, #316]	; (8005090 <xTaskIncrementTick+0x148>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f040 808f 	bne.w	800507a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f5c:	4b4d      	ldr	r3, [pc, #308]	; (8005094 <xTaskIncrementTick+0x14c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f64:	4a4b      	ldr	r2, [pc, #300]	; (8005094 <xTaskIncrementTick+0x14c>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d120      	bne.n	8004fb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f70:	4b49      	ldr	r3, [pc, #292]	; (8005098 <xTaskIncrementTick+0x150>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <xTaskIncrementTick+0x48>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <xTaskIncrementTick+0x46>
 8004f90:	4b41      	ldr	r3, [pc, #260]	; (8005098 <xTaskIncrementTick+0x150>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	4b41      	ldr	r3, [pc, #260]	; (800509c <xTaskIncrementTick+0x154>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a3f      	ldr	r2, [pc, #252]	; (8005098 <xTaskIncrementTick+0x150>)
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	4a3f      	ldr	r2, [pc, #252]	; (800509c <xTaskIncrementTick+0x154>)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4b3e      	ldr	r3, [pc, #248]	; (80050a0 <xTaskIncrementTick+0x158>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	4a3d      	ldr	r2, [pc, #244]	; (80050a0 <xTaskIncrementTick+0x158>)
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	f000 fadb 	bl	8005568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fb2:	4b3c      	ldr	r3, [pc, #240]	; (80050a4 <xTaskIncrementTick+0x15c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d349      	bcc.n	8005050 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fbc:	4b36      	ldr	r3, [pc, #216]	; (8005098 <xTaskIncrementTick+0x150>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d104      	bne.n	8004fd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc6:	4b37      	ldr	r3, [pc, #220]	; (80050a4 <xTaskIncrementTick+0x15c>)
 8004fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fcc:	601a      	str	r2, [r3, #0]
					break;
 8004fce:	e03f      	b.n	8005050 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd0:	4b31      	ldr	r3, [pc, #196]	; (8005098 <xTaskIncrementTick+0x150>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d203      	bcs.n	8004ff0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fe8:	4a2e      	ldr	r2, [pc, #184]	; (80050a4 <xTaskIncrementTick+0x15c>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fee:	e02f      	b.n	8005050 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe ff79 	bl	8003eec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	3318      	adds	r3, #24
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe ff70 	bl	8003eec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	4b25      	ldr	r3, [pc, #148]	; (80050a8 <xTaskIncrementTick+0x160>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d903      	bls.n	8005020 <xTaskIncrementTick+0xd8>
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <xTaskIncrementTick+0x160>)
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4a1f      	ldr	r2, [pc, #124]	; (80050ac <xTaskIncrementTick+0x164>)
 800502e:	441a      	add	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	3304      	adds	r3, #4
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f7fe fefb 	bl	8003e32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <xTaskIncrementTick+0x168>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	429a      	cmp	r2, r3
 8005048:	d3b8      	bcc.n	8004fbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800504a:	2301      	movs	r3, #1
 800504c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800504e:	e7b5      	b.n	8004fbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005050:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <xTaskIncrementTick+0x168>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005056:	4915      	ldr	r1, [pc, #84]	; (80050ac <xTaskIncrementTick+0x164>)
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d901      	bls.n	800506c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005068:	2301      	movs	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800506c:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <xTaskIncrementTick+0x16c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005074:	2301      	movs	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e004      	b.n	8005084 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800507a:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <xTaskIncrementTick+0x170>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3301      	adds	r3, #1
 8005080:	4a0d      	ldr	r2, [pc, #52]	; (80050b8 <xTaskIncrementTick+0x170>)
 8005082:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005084:	697b      	ldr	r3, [r7, #20]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000e54 	.word	0x20000e54
 8005094:	20000e30 	.word	0x20000e30
 8005098:	20000de4 	.word	0x20000de4
 800509c:	20000de8 	.word	0x20000de8
 80050a0:	20000e44 	.word	0x20000e44
 80050a4:	20000e4c 	.word	0x20000e4c
 80050a8:	20000e34 	.word	0x20000e34
 80050ac:	2000095c 	.word	0x2000095c
 80050b0:	20000958 	.word	0x20000958
 80050b4:	20000e40 	.word	0x20000e40
 80050b8:	20000e3c 	.word	0x20000e3c

080050bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050c2:	4b2a      	ldr	r3, [pc, #168]	; (800516c <vTaskSwitchContext+0xb0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050ca:	4b29      	ldr	r3, [pc, #164]	; (8005170 <vTaskSwitchContext+0xb4>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050d0:	e046      	b.n	8005160 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80050d2:	4b27      	ldr	r3, [pc, #156]	; (8005170 <vTaskSwitchContext+0xb4>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050d8:	4b26      	ldr	r3, [pc, #152]	; (8005174 <vTaskSwitchContext+0xb8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	e010      	b.n	8005102 <vTaskSwitchContext+0x46>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <vTaskSwitchContext+0x40>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	607b      	str	r3, [r7, #4]
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <vTaskSwitchContext+0x3e>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3b01      	subs	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	491d      	ldr	r1, [pc, #116]	; (8005178 <vTaskSwitchContext+0xbc>)
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0e4      	beq.n	80050e0 <vTaskSwitchContext+0x24>
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4a15      	ldr	r2, [pc, #84]	; (8005178 <vTaskSwitchContext+0xbc>)
 8005122:	4413      	add	r3, r2
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	605a      	str	r2, [r3, #4]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	3308      	adds	r3, #8
 8005138:	429a      	cmp	r2, r3
 800513a:	d104      	bne.n	8005146 <vTaskSwitchContext+0x8a>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	605a      	str	r2, [r3, #4]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a0b      	ldr	r2, [pc, #44]	; (800517c <vTaskSwitchContext+0xc0>)
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4a08      	ldr	r2, [pc, #32]	; (8005174 <vTaskSwitchContext+0xb8>)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <vTaskSwitchContext+0xc0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3354      	adds	r3, #84	; 0x54
 800515c:	4a08      	ldr	r2, [pc, #32]	; (8005180 <vTaskSwitchContext+0xc4>)
 800515e:	6013      	str	r3, [r2, #0]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	20000e54 	.word	0x20000e54
 8005170:	20000e40 	.word	0x20000e40
 8005174:	20000e34 	.word	0x20000e34
 8005178:	2000095c 	.word	0x2000095c
 800517c:	20000958 	.word	0x20000958
 8005180:	20000014 	.word	0x20000014

08005184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	60fb      	str	r3, [r7, #12]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051aa:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <vTaskPlaceOnEventList+0x44>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3318      	adds	r3, #24
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fe fe61 	bl	8003e7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051b8:	2101      	movs	r1, #1
 80051ba:	6838      	ldr	r0, [r7, #0]
 80051bc:	f000 fa80 	bl	80056c0 <prvAddCurrentTaskToDelayedList>
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000958 	.word	0x20000958

080051cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <vTaskPlaceOnEventListRestricted+0x54>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3318      	adds	r3, #24
 80051fa:	4619      	mov	r1, r3
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7fe fe18 	bl	8003e32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005208:	f04f 33ff 	mov.w	r3, #4294967295
 800520c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	68b8      	ldr	r0, [r7, #8]
 8005212:	f000 fa55 	bl	80056c0 <prvAddCurrentTaskToDelayedList>
	}
 8005216:	bf00      	nop
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000958 	.word	0x20000958

08005224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60fb      	str	r3, [r7, #12]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	3318      	adds	r3, #24
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe fe49 	bl	8003eec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800525a:	4b1e      	ldr	r3, [pc, #120]	; (80052d4 <xTaskRemoveFromEventList+0xb0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11d      	bne.n	800529e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	3304      	adds	r3, #4
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fe40 	bl	8003eec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <xTaskRemoveFromEventList+0xb4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d903      	bls.n	8005280 <xTaskRemoveFromEventList+0x5c>
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	4a16      	ldr	r2, [pc, #88]	; (80052d8 <xTaskRemoveFromEventList+0xb4>)
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4a13      	ldr	r2, [pc, #76]	; (80052dc <xTaskRemoveFromEventList+0xb8>)
 800528e:	441a      	add	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	3304      	adds	r3, #4
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f7fe fdcb 	bl	8003e32 <vListInsertEnd>
 800529c:	e005      	b.n	80052aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3318      	adds	r3, #24
 80052a2:	4619      	mov	r1, r3
 80052a4:	480e      	ldr	r0, [pc, #56]	; (80052e0 <xTaskRemoveFromEventList+0xbc>)
 80052a6:	f7fe fdc4 	bl	8003e32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <xTaskRemoveFromEventList+0xc0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d905      	bls.n	80052c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052b8:	2301      	movs	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <xTaskRemoveFromEventList+0xc4>)
 80052be:	2201      	movs	r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e001      	b.n	80052c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052c8:	697b      	ldr	r3, [r7, #20]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000e54 	.word	0x20000e54
 80052d8:	20000e34 	.word	0x20000e34
 80052dc:	2000095c 	.word	0x2000095c
 80052e0:	20000dec 	.word	0x20000dec
 80052e4:	20000958 	.word	0x20000958
 80052e8:	20000e40 	.word	0x20000e40

080052ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <vTaskInternalSetTimeOutState+0x24>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <vTaskInternalSetTimeOutState+0x28>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	605a      	str	r2, [r3, #4]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20000e44 	.word	0x20000e44
 8005314:	20000e30 	.word	0x20000e30

08005318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	613b      	str	r3, [r7, #16]
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	60fb      	str	r3, [r7, #12]
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800535a:	f000 fe83 	bl	8006064 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800535e:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <xTaskCheckForTimeOut+0xbc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d102      	bne.n	800537e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005378:	2300      	movs	r3, #0
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e023      	b.n	80053c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <xTaskCheckForTimeOut+0xc0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d007      	beq.n	800539a <xTaskCheckForTimeOut+0x82>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	429a      	cmp	r2, r3
 8005392:	d302      	bcc.n	800539a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	e015      	b.n	80053c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d20b      	bcs.n	80053bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff9b 	bl	80052ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e004      	b.n	80053c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053c2:	2301      	movs	r3, #1
 80053c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053c6:	f000 fe7d 	bl	80060c4 <vPortExitCritical>

	return xReturn;
 80053ca:	69fb      	ldr	r3, [r7, #28]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000e30 	.word	0x20000e30
 80053d8:	20000e44 	.word	0x20000e44

080053dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <vTaskMissedYield+0x14>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
}
 80053e6:	bf00      	nop
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	20000e40 	.word	0x20000e40

080053f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053fc:	f000 f852 	bl	80054a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <prvIdleTask+0x28>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d9f9      	bls.n	80053fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <prvIdleTask+0x2c>)
 800540a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005418:	e7f0      	b.n	80053fc <prvIdleTask+0x8>
 800541a:	bf00      	nop
 800541c:	2000095c 	.word	0x2000095c
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800542a:	2300      	movs	r3, #0
 800542c:	607b      	str	r3, [r7, #4]
 800542e:	e00c      	b.n	800544a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4a12      	ldr	r2, [pc, #72]	; (8005484 <prvInitialiseTaskLists+0x60>)
 800543c:	4413      	add	r3, r2
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe fcca 	bl	8003dd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3301      	adds	r3, #1
 8005448:	607b      	str	r3, [r7, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b37      	cmp	r3, #55	; 0x37
 800544e:	d9ef      	bls.n	8005430 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005450:	480d      	ldr	r0, [pc, #52]	; (8005488 <prvInitialiseTaskLists+0x64>)
 8005452:	f7fe fcc1 	bl	8003dd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005456:	480d      	ldr	r0, [pc, #52]	; (800548c <prvInitialiseTaskLists+0x68>)
 8005458:	f7fe fcbe 	bl	8003dd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800545c:	480c      	ldr	r0, [pc, #48]	; (8005490 <prvInitialiseTaskLists+0x6c>)
 800545e:	f7fe fcbb 	bl	8003dd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005462:	480c      	ldr	r0, [pc, #48]	; (8005494 <prvInitialiseTaskLists+0x70>)
 8005464:	f7fe fcb8 	bl	8003dd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005468:	480b      	ldr	r0, [pc, #44]	; (8005498 <prvInitialiseTaskLists+0x74>)
 800546a:	f7fe fcb5 	bl	8003dd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <prvInitialiseTaskLists+0x78>)
 8005470:	4a05      	ldr	r2, [pc, #20]	; (8005488 <prvInitialiseTaskLists+0x64>)
 8005472:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005474:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <prvInitialiseTaskLists+0x7c>)
 8005476:	4a05      	ldr	r2, [pc, #20]	; (800548c <prvInitialiseTaskLists+0x68>)
 8005478:	601a      	str	r2, [r3, #0]
}
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	2000095c 	.word	0x2000095c
 8005488:	20000dbc 	.word	0x20000dbc
 800548c:	20000dd0 	.word	0x20000dd0
 8005490:	20000dec 	.word	0x20000dec
 8005494:	20000e00 	.word	0x20000e00
 8005498:	20000e18 	.word	0x20000e18
 800549c:	20000de4 	.word	0x20000de4
 80054a0:	20000de8 	.word	0x20000de8

080054a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054aa:	e019      	b.n	80054e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054ac:	f000 fdda 	bl	8006064 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b0:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <prvCheckTasksWaitingTermination+0x50>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe fd15 	bl	8003eec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <prvCheckTasksWaitingTermination+0x54>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	4a0b      	ldr	r2, [pc, #44]	; (80054f8 <prvCheckTasksWaitingTermination+0x54>)
 80054ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <prvCheckTasksWaitingTermination+0x58>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	4a0a      	ldr	r2, [pc, #40]	; (80054fc <prvCheckTasksWaitingTermination+0x58>)
 80054d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054d6:	f000 fdf5 	bl	80060c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f810 	bl	8005500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <prvCheckTasksWaitingTermination+0x58>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e1      	bne.n	80054ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000e00 	.word	0x20000e00
 80054f8:	20000e2c 	.word	0x20000e2c
 80054fc:	20000e14 	.word	0x20000e14

08005500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3354      	adds	r3, #84	; 0x54
 800550c:	4618      	mov	r0, r3
 800550e:	f001 f8ff 	bl	8006710 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005518:	2b00      	cmp	r3, #0
 800551a:	d108      	bne.n	800552e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	4618      	mov	r0, r3
 8005522:	f000 ff8d 	bl	8006440 <vPortFree>
				vPortFree( pxTCB );
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 ff8a 	bl	8006440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800552c:	e018      	b.n	8005560 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005534:	2b01      	cmp	r3, #1
 8005536:	d103      	bne.n	8005540 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 ff81 	bl	8006440 <vPortFree>
	}
 800553e:	e00f      	b.n	8005560 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005546:	2b02      	cmp	r3, #2
 8005548:	d00a      	beq.n	8005560 <prvDeleteTCB+0x60>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	60fb      	str	r3, [r7, #12]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <prvDeleteTCB+0x5e>
	}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <prvResetNextTaskUnblockTime+0x38>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <prvResetNextTaskUnblockTime+0x3c>)
 800557a:	f04f 32ff 	mov.w	r2, #4294967295
 800557e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005580:	e008      	b.n	8005594 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <prvResetNextTaskUnblockTime+0x38>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <prvResetNextTaskUnblockTime+0x3c>)
 8005592:	6013      	str	r3, [r2, #0]
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	20000de4 	.word	0x20000de4
 80055a4:	20000e4c 	.word	0x20000e4c

080055a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055ae:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <xTaskGetSchedulerState+0x34>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055b6:	2301      	movs	r3, #1
 80055b8:	607b      	str	r3, [r7, #4]
 80055ba:	e008      	b.n	80055ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055bc:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <xTaskGetSchedulerState+0x38>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d102      	bne.n	80055ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055c4:	2302      	movs	r3, #2
 80055c6:	607b      	str	r3, [r7, #4]
 80055c8:	e001      	b.n	80055ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055ca:	2300      	movs	r3, #0
 80055cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055ce:	687b      	ldr	r3, [r7, #4]
	}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	20000e38 	.word	0x20000e38
 80055e0:	20000e54 	.word	0x20000e54

080055e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d056      	beq.n	80056a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055fa:	4b2e      	ldr	r3, [pc, #184]	; (80056b4 <xTaskPriorityDisinherit+0xd0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	429a      	cmp	r2, r3
 8005602:	d00a      	beq.n	800561a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	60fb      	str	r3, [r7, #12]
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60bb      	str	r3, [r7, #8]
}
 8005634:	bf00      	nop
 8005636:	e7fe      	b.n	8005636 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563c:	1e5a      	subs	r2, r3, #1
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	429a      	cmp	r2, r3
 800564c:	d02c      	beq.n	80056a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005652:	2b00      	cmp	r3, #0
 8005654:	d128      	bne.n	80056a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3304      	adds	r3, #4
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fc46 	bl	8003eec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <xTaskPriorityDisinherit+0xd4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d903      	bls.n	8005688 <xTaskPriorityDisinherit+0xa4>
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <xTaskPriorityDisinherit+0xd4>)
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4a09      	ldr	r2, [pc, #36]	; (80056bc <xTaskPriorityDisinherit+0xd8>)
 8005696:	441a      	add	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	3304      	adds	r3, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f7fe fbc7 	bl	8003e32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056a8:	697b      	ldr	r3, [r7, #20]
	}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000958 	.word	0x20000958
 80056b8:	20000e34 	.word	0x20000e34
 80056bc:	2000095c 	.word	0x2000095c

080056c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056ca:	4b21      	ldr	r3, [pc, #132]	; (8005750 <prvAddCurrentTaskToDelayedList+0x90>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056d0:	4b20      	ldr	r3, [pc, #128]	; (8005754 <prvAddCurrentTaskToDelayedList+0x94>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fc08 	bl	8003eec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d10a      	bne.n	80056fa <prvAddCurrentTaskToDelayedList+0x3a>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056ea:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <prvAddCurrentTaskToDelayedList+0x94>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4819      	ldr	r0, [pc, #100]	; (8005758 <prvAddCurrentTaskToDelayedList+0x98>)
 80056f4:	f7fe fb9d 	bl	8003e32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056f8:	e026      	b.n	8005748 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4413      	add	r3, r2
 8005700:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005702:	4b14      	ldr	r3, [pc, #80]	; (8005754 <prvAddCurrentTaskToDelayedList+0x94>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	429a      	cmp	r2, r3
 8005710:	d209      	bcs.n	8005726 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005712:	4b12      	ldr	r3, [pc, #72]	; (800575c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <prvAddCurrentTaskToDelayedList+0x94>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7fe fbab 	bl	8003e7a <vListInsert>
}
 8005724:	e010      	b.n	8005748 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005726:	4b0e      	ldr	r3, [pc, #56]	; (8005760 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <prvAddCurrentTaskToDelayedList+0x94>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f7fe fba1 	bl	8003e7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005738:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <prvAddCurrentTaskToDelayedList+0xa4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	429a      	cmp	r2, r3
 8005740:	d202      	bcs.n	8005748 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005742:	4a08      	ldr	r2, [pc, #32]	; (8005764 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6013      	str	r3, [r2, #0]
}
 8005748:	bf00      	nop
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20000e30 	.word	0x20000e30
 8005754:	20000958 	.word	0x20000958
 8005758:	20000e18 	.word	0x20000e18
 800575c:	20000de8 	.word	0x20000de8
 8005760:	20000de4 	.word	0x20000de4
 8005764:	20000e4c 	.word	0x20000e4c

08005768 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	; 0x28
 800576c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005772:	f000 fb07 	bl	8005d84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005776:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <xTimerCreateTimerTask+0x80>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d021      	beq.n	80057c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005782:	2300      	movs	r3, #0
 8005784:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005786:	1d3a      	adds	r2, r7, #4
 8005788:	f107 0108 	add.w	r1, r7, #8
 800578c:	f107 030c 	add.w	r3, r7, #12
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe fb07 	bl	8003da4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	9202      	str	r2, [sp, #8]
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	2302      	movs	r3, #2
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	2300      	movs	r3, #0
 80057a6:	460a      	mov	r2, r1
 80057a8:	4910      	ldr	r1, [pc, #64]	; (80057ec <xTimerCreateTimerTask+0x84>)
 80057aa:	4811      	ldr	r0, [pc, #68]	; (80057f0 <xTimerCreateTimerTask+0x88>)
 80057ac:	f7ff f8b4 	bl	8004918 <xTaskCreateStatic>
 80057b0:	4603      	mov	r3, r0
 80057b2:	4a10      	ldr	r2, [pc, #64]	; (80057f4 <xTimerCreateTimerTask+0x8c>)
 80057b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <xTimerCreateTimerTask+0x8c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80057be:	2301      	movs	r3, #1
 80057c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	613b      	str	r3, [r7, #16]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80057de:	697b      	ldr	r3, [r7, #20]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000e88 	.word	0x20000e88
 80057ec:	080068bc 	.word	0x080068bc
 80057f0:	0800592d 	.word	0x0800592d
 80057f4:	20000e8c 	.word	0x20000e8c

080057f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005806:	2300      	movs	r3, #0
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	623b      	str	r3, [r7, #32]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <xTimerGenericCommand+0x98>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d02a      	beq.n	8005884 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b05      	cmp	r3, #5
 800583e:	dc18      	bgt.n	8005872 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005840:	f7ff feb2 	bl	80055a8 <xTaskGetSchedulerState>
 8005844:	4603      	mov	r3, r0
 8005846:	2b02      	cmp	r3, #2
 8005848:	d109      	bne.n	800585e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800584a:	4b11      	ldr	r3, [pc, #68]	; (8005890 <xTimerGenericCommand+0x98>)
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	f107 0110 	add.w	r1, r7, #16
 8005852:	2300      	movs	r3, #0
 8005854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005856:	f7fe fc77 	bl	8004148 <xQueueGenericSend>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24
 800585c:	e012      	b.n	8005884 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800585e:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <xTimerGenericCommand+0x98>)
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	f107 0110 	add.w	r1, r7, #16
 8005866:	2300      	movs	r3, #0
 8005868:	2200      	movs	r2, #0
 800586a:	f7fe fc6d 	bl	8004148 <xQueueGenericSend>
 800586e:	6278      	str	r0, [r7, #36]	; 0x24
 8005870:	e008      	b.n	8005884 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005872:	4b07      	ldr	r3, [pc, #28]	; (8005890 <xTimerGenericCommand+0x98>)
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f107 0110 	add.w	r1, r7, #16
 800587a:	2300      	movs	r3, #0
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	f7fe fd61 	bl	8004344 <xQueueGenericSendFromISR>
 8005882:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005886:	4618      	mov	r0, r3
 8005888:	3728      	adds	r7, #40	; 0x28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000e88 	.word	0x20000e88

08005894 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af02      	add	r7, sp, #8
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800589e:	4b22      	ldr	r3, [pc, #136]	; (8005928 <prvProcessExpiredTimer+0x94>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe fb1d 	bl	8003eec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d022      	beq.n	8005906 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	18d1      	adds	r1, r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	6978      	ldr	r0, [r7, #20]
 80058ce:	f000 f8d1 	bl	8005a74 <prvInsertTimerInActiveList>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01f      	beq.n	8005918 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058d8:	2300      	movs	r3, #0
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	2300      	movs	r3, #0
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	2100      	movs	r1, #0
 80058e2:	6978      	ldr	r0, [r7, #20]
 80058e4:	f7ff ff88 	bl	80057f8 <xTimerGenericCommand>
 80058e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d113      	bne.n	8005918 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	60fb      	str	r3, [r7, #12]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800590c:	f023 0301 	bic.w	r3, r3, #1
 8005910:	b2da      	uxtb	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	6978      	ldr	r0, [r7, #20]
 800591e:	4798      	blx	r3
}
 8005920:	bf00      	nop
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000e80 	.word	0x20000e80

0800592c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005934:	f107 0308 	add.w	r3, r7, #8
 8005938:	4618      	mov	r0, r3
 800593a:	f000 f857 	bl	80059ec <prvGetNextExpireTime>
 800593e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4619      	mov	r1, r3
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f803 	bl	8005950 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800594a:	f000 f8d5 	bl	8005af8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800594e:	e7f1      	b.n	8005934 <prvTimerTask+0x8>

08005950 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800595a:	f7ff fa39 	bl	8004dd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800595e:	f107 0308 	add.w	r3, r7, #8
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f866 	bl	8005a34 <prvSampleTimeNow>
 8005968:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d130      	bne.n	80059d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <prvProcessTimerOrBlockTask+0x3c>
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	429a      	cmp	r2, r3
 800597c:	d806      	bhi.n	800598c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800597e:	f7ff fa35 	bl	8004dec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff ff85 	bl	8005894 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800598a:	e024      	b.n	80059d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005992:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <prvProcessTimerOrBlockTask+0x90>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <prvProcessTimerOrBlockTask+0x50>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <prvProcessTimerOrBlockTask+0x52>
 80059a0:	2300      	movs	r3, #0
 80059a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059a4:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <prvProcessTimerOrBlockTask+0x94>)
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	4619      	mov	r1, r3
 80059b2:	f7fe ff7d 	bl	80048b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80059b6:	f7ff fa19 	bl	8004dec <xTaskResumeAll>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10a      	bne.n	80059d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <prvProcessTimerOrBlockTask+0x98>)
 80059c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
}
 80059d0:	e001      	b.n	80059d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80059d2:	f7ff fa0b 	bl	8004dec <xTaskResumeAll>
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000e84 	.word	0x20000e84
 80059e4:	20000e88 	.word	0x20000e88
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059f4:	4b0e      	ldr	r3, [pc, #56]	; (8005a30 <prvGetNextExpireTime+0x44>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <prvGetNextExpireTime+0x16>
 80059fe:	2201      	movs	r2, #1
 8005a00:	e000      	b.n	8005a04 <prvGetNextExpireTime+0x18>
 8005a02:	2200      	movs	r2, #0
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d105      	bne.n	8005a1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a10:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <prvGetNextExpireTime+0x44>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e001      	b.n	8005a20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a20:	68fb      	ldr	r3, [r7, #12]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20000e80 	.word	0x20000e80

08005a34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a3c:	f7ff fa74 	bl	8004f28 <xTaskGetTickCount>
 8005a40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <prvSampleTimeNow+0x3c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d205      	bcs.n	8005a58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a4c:	f000 f936 	bl	8005cbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a5e:	4a04      	ldr	r2, [pc, #16]	; (8005a70 <prvSampleTimeNow+0x3c>)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a64:	68fb      	ldr	r3, [r7, #12]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000e90 	.word	0x20000e90

08005a74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d812      	bhi.n	8005ac0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	1ad2      	subs	r2, r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e01b      	b.n	8005ae6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005aae:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <prvInsertTimerInActiveList+0x7c>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4610      	mov	r0, r2
 8005aba:	f7fe f9de 	bl	8003e7a <vListInsert>
 8005abe:	e012      	b.n	8005ae6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d206      	bcs.n	8005ad6 <prvInsertTimerInActiveList+0x62>
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d302      	bcc.n	8005ad6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	e007      	b.n	8005ae6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ad6:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <prvInsertTimerInActiveList+0x80>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f7fe f9ca 	bl	8003e7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ae6:	697b      	ldr	r3, [r7, #20]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20000e84 	.word	0x20000e84
 8005af4:	20000e80 	.word	0x20000e80

08005af8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08e      	sub	sp, #56	; 0x38
 8005afc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005afe:	e0ca      	b.n	8005c96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	da18      	bge.n	8005b38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	3304      	adds	r3, #4
 8005b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	61fb      	str	r3, [r7, #28]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b2e:	6850      	ldr	r0, [r2, #4]
 8005b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b32:	6892      	ldr	r2, [r2, #8]
 8005b34:	4611      	mov	r1, r2
 8005b36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f2c0 80aa 	blt.w	8005c94 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d004      	beq.n	8005b56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe f9cb 	bl	8003eec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b56:	463b      	mov	r3, r7
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff ff6b 	bl	8005a34 <prvSampleTimeNow>
 8005b5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b09      	cmp	r3, #9
 8005b64:	f200 8097 	bhi.w	8005c96 <prvProcessReceivedCommands+0x19e>
 8005b68:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <prvProcessReceivedCommands+0x78>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005b99 	.word	0x08005b99
 8005b78:	08005b99 	.word	0x08005b99
 8005b7c:	08005c0d 	.word	0x08005c0d
 8005b80:	08005c21 	.word	0x08005c21
 8005b84:	08005c6b 	.word	0x08005c6b
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005b99 	.word	0x08005b99
 8005b90:	08005c0d 	.word	0x08005c0d
 8005b94:	08005c21 	.word	0x08005c21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	18d1      	adds	r1, r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb8:	f7ff ff5c 	bl	8005a74 <prvInsertTimerInActiveList>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d069      	beq.n	8005c96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d05e      	beq.n	8005c96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	441a      	add	r2, r3
 8005be0:	2300      	movs	r3, #0
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2300      	movs	r3, #0
 8005be6:	2100      	movs	r1, #0
 8005be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bea:	f7ff fe05 	bl	80057f8 <xTimerGenericCommand>
 8005bee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d14f      	bne.n	8005c96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	61bb      	str	r3, [r7, #24]
}
 8005c08:	bf00      	nop
 8005c0a:	e7fe      	b.n	8005c0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c1e:	e03a      	b.n	8005c96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	617b      	str	r3, [r7, #20]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	18d1      	adds	r1, r2, r3
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c64:	f7ff ff06 	bl	8005a74 <prvInsertTimerInActiveList>
					break;
 8005c68:	e015      	b.n	8005c96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c7a:	f000 fbe1 	bl	8006440 <vPortFree>
 8005c7e:	e00a      	b.n	8005c96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c92:	e000      	b.n	8005c96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c96:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <prvProcessReceivedCommands+0x1c0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	1d39      	adds	r1, r7, #4
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fbec 	bl	800447c <xQueueReceive>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f47f af2a 	bne.w	8005b00 <prvProcessReceivedCommands+0x8>
	}
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	3730      	adds	r7, #48	; 0x30
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000e88 	.word	0x20000e88

08005cbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cc2:	e048      	b.n	8005d56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cc4:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <prvSwitchTimerLists+0xc0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cce:	4b2b      	ldr	r3, [pc, #172]	; (8005d7c <prvSwitchTimerLists+0xc0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe f905 	bl	8003eec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d02e      	beq.n	8005d56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d90e      	bls.n	8005d28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d16:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <prvSwitchTimerLists+0xc0>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7fe f8aa 	bl	8003e7a <vListInsert>
 8005d26:	e016      	b.n	8005d56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	2100      	movs	r1, #0
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff fd60 	bl	80057f8 <xTimerGenericCommand>
 8005d38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	603b      	str	r3, [r7, #0]
}
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <prvSwitchTimerLists+0xc0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1b1      	bne.n	8005cc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <prvSwitchTimerLists+0xc0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d66:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <prvSwitchTimerLists+0xc4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a04      	ldr	r2, [pc, #16]	; (8005d7c <prvSwitchTimerLists+0xc0>)
 8005d6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d6e:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <prvSwitchTimerLists+0xc4>)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	6013      	str	r3, [r2, #0]
}
 8005d74:	bf00      	nop
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000e80 	.word	0x20000e80
 8005d80:	20000e84 	.word	0x20000e84

08005d84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d8a:	f000 f96b 	bl	8006064 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <prvCheckForValidListAndQueue+0x60>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d120      	bne.n	8005dd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d96:	4814      	ldr	r0, [pc, #80]	; (8005de8 <prvCheckForValidListAndQueue+0x64>)
 8005d98:	f7fe f81e 	bl	8003dd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d9c:	4813      	ldr	r0, [pc, #76]	; (8005dec <prvCheckForValidListAndQueue+0x68>)
 8005d9e:	f7fe f81b 	bl	8003dd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005da2:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <prvCheckForValidListAndQueue+0x6c>)
 8005da4:	4a10      	ldr	r2, [pc, #64]	; (8005de8 <prvCheckForValidListAndQueue+0x64>)
 8005da6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005da8:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <prvCheckForValidListAndQueue+0x70>)
 8005daa:	4a10      	ldr	r2, [pc, #64]	; (8005dec <prvCheckForValidListAndQueue+0x68>)
 8005dac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005dae:	2300      	movs	r3, #0
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <prvCheckForValidListAndQueue+0x74>)
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <prvCheckForValidListAndQueue+0x78>)
 8005db6:	2110      	movs	r1, #16
 8005db8:	200a      	movs	r0, #10
 8005dba:	f7fe f929 	bl	8004010 <xQueueGenericCreateStatic>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4a08      	ldr	r2, [pc, #32]	; (8005de4 <prvCheckForValidListAndQueue+0x60>)
 8005dc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005dc4:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <prvCheckForValidListAndQueue+0x60>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <prvCheckForValidListAndQueue+0x60>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	490b      	ldr	r1, [pc, #44]	; (8005e00 <prvCheckForValidListAndQueue+0x7c>)
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe fd42 	bl	800485c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dd8:	f000 f974 	bl	80060c4 <vPortExitCritical>
}
 8005ddc:	bf00      	nop
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000e88 	.word	0x20000e88
 8005de8:	20000e58 	.word	0x20000e58
 8005dec:	20000e6c 	.word	0x20000e6c
 8005df0:	20000e80 	.word	0x20000e80
 8005df4:	20000e84 	.word	0x20000e84
 8005df8:	20000f34 	.word	0x20000f34
 8005dfc:	20000e94 	.word	0x20000e94
 8005e00:	080068c4 	.word	0x080068c4

08005e04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3b04      	subs	r3, #4
 8005e14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3b04      	subs	r3, #4
 8005e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f023 0201 	bic.w	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3b04      	subs	r3, #4
 8005e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e34:	4a0c      	ldr	r2, [pc, #48]	; (8005e68 <pxPortInitialiseStack+0x64>)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3b14      	subs	r3, #20
 8005e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3b04      	subs	r3, #4
 8005e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f06f 0202 	mvn.w	r2, #2
 8005e52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3b20      	subs	r3, #32
 8005e58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	08005e6d 	.word	0x08005e6d

08005e6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e76:	4b12      	ldr	r3, [pc, #72]	; (8005ec0 <prvTaskExitError+0x54>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d00a      	beq.n	8005e96 <prvTaskExitError+0x2a>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	60fb      	str	r3, [r7, #12]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <prvTaskExitError+0x28>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	60bb      	str	r3, [r7, #8]
}
 8005ea8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005eaa:	bf00      	nop
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0fc      	beq.n	8005eac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20000010 	.word	0x20000010
	...

08005ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <pxCurrentTCBConst2>)
 8005ed2:	6819      	ldr	r1, [r3, #0]
 8005ed4:	6808      	ldr	r0, [r1, #0]
 8005ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eda:	f380 8809 	msr	PSP, r0
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f380 8811 	msr	BASEPRI, r0
 8005eea:	4770      	bx	lr
 8005eec:	f3af 8000 	nop.w

08005ef0 <pxCurrentTCBConst2>:
 8005ef0:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop

08005ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ef8:	4808      	ldr	r0, [pc, #32]	; (8005f1c <prvPortStartFirstTask+0x24>)
 8005efa:	6800      	ldr	r0, [r0, #0]
 8005efc:	6800      	ldr	r0, [r0, #0]
 8005efe:	f380 8808 	msr	MSP, r0
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8814 	msr	CONTROL, r0
 8005f0a:	b662      	cpsie	i
 8005f0c:	b661      	cpsie	f
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	df00      	svc	0
 8005f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f1a:	bf00      	nop
 8005f1c:	e000ed08 	.word	0xe000ed08

08005f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f26:	4b46      	ldr	r3, [pc, #280]	; (8006040 <xPortStartScheduler+0x120>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a46      	ldr	r2, [pc, #280]	; (8006044 <xPortStartScheduler+0x124>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d10a      	bne.n	8005f46 <xPortStartScheduler+0x26>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	613b      	str	r3, [r7, #16]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f46:	4b3e      	ldr	r3, [pc, #248]	; (8006040 <xPortStartScheduler+0x120>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a3f      	ldr	r2, [pc, #252]	; (8006048 <xPortStartScheduler+0x128>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10a      	bne.n	8005f66 <xPortStartScheduler+0x46>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60fb      	str	r3, [r7, #12]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f66:	4b39      	ldr	r3, [pc, #228]	; (800604c <xPortStartScheduler+0x12c>)
 8005f68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	22ff      	movs	r2, #255	; 0xff
 8005f76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	4b31      	ldr	r3, [pc, #196]	; (8006050 <xPortStartScheduler+0x130>)
 8005f8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f8e:	4b31      	ldr	r3, [pc, #196]	; (8006054 <xPortStartScheduler+0x134>)
 8005f90:	2207      	movs	r2, #7
 8005f92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f94:	e009      	b.n	8005faa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005f96:	4b2f      	ldr	r3, [pc, #188]	; (8006054 <xPortStartScheduler+0x134>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	4a2d      	ldr	r2, [pc, #180]	; (8006054 <xPortStartScheduler+0x134>)
 8005f9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb2:	2b80      	cmp	r3, #128	; 0x80
 8005fb4:	d0ef      	beq.n	8005f96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fb6:	4b27      	ldr	r3, [pc, #156]	; (8006054 <xPortStartScheduler+0x134>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f1c3 0307 	rsb	r3, r3, #7
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d00a      	beq.n	8005fd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	60bb      	str	r3, [r7, #8]
}
 8005fd4:	bf00      	nop
 8005fd6:	e7fe      	b.n	8005fd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fd8:	4b1e      	ldr	r3, [pc, #120]	; (8006054 <xPortStartScheduler+0x134>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	4a1d      	ldr	r2, [pc, #116]	; (8006054 <xPortStartScheduler+0x134>)
 8005fe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fe2:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <xPortStartScheduler+0x134>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fea:	4a1a      	ldr	r2, [pc, #104]	; (8006054 <xPortStartScheduler+0x134>)
 8005fec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ff6:	4b18      	ldr	r3, [pc, #96]	; (8006058 <xPortStartScheduler+0x138>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a17      	ldr	r2, [pc, #92]	; (8006058 <xPortStartScheduler+0x138>)
 8005ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006002:	4b15      	ldr	r3, [pc, #84]	; (8006058 <xPortStartScheduler+0x138>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a14      	ldr	r2, [pc, #80]	; (8006058 <xPortStartScheduler+0x138>)
 8006008:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800600c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800600e:	f000 f8dd 	bl	80061cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <xPortStartScheduler+0x13c>)
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006018:	f000 f8fc 	bl	8006214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800601c:	4b10      	ldr	r3, [pc, #64]	; (8006060 <xPortStartScheduler+0x140>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a0f      	ldr	r2, [pc, #60]	; (8006060 <xPortStartScheduler+0x140>)
 8006022:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006026:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006028:	f7ff ff66 	bl	8005ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800602c:	f7ff f846 	bl	80050bc <vTaskSwitchContext>
	prvTaskExitError();
 8006030:	f7ff ff1c 	bl	8005e6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	e000ed00 	.word	0xe000ed00
 8006044:	410fc271 	.word	0x410fc271
 8006048:	410fc270 	.word	0x410fc270
 800604c:	e000e400 	.word	0xe000e400
 8006050:	20000f84 	.word	0x20000f84
 8006054:	20000f88 	.word	0x20000f88
 8006058:	e000ed20 	.word	0xe000ed20
 800605c:	20000010 	.word	0x20000010
 8006060:	e000ef34 	.word	0xe000ef34

08006064 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	607b      	str	r3, [r7, #4]
}
 800607c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <vPortEnterCritical+0x58>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	4a0d      	ldr	r2, [pc, #52]	; (80060bc <vPortEnterCritical+0x58>)
 8006086:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <vPortEnterCritical+0x58>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d10f      	bne.n	80060b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <vPortEnterCritical+0x5c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	603b      	str	r3, [r7, #0]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <vPortEnterCritical+0x4a>
	}
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	20000010 	.word	0x20000010
 80060c0:	e000ed04 	.word	0xe000ed04

080060c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060ca:	4b12      	ldr	r3, [pc, #72]	; (8006114 <vPortExitCritical+0x50>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <vPortExitCritical+0x24>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	607b      	str	r3, [r7, #4]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <vPortExitCritical+0x50>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	4a09      	ldr	r2, [pc, #36]	; (8006114 <vPortExitCritical+0x50>)
 80060f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060f2:	4b08      	ldr	r3, [pc, #32]	; (8006114 <vPortExitCritical+0x50>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d105      	bne.n	8006106 <vPortExitCritical+0x42>
 80060fa:	2300      	movs	r3, #0
 80060fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	f383 8811 	msr	BASEPRI, r3
}
 8006104:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000010 	.word	0x20000010
	...

08006120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006120:	f3ef 8009 	mrs	r0, PSP
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	4b15      	ldr	r3, [pc, #84]	; (8006180 <pxCurrentTCBConst>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	f01e 0f10 	tst.w	lr, #16
 8006130:	bf08      	it	eq
 8006132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613a:	6010      	str	r0, [r2, #0]
 800613c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006144:	f380 8811 	msr	BASEPRI, r0
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f7fe ffb4 	bl	80050bc <vTaskSwitchContext>
 8006154:	f04f 0000 	mov.w	r0, #0
 8006158:	f380 8811 	msr	BASEPRI, r0
 800615c:	bc09      	pop	{r0, r3}
 800615e:	6819      	ldr	r1, [r3, #0]
 8006160:	6808      	ldr	r0, [r1, #0]
 8006162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006166:	f01e 0f10 	tst.w	lr, #16
 800616a:	bf08      	it	eq
 800616c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006170:	f380 8809 	msr	PSP, r0
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	f3af 8000 	nop.w

08006180 <pxCurrentTCBConst>:
 8006180:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop

08006188 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	607b      	str	r3, [r7, #4]
}
 80061a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061a2:	f7fe fed1 	bl	8004f48 <xTaskIncrementTick>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <xPortSysTickHandler+0x40>)
 80061ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f383 8811 	msr	BASEPRI, r3
}
 80061be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	e000ed04 	.word	0xe000ed04

080061cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <vPortSetupTimerInterrupt+0x34>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061d6:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <vPortSetupTimerInterrupt+0x38>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061dc:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <vPortSetupTimerInterrupt+0x3c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a0a      	ldr	r2, [pc, #40]	; (800620c <vPortSetupTimerInterrupt+0x40>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	099b      	lsrs	r3, r3, #6
 80061e8:	4a09      	ldr	r2, [pc, #36]	; (8006210 <vPortSetupTimerInterrupt+0x44>)
 80061ea:	3b01      	subs	r3, #1
 80061ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061ee:	4b04      	ldr	r3, [pc, #16]	; (8006200 <vPortSetupTimerInterrupt+0x34>)
 80061f0:	2207      	movs	r2, #7
 80061f2:	601a      	str	r2, [r3, #0]
}
 80061f4:	bf00      	nop
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	e000e010 	.word	0xe000e010
 8006204:	e000e018 	.word	0xe000e018
 8006208:	20000004 	.word	0x20000004
 800620c:	10624dd3 	.word	0x10624dd3
 8006210:	e000e014 	.word	0xe000e014

08006214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006224 <vPortEnableVFP+0x10>
 8006218:	6801      	ldr	r1, [r0, #0]
 800621a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800621e:	6001      	str	r1, [r0, #0]
 8006220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006222:	bf00      	nop
 8006224:	e000ed88 	.word	0xe000ed88

08006228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800622e:	f3ef 8305 	mrs	r3, IPSR
 8006232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b0f      	cmp	r3, #15
 8006238:	d914      	bls.n	8006264 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800623a:	4a17      	ldr	r2, [pc, #92]	; (8006298 <vPortValidateInterruptPriority+0x70>)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006244:	4b15      	ldr	r3, [pc, #84]	; (800629c <vPortValidateInterruptPriority+0x74>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	7afa      	ldrb	r2, [r7, #11]
 800624a:	429a      	cmp	r2, r3
 800624c:	d20a      	bcs.n	8006264 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	607b      	str	r3, [r7, #4]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006264:	4b0e      	ldr	r3, [pc, #56]	; (80062a0 <vPortValidateInterruptPriority+0x78>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800626c:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <vPortValidateInterruptPriority+0x7c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d90a      	bls.n	800628a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	603b      	str	r3, [r7, #0]
}
 8006286:	bf00      	nop
 8006288:	e7fe      	b.n	8006288 <vPortValidateInterruptPriority+0x60>
	}
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	e000e3f0 	.word	0xe000e3f0
 800629c:	20000f84 	.word	0x20000f84
 80062a0:	e000ed0c 	.word	0xe000ed0c
 80062a4:	20000f88 	.word	0x20000f88

080062a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062b4:	f7fe fd8c 	bl	8004dd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062b8:	4b5b      	ldr	r3, [pc, #364]	; (8006428 <pvPortMalloc+0x180>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062c0:	f000 f920 	bl	8006504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062c4:	4b59      	ldr	r3, [pc, #356]	; (800642c <pvPortMalloc+0x184>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 8093 	bne.w	80063f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01d      	beq.n	8006314 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80062d8:	2208      	movs	r2, #8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4413      	add	r3, r2
 80062de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d014      	beq.n	8006314 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f023 0307 	bic.w	r3, r3, #7
 80062f0:	3308      	adds	r3, #8
 80062f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <pvPortMalloc+0x6c>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	617b      	str	r3, [r7, #20]
}
 8006310:	bf00      	nop
 8006312:	e7fe      	b.n	8006312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d06e      	beq.n	80063f8 <pvPortMalloc+0x150>
 800631a:	4b45      	ldr	r3, [pc, #276]	; (8006430 <pvPortMalloc+0x188>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d869      	bhi.n	80063f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006324:	4b43      	ldr	r3, [pc, #268]	; (8006434 <pvPortMalloc+0x18c>)
 8006326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006328:	4b42      	ldr	r3, [pc, #264]	; (8006434 <pvPortMalloc+0x18c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800632e:	e004      	b.n	800633a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d903      	bls.n	800634c <pvPortMalloc+0xa4>
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f1      	bne.n	8006330 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800634c:	4b36      	ldr	r3, [pc, #216]	; (8006428 <pvPortMalloc+0x180>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006352:	429a      	cmp	r2, r3
 8006354:	d050      	beq.n	80063f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2208      	movs	r2, #8
 800635c:	4413      	add	r3, r2
 800635e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	1ad2      	subs	r2, r2, r3
 8006370:	2308      	movs	r3, #8
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	429a      	cmp	r2, r3
 8006376:	d91f      	bls.n	80063b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4413      	add	r3, r2
 800637e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <pvPortMalloc+0xf8>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	613b      	str	r3, [r7, #16]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	1ad2      	subs	r2, r2, r3
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063b2:	69b8      	ldr	r0, [r7, #24]
 80063b4:	f000 f908 	bl	80065c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <pvPortMalloc+0x188>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	4a1b      	ldr	r2, [pc, #108]	; (8006430 <pvPortMalloc+0x188>)
 80063c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063c6:	4b1a      	ldr	r3, [pc, #104]	; (8006430 <pvPortMalloc+0x188>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4b1b      	ldr	r3, [pc, #108]	; (8006438 <pvPortMalloc+0x190>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d203      	bcs.n	80063da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063d2:	4b17      	ldr	r3, [pc, #92]	; (8006430 <pvPortMalloc+0x188>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a18      	ldr	r2, [pc, #96]	; (8006438 <pvPortMalloc+0x190>)
 80063d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	4b13      	ldr	r3, [pc, #76]	; (800642c <pvPortMalloc+0x184>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063ee:	4b13      	ldr	r3, [pc, #76]	; (800643c <pvPortMalloc+0x194>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3301      	adds	r3, #1
 80063f4:	4a11      	ldr	r2, [pc, #68]	; (800643c <pvPortMalloc+0x194>)
 80063f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063f8:	f7fe fcf8 	bl	8004dec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <pvPortMalloc+0x174>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	60fb      	str	r3, [r7, #12]
}
 8006418:	bf00      	nop
 800641a:	e7fe      	b.n	800641a <pvPortMalloc+0x172>
	return pvReturn;
 800641c:	69fb      	ldr	r3, [r7, #28]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3728      	adds	r7, #40	; 0x28
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20004b94 	.word	0x20004b94
 800642c:	20004ba8 	.word	0x20004ba8
 8006430:	20004b98 	.word	0x20004b98
 8006434:	20004b8c 	.word	0x20004b8c
 8006438:	20004b9c 	.word	0x20004b9c
 800643c:	20004ba0 	.word	0x20004ba0

08006440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d04d      	beq.n	80064ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006452:	2308      	movs	r3, #8
 8006454:	425b      	negs	r3, r3
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4413      	add	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <vPortFree+0xb8>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <vPortFree+0x44>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	60fb      	str	r3, [r7, #12]
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <vPortFree+0x62>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60bb      	str	r3, [r7, #8]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4b14      	ldr	r3, [pc, #80]	; (80064f8 <vPortFree+0xb8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4013      	ands	r3, r2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01e      	beq.n	80064ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d11a      	bne.n	80064ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <vPortFree+0xb8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	43db      	mvns	r3, r3
 80064c2:	401a      	ands	r2, r3
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064c8:	f7fe fc82 	bl	8004dd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <vPortFree+0xbc>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4413      	add	r3, r2
 80064d6:	4a09      	ldr	r2, [pc, #36]	; (80064fc <vPortFree+0xbc>)
 80064d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064da:	6938      	ldr	r0, [r7, #16]
 80064dc:	f000 f874 	bl	80065c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <vPortFree+0xc0>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	4a06      	ldr	r2, [pc, #24]	; (8006500 <vPortFree+0xc0>)
 80064e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064ea:	f7fe fc7f 	bl	8004dec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064ee:	bf00      	nop
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20004ba8 	.word	0x20004ba8
 80064fc:	20004b98 	.word	0x20004b98
 8006500:	20004ba4 	.word	0x20004ba4

08006504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800650a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800650e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006510:	4b27      	ldr	r3, [pc, #156]	; (80065b0 <prvHeapInit+0xac>)
 8006512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00c      	beq.n	8006538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3307      	adds	r3, #7
 8006522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0307 	bic.w	r3, r3, #7
 800652a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	4a1f      	ldr	r2, [pc, #124]	; (80065b0 <prvHeapInit+0xac>)
 8006534:	4413      	add	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800653c:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <prvHeapInit+0xb0>)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <prvHeapInit+0xb0>)
 8006544:	2200      	movs	r2, #0
 8006546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	4413      	add	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006550:	2208      	movs	r2, #8
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <prvHeapInit+0xb4>)
 8006564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <prvHeapInit+0xb4>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800656e:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <prvHeapInit+0xb4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006584:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <prvHeapInit+0xb4>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <prvHeapInit+0xb8>)
 8006592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <prvHeapInit+0xbc>)
 800659a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800659c:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <prvHeapInit+0xc0>)
 800659e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065a2:	601a      	str	r2, [r3, #0]
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	20000f8c 	.word	0x20000f8c
 80065b4:	20004b8c 	.word	0x20004b8c
 80065b8:	20004b94 	.word	0x20004b94
 80065bc:	20004b9c 	.word	0x20004b9c
 80065c0:	20004b98 	.word	0x20004b98
 80065c4:	20004ba8 	.word	0x20004ba8

080065c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065d0:	4b28      	ldr	r3, [pc, #160]	; (8006674 <prvInsertBlockIntoFreeList+0xac>)
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e002      	b.n	80065dc <prvInsertBlockIntoFreeList+0x14>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d8f7      	bhi.n	80065d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4413      	add	r3, r2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d108      	bne.n	800660a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	441a      	add	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	441a      	add	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d118      	bne.n	8006650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b15      	ldr	r3, [pc, #84]	; (8006678 <prvInsertBlockIntoFreeList+0xb0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d00d      	beq.n	8006646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	441a      	add	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e008      	b.n	8006658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <prvInsertBlockIntoFreeList+0xb0>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e003      	b.n	8006658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d002      	beq.n	8006666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20004b8c 	.word	0x20004b8c
 8006678:	20004b94 	.word	0x20004b94

0800667c <__libc_init_array>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4d0d      	ldr	r5, [pc, #52]	; (80066b4 <__libc_init_array+0x38>)
 8006680:	4c0d      	ldr	r4, [pc, #52]	; (80066b8 <__libc_init_array+0x3c>)
 8006682:	1b64      	subs	r4, r4, r5
 8006684:	10a4      	asrs	r4, r4, #2
 8006686:	2600      	movs	r6, #0
 8006688:	42a6      	cmp	r6, r4
 800668a:	d109      	bne.n	80066a0 <__libc_init_array+0x24>
 800668c:	4d0b      	ldr	r5, [pc, #44]	; (80066bc <__libc_init_array+0x40>)
 800668e:	4c0c      	ldr	r4, [pc, #48]	; (80066c0 <__libc_init_array+0x44>)
 8006690:	f000 f8f2 	bl	8006878 <_init>
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	2600      	movs	r6, #0
 800669a:	42a6      	cmp	r6, r4
 800669c:	d105      	bne.n	80066aa <__libc_init_array+0x2e>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a4:	4798      	blx	r3
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7ee      	b.n	8006688 <__libc_init_array+0xc>
 80066aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ae:	4798      	blx	r3
 80066b0:	3601      	adds	r6, #1
 80066b2:	e7f2      	b.n	800669a <__libc_init_array+0x1e>
 80066b4:	08006fdc 	.word	0x08006fdc
 80066b8:	08006fdc 	.word	0x08006fdc
 80066bc:	08006fdc 	.word	0x08006fdc
 80066c0:	08006fe0 	.word	0x08006fe0

080066c4 <__retarget_lock_acquire_recursive>:
 80066c4:	4770      	bx	lr

080066c6 <__retarget_lock_release_recursive>:
 80066c6:	4770      	bx	lr

080066c8 <memcpy>:
 80066c8:	440a      	add	r2, r1
 80066ca:	4291      	cmp	r1, r2
 80066cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80066d0:	d100      	bne.n	80066d4 <memcpy+0xc>
 80066d2:	4770      	bx	lr
 80066d4:	b510      	push	{r4, lr}
 80066d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066de:	4291      	cmp	r1, r2
 80066e0:	d1f9      	bne.n	80066d6 <memcpy+0xe>
 80066e2:	bd10      	pop	{r4, pc}

080066e4 <memset>:
 80066e4:	4402      	add	r2, r0
 80066e6:	4603      	mov	r3, r0
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d100      	bne.n	80066ee <memset+0xa>
 80066ec:	4770      	bx	lr
 80066ee:	f803 1b01 	strb.w	r1, [r3], #1
 80066f2:	e7f9      	b.n	80066e8 <memset+0x4>

080066f4 <cleanup_glue>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	460c      	mov	r4, r1
 80066f8:	6809      	ldr	r1, [r1, #0]
 80066fa:	4605      	mov	r5, r0
 80066fc:	b109      	cbz	r1, 8006702 <cleanup_glue+0xe>
 80066fe:	f7ff fff9 	bl	80066f4 <cleanup_glue>
 8006702:	4621      	mov	r1, r4
 8006704:	4628      	mov	r0, r5
 8006706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800670a:	f000 b869 	b.w	80067e0 <_free_r>
	...

08006710 <_reclaim_reent>:
 8006710:	4b2c      	ldr	r3, [pc, #176]	; (80067c4 <_reclaim_reent+0xb4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4283      	cmp	r3, r0
 8006716:	b570      	push	{r4, r5, r6, lr}
 8006718:	4604      	mov	r4, r0
 800671a:	d051      	beq.n	80067c0 <_reclaim_reent+0xb0>
 800671c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800671e:	b143      	cbz	r3, 8006732 <_reclaim_reent+0x22>
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d14a      	bne.n	80067bc <_reclaim_reent+0xac>
 8006726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006728:	6819      	ldr	r1, [r3, #0]
 800672a:	b111      	cbz	r1, 8006732 <_reclaim_reent+0x22>
 800672c:	4620      	mov	r0, r4
 800672e:	f000 f857 	bl	80067e0 <_free_r>
 8006732:	6961      	ldr	r1, [r4, #20]
 8006734:	b111      	cbz	r1, 800673c <_reclaim_reent+0x2c>
 8006736:	4620      	mov	r0, r4
 8006738:	f000 f852 	bl	80067e0 <_free_r>
 800673c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800673e:	b111      	cbz	r1, 8006746 <_reclaim_reent+0x36>
 8006740:	4620      	mov	r0, r4
 8006742:	f000 f84d 	bl	80067e0 <_free_r>
 8006746:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006748:	b111      	cbz	r1, 8006750 <_reclaim_reent+0x40>
 800674a:	4620      	mov	r0, r4
 800674c:	f000 f848 	bl	80067e0 <_free_r>
 8006750:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006752:	b111      	cbz	r1, 800675a <_reclaim_reent+0x4a>
 8006754:	4620      	mov	r0, r4
 8006756:	f000 f843 	bl	80067e0 <_free_r>
 800675a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800675c:	b111      	cbz	r1, 8006764 <_reclaim_reent+0x54>
 800675e:	4620      	mov	r0, r4
 8006760:	f000 f83e 	bl	80067e0 <_free_r>
 8006764:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006766:	b111      	cbz	r1, 800676e <_reclaim_reent+0x5e>
 8006768:	4620      	mov	r0, r4
 800676a:	f000 f839 	bl	80067e0 <_free_r>
 800676e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006770:	b111      	cbz	r1, 8006778 <_reclaim_reent+0x68>
 8006772:	4620      	mov	r0, r4
 8006774:	f000 f834 	bl	80067e0 <_free_r>
 8006778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800677a:	b111      	cbz	r1, 8006782 <_reclaim_reent+0x72>
 800677c:	4620      	mov	r0, r4
 800677e:	f000 f82f 	bl	80067e0 <_free_r>
 8006782:	69a3      	ldr	r3, [r4, #24]
 8006784:	b1e3      	cbz	r3, 80067c0 <_reclaim_reent+0xb0>
 8006786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006788:	4620      	mov	r0, r4
 800678a:	4798      	blx	r3
 800678c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800678e:	b1b9      	cbz	r1, 80067c0 <_reclaim_reent+0xb0>
 8006790:	4620      	mov	r0, r4
 8006792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006796:	f7ff bfad 	b.w	80066f4 <cleanup_glue>
 800679a:	5949      	ldr	r1, [r1, r5]
 800679c:	b941      	cbnz	r1, 80067b0 <_reclaim_reent+0xa0>
 800679e:	3504      	adds	r5, #4
 80067a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067a2:	2d80      	cmp	r5, #128	; 0x80
 80067a4:	68d9      	ldr	r1, [r3, #12]
 80067a6:	d1f8      	bne.n	800679a <_reclaim_reent+0x8a>
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 f819 	bl	80067e0 <_free_r>
 80067ae:	e7ba      	b.n	8006726 <_reclaim_reent+0x16>
 80067b0:	680e      	ldr	r6, [r1, #0]
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 f814 	bl	80067e0 <_free_r>
 80067b8:	4631      	mov	r1, r6
 80067ba:	e7ef      	b.n	800679c <_reclaim_reent+0x8c>
 80067bc:	2500      	movs	r5, #0
 80067be:	e7ef      	b.n	80067a0 <_reclaim_reent+0x90>
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
 80067c2:	bf00      	nop
 80067c4:	20000014 	.word	0x20000014

080067c8 <__malloc_lock>:
 80067c8:	4801      	ldr	r0, [pc, #4]	; (80067d0 <__malloc_lock+0x8>)
 80067ca:	f7ff bf7b 	b.w	80066c4 <__retarget_lock_acquire_recursive>
 80067ce:	bf00      	nop
 80067d0:	20004bac 	.word	0x20004bac

080067d4 <__malloc_unlock>:
 80067d4:	4801      	ldr	r0, [pc, #4]	; (80067dc <__malloc_unlock+0x8>)
 80067d6:	f7ff bf76 	b.w	80066c6 <__retarget_lock_release_recursive>
 80067da:	bf00      	nop
 80067dc:	20004bac 	.word	0x20004bac

080067e0 <_free_r>:
 80067e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067e2:	2900      	cmp	r1, #0
 80067e4:	d044      	beq.n	8006870 <_free_r+0x90>
 80067e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ea:	9001      	str	r0, [sp, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f1a1 0404 	sub.w	r4, r1, #4
 80067f2:	bfb8      	it	lt
 80067f4:	18e4      	addlt	r4, r4, r3
 80067f6:	f7ff ffe7 	bl	80067c8 <__malloc_lock>
 80067fa:	4a1e      	ldr	r2, [pc, #120]	; (8006874 <_free_r+0x94>)
 80067fc:	9801      	ldr	r0, [sp, #4]
 80067fe:	6813      	ldr	r3, [r2, #0]
 8006800:	b933      	cbnz	r3, 8006810 <_free_r+0x30>
 8006802:	6063      	str	r3, [r4, #4]
 8006804:	6014      	str	r4, [r2, #0]
 8006806:	b003      	add	sp, #12
 8006808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800680c:	f7ff bfe2 	b.w	80067d4 <__malloc_unlock>
 8006810:	42a3      	cmp	r3, r4
 8006812:	d908      	bls.n	8006826 <_free_r+0x46>
 8006814:	6825      	ldr	r5, [r4, #0]
 8006816:	1961      	adds	r1, r4, r5
 8006818:	428b      	cmp	r3, r1
 800681a:	bf01      	itttt	eq
 800681c:	6819      	ldreq	r1, [r3, #0]
 800681e:	685b      	ldreq	r3, [r3, #4]
 8006820:	1949      	addeq	r1, r1, r5
 8006822:	6021      	streq	r1, [r4, #0]
 8006824:	e7ed      	b.n	8006802 <_free_r+0x22>
 8006826:	461a      	mov	r2, r3
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	b10b      	cbz	r3, 8006830 <_free_r+0x50>
 800682c:	42a3      	cmp	r3, r4
 800682e:	d9fa      	bls.n	8006826 <_free_r+0x46>
 8006830:	6811      	ldr	r1, [r2, #0]
 8006832:	1855      	adds	r5, r2, r1
 8006834:	42a5      	cmp	r5, r4
 8006836:	d10b      	bne.n	8006850 <_free_r+0x70>
 8006838:	6824      	ldr	r4, [r4, #0]
 800683a:	4421      	add	r1, r4
 800683c:	1854      	adds	r4, r2, r1
 800683e:	42a3      	cmp	r3, r4
 8006840:	6011      	str	r1, [r2, #0]
 8006842:	d1e0      	bne.n	8006806 <_free_r+0x26>
 8006844:	681c      	ldr	r4, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	6053      	str	r3, [r2, #4]
 800684a:	4421      	add	r1, r4
 800684c:	6011      	str	r1, [r2, #0]
 800684e:	e7da      	b.n	8006806 <_free_r+0x26>
 8006850:	d902      	bls.n	8006858 <_free_r+0x78>
 8006852:	230c      	movs	r3, #12
 8006854:	6003      	str	r3, [r0, #0]
 8006856:	e7d6      	b.n	8006806 <_free_r+0x26>
 8006858:	6825      	ldr	r5, [r4, #0]
 800685a:	1961      	adds	r1, r4, r5
 800685c:	428b      	cmp	r3, r1
 800685e:	bf04      	itt	eq
 8006860:	6819      	ldreq	r1, [r3, #0]
 8006862:	685b      	ldreq	r3, [r3, #4]
 8006864:	6063      	str	r3, [r4, #4]
 8006866:	bf04      	itt	eq
 8006868:	1949      	addeq	r1, r1, r5
 800686a:	6021      	streq	r1, [r4, #0]
 800686c:	6054      	str	r4, [r2, #4]
 800686e:	e7ca      	b.n	8006806 <_free_r+0x26>
 8006870:	b003      	add	sp, #12
 8006872:	bd30      	pop	{r4, r5, pc}
 8006874:	20004bb0 	.word	0x20004bb0

08006878 <_init>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	bf00      	nop
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr

08006884 <_fini>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr
